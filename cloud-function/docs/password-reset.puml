@startuml Password Reset
title Password Reset Flow

autonumber "<b>[00]"

actor User
participant Browser
participant Hasura
participant CloudFunction
participant SMTPServer

note over CloudFunction
token is a JWT with the following payload:
{
  "sub": email,
  "aud": instance url,
  "iat": number,
  "exp": number, // iat + 15min
  "mod": string  // user.modified
}

it is signed with the PASSWORD_RESET_SECRET

when verifying the token: if users modified timestamp is greater than
mod, the token must be considered invalid (ensure token can only be
used once).
end note

== Request Password Reset ==

activate User
User -> Browser: request password reset (email)
activate Browser
Browser -> Hasura: mutation SendPasswordResetMail(email)
activate Hasura
Hasura -> CloudFunction: action SendPasswordResetMail(email)
activate CloudFunction
CloudFunction -> CloudFunction: rateLimit (email)

opt rateLimit exceeded
    CloudFunction --> Hasura: 419
    Hasura --> Browser: 419
    Browser --> User: show rateLimit exceeded message
end

CloudFunction -> Hasura: query User(email)
Hasura --> CloudFunction: User | null

opt User does not exist
    CloudFunction --> Hasura: 404
    Hasura --> Browser: 404
    Browser --> User: show user not found message
end

CloudFunction -> CloudFunction: generate token (email, timestamp)
CloudFunction -> SMTPServer: send email with token
activate SMTPServer
SMTPServer --> CloudFunction: resp
deactivate SMTPServer

opt resp == SMTP error
    CloudFunction --> Hasura: 500
    Hasura --> Browser: 500
    Browser --> User: show general error message
end

CloudFunction --> Hasura: userId
deactivate CloudFunction
Hasura --> Browser: userId
deactivate Hasura
Browser --> User: show check mailbox message
deactivate Browser

== Reset Password ==

User -> Browser: click link in email
activate Browser
Browser -> Hasura: mutation ResetPassword(newPassword, token)
activate Hasura
Hasura -> CloudFunction: action ResetPassword(newPassword, token)
activate CloudFunction
CloudFunction -> CloudFunction: verify token (token)
opt token is invalid
    CloudFunction --> Hasura: 401
    Hasura --> Browser: 401
    Browser --> User: show error message
end

CloudFunction -> Hasura: query User(token.email)
Hasura --> CloudFunction: User | null
opt User does not exist
    CloudFunction --> Hasura: 404
    Hasura --> Browser: 404
    Browser --> User: show user not found message
end

opt user.modified > token.mod
    CloudFunction --> Hasura: 403
    Hasura --> Browser: 403
    Browser --> User: show token expired message
end

CloudFunction -> CloudFunction: updateUserPassword(userId, newPassword)
CloudFunction -> Hasura: mutation ChangePassword(userId, newPassword)
Hasura --> CloudFunction: resp

opt resp == error
    CloudFunction --> Hasura: 500
    Hasura --> Browser: 500
    Browser --> User: show general error message
end

CloudFunction --> Hasura: userId
deactivate CloudFunction
Hasura --> Browser: userId
deactivate Hasura
Browser -> Browser: redirect to login page
Browser --> User: show login form
deactivate Browser
deactivate User

@enduml
