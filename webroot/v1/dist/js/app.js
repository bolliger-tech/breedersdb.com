!function a(s,o,l){function p(t,e){if(!o[t]){if(!s[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(u)return u(t,!0);var i=new Error("Cannot find module '"+t+"'");throw i.code="MODULE_NOT_FOUND",i}var r=o[t]={exports:{}};s[t][0].call(r.exports,function(e){return p(s[t][1][e]||e)},r,r.exports,a,s,o,l)}return o[t].exports}for(var u="function"==typeof require&&require,e=0;e<l.length;e++)p(l[e]);return p}({1:[function(e,t,n){!function(){"use strict";var l={name:"doT",version:"1.1.1",templateSettings:{evaluate:/\{\{([\s\S]+?(\}?)+)\}\}/g,interpolate:/\{\{=([\s\S]+?)\}\}/g,encode:/\{\{!([\s\S]+?)\}\}/g,use:/\{\{#([\s\S]+?)\}\}/g,useParams:/(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g,define:/\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,defineParams:/^\s*([\w$]+):([\s\S]+)/,conditional:/\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,iterate:/\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,varname:"it",strip:!0,append:!0,selfcontained:!1,doNotSkipEncoded:!1},template:void 0,compile:void 0,log:!0,encodeHTMLSource:function(e){var t={"&":"&#38;","<":"&#60;",">":"&#62;",'"':"&#34;","'":"&#39;","/":"&#47;"},n=e?/[&<>"'\/]/g:/&(?!#?\w+;)|<|>|"|'|\//g;return function(e){return e?e.toString().replace(n,function(e){return t[e]||e}):""}}},p=function(){return this||(0,eval)("this")}();void 0!==t&&t.exports?t.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):p.doT=l;var u={append:{start:"'+(",end:")+'",startencode:"'+encodeHTML("},split:{start:"';out+=(",end:");out+='",startencode:"';out+=encodeHTML("}},c=/$^/;function h(e){return e.replace(/\\('|\\)/g,"$1").replace(/[\r\t\n]/g," ")}l.template=function(e,t,n){var i,r,a=(t=t||l.templateSettings).append?u.append:u.split,s=0,o=t.use||t.define?function i(r,e,a){return("string"==typeof e?e:e.toString()).replace(r.define||c,function(e,i,t,n){return 0===i.indexOf("def.")&&(i=i.substring(4)),i in a||(":"===t?(r.defineParams&&n.replace(r.defineParams,function(e,t,n){a[i]={arg:t,text:n}}),i in a||(a[i]=n)):new Function("def","def['"+i+"']="+n)(a)),""}).replace(r.use||c,function(e,t){r.useParams&&(t=t.replace(r.useParams,function(e,t,n,i){if(a[n]&&a[n].arg&&i){var r=(n+":"+i).replace(/'|\\/g,"_");return a.__exp=a.__exp||{},a.__exp[r]=a[n].text.replace(new RegExp("(^|[^\\w$])"+a[n].arg+"([^\\w$])","g"),"$1"+i+"$2"),t+"def.__exp['"+r+"']"}}));var n=new Function("def","return "+t)(a);return n?i(r,n,a):n})}(t,e,n||{}):e,o=("var out='"+(t.strip?o.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g," ").replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g,""):o).replace(/'|\\/g,"\\$&").replace(t.interpolate||c,function(e,t){return a.start+h(t)+a.end}).replace(t.encode||c,function(e,t){return i=!0,a.startencode+h(t)+a.end}).replace(t.conditional||c,function(e,t,n){return t?n?"';}else if("+h(n)+"){out+='":"';}else{out+='":n?"';if("+h(n)+"){out+='":"';}out+='"}).replace(t.iterate||c,function(e,t,n,i){return t?(s+=1,r=i||"i"+s,t=h(t),"';var arr"+s+"="+t+";if(arr"+s+"){var "+n+","+r+"=-1,l"+s+"=arr"+s+".length-1;while("+r+"<l"+s+"){"+n+"=arr"+s+"["+r+"+=1];out+='"):"';} } out+='"}).replace(t.evaluate||c,function(e,t){return"';"+h(t)+"out+='"})+"';return out;").replace(/\n/g,"\\n").replace(/\t/g,"\\t").replace(/\r/g,"\\r").replace(/(\s|;|\}|^|\{)out\+='';/g,"$1").replace(/\+''/g,"");i&&(t.selfcontained||!p||p._encodeHTML||(p._encodeHTML=l.encodeHTMLSource(t.doNotSkipEncoded)),o="var encodeHTML = typeof _encodeHTML !== 'undefined' ? _encodeHTML : ("+l.encodeHTMLSource.toString()+"("+(t.doNotSkipEncoded||"")+"));"+o);try{return new Function(t.varname,o)}catch(e){throw"undefined"!=typeof console&&console.log("Could not create a template function: "+o),e}},l.compile=function(e,t){return l.template(e,null,t)}}()},{}],2:[function(e,t,n){var i,r;i=this,r=function(m,n){"use strict";var h=function(e,t){(e[0].queryBuilder=this).$el=e,this.settings=m.extendext(!0,"replace",{},h.DEFAULTS,t),this.model=new i,this.status={id:null,generated_id:!1,group_id:0,rule_id:0,has_optgroup:!1,has_operator_optgroup:!1},this.filters=this.settings.filters,this.icons=this.settings.icons,this.operators=this.settings.operators,this.templates=this.settings.templates,this.plugins=this.settings.plugins,this.lang=null,void 0===h.regional.en&&f.error("Config",'"i18n/en.js" not loaded.'),this.lang=m.extendext(!0,"replace",{},h.regional.en,h.regional[this.settings.lang_code],this.settings.lang),!1===this.settings.allow_groups?this.settings.allow_groups=0:!0===this.settings.allow_groups&&(this.settings.allow_groups=-1),Object.keys(this.templates).forEach(function(e){this.templates[e]||(this.templates[e]=h.templates[e]),"string"==typeof this.templates[e]&&(this.templates[e]=n.template(this.templates[e]))},this),this.$el.attr("id")||(this.$el.attr("id","qb_"+Math.floor(99999*Math.random())),this.status.generated_id=!0),this.status.id=this.$el.attr("id"),this.$el.addClass("query-builder form-inline"),this.filters=this.checkFilters(this.filters),this.operators=this.checkOperators(this.operators),this.bindEvents(),this.initPlugins()};m.extend(h.prototype,{trigger:function(e){var t=new m.Event(this._tojQueryEvent(e),{builder:this});return this.$el.triggerHandler(t,Array.prototype.slice.call(arguments,1)),t},change:function(e,t){var n=new m.Event(this._tojQueryEvent(e,!0),{builder:this,value:t});return this.$el.triggerHandler(n,Array.prototype.slice.call(arguments,2)),n.value},on:function(e,t){return this.$el.on(this._tojQueryEvent(e),t),this},off:function(e,t){return this.$el.off(this._tojQueryEvent(e),t),this},once:function(e,t){return this.$el.one(this._tojQueryEvent(e),t),this},_tojQueryEvent:function(e,t){return e.split(" ").map(function(e){return e+".queryBuilder"+(t?".filter":"")}).join(" ")}}),h.types={string:"string",integer:"number",double:"number",date:"datetime",time:"datetime",datetime:"datetime",boolean:"boolean"},h.inputs=["text","number","textarea","radio","checkbox","select"],h.modifiable_options=["display_errors","allow_groups","allow_empty","default_condition","default_filter"],h.selectors={group_container:".rules-group-container",rule_container:".rule-container",filter_container:".rule-filter-container",operator_container:".rule-operator-container",value_container:".rule-value-container",error_container:".error-container",condition_container:".rules-group-header .group-conditions",rule_header:".rule-header",group_header:".rules-group-header",group_actions:".group-actions",rule_actions:".rule-actions",rules_list:".rules-group-body>.rules-list",group_condition:".rules-group-header [name$=_cond]",rule_filter:".rule-filter-container [name$=_filter]",rule_operator:".rule-operator-container [name$=_operator]",rule_value:".rule-value-container [name*=_value_]",add_rule:"[data-add=rule]",delete_rule:"[data-delete=rule]",add_group:"[data-add=group]",delete_group:"[data-delete=group]"},h.templates={},h.regional={},h.OPERATORS={equal:{type:"equal",nb_inputs:1,multiple:!1,apply_to:["string","number","datetime","boolean"]},not_equal:{type:"not_equal",nb_inputs:1,multiple:!1,apply_to:["string","number","datetime","boolean"]},in:{type:"in",nb_inputs:1,multiple:!0,apply_to:["string","number","datetime"]},not_in:{type:"not_in",nb_inputs:1,multiple:!0,apply_to:["string","number","datetime"]},less:{type:"less",nb_inputs:1,multiple:!1,apply_to:["number","datetime"]},less_or_equal:{type:"less_or_equal",nb_inputs:1,multiple:!1,apply_to:["number","datetime"]},greater:{type:"greater",nb_inputs:1,multiple:!1,apply_to:["number","datetime"]},greater_or_equal:{type:"greater_or_equal",nb_inputs:1,multiple:!1,apply_to:["number","datetime"]},between:{type:"between",nb_inputs:2,multiple:!1,apply_to:["number","datetime"]},not_between:{type:"not_between",nb_inputs:2,multiple:!1,apply_to:["number","datetime"]},begins_with:{type:"begins_with",nb_inputs:1,multiple:!1,apply_to:["string"]},not_begins_with:{type:"not_begins_with",nb_inputs:1,multiple:!1,apply_to:["string"]},contains:{type:"contains",nb_inputs:1,multiple:!1,apply_to:["string"]},not_contains:{type:"not_contains",nb_inputs:1,multiple:!1,apply_to:["string"]},ends_with:{type:"ends_with",nb_inputs:1,multiple:!1,apply_to:["string"]},not_ends_with:{type:"not_ends_with",nb_inputs:1,multiple:!1,apply_to:["string"]},is_empty:{type:"is_empty",nb_inputs:0,multiple:!1,apply_to:["string"]},is_not_empty:{type:"is_not_empty",nb_inputs:0,multiple:!1,apply_to:["string"]},is_null:{type:"is_null",nb_inputs:0,multiple:!1,apply_to:["string","number","datetime","boolean"]},is_not_null:{type:"is_not_null",nb_inputs:0,multiple:!1,apply_to:["string","number","datetime","boolean"]}},h.DEFAULTS={filters:[],plugins:[],sort_filters:!1,display_errors:!0,allow_groups:-1,allow_empty:!1,conditions:["AND","OR"],default_condition:"AND",inputs_separator:" , ",select_placeholder:"------",display_empty_filter:!0,default_filter:null,optgroups:{},default_rule_flags:{filter_readonly:!1,operator_readonly:!1,value_readonly:!1,no_delete:!1},default_group_flags:{condition_readonly:!1,no_add_rule:!1,no_add_group:!1,no_delete:!1},templates:{group:null,rule:null,filterSelect:null,operatorSelect:null,ruleValueSelect:null},lang_code:"en",lang:{},operators:["equal","not_equal","in","not_in","less","less_or_equal","greater","greater_or_equal","between","not_between","begins_with","not_begins_with","contains","not_contains","ends_with","not_ends_with","is_empty","is_not_empty","is_null","is_not_null"],icons:{add_group:"glyphicon glyphicon-plus-sign",add_rule:"glyphicon glyphicon-plus",remove_group:"glyphicon glyphicon-remove",remove_rule:"glyphicon glyphicon-remove",error:"glyphicon glyphicon-warning-sign"}},h.plugins={},h.defaults=function(e){if("object"!=typeof e)return"string"==typeof e?"object"==typeof h.DEFAULTS[e]?m.extend(!0,{},h.DEFAULTS[e]):h.DEFAULTS[e]:m.extend(!0,{},h.DEFAULTS);m.extendext(!0,"replace",h.DEFAULTS,e)},h.define=function(e,t,n){h.plugins[e]={fct:t,def:n||{}}},h.extend=function(e){m.extend(h.prototype,e)},h.prototype.initPlugins=function(){var t;this.plugins&&(m.isArray(this.plugins)&&(t={},this.plugins.forEach(function(e){t[e]=null}),this.plugins=t),Object.keys(this.plugins).forEach(function(e){e in h.plugins?(this.plugins[e]=m.extend(!0,{},h.plugins[e].def,this.plugins[e]||{}),h.plugins[e].fct.call(this,this.plugins[e])):f.error("Config",'Unable to find plugin "{0}"',e)},this))},h.prototype.getPluginOptions=function(e,t){var n;if(this.plugins&&this.plugins[e]?n=this.plugins[e]:h.plugins[e]&&(n=h.plugins[e].def),n)return t?n[t]:n;f.error("Config",'Unable to find plugin "{0}"',e)},h.prototype.init=function(e){this.trigger("afterInit"),e?(this.setRules(e),delete this.settings.rules):this.setRoot(!0)},h.prototype.checkFilters=function(e){var n,t=[];return e&&0!==e.length||f.error("Config","Missing filters list"),e.forEach(function(i,e){switch(i.id||f.error("Config","Missing filter {0} id",e),-1!=t.indexOf(i.id)&&f.error("Config",'Filter "{0}" already defined',i.id),t.push(i.id),i.type?h.types[i.type]||f.error("Config",'Invalid type "{0}"',i.type):i.type="string",i.input?"function"!=typeof i.input&&-1==h.inputs.indexOf(i.input)&&f.error("Config",'Invalid input "{0}"',i.input):i.input="number"===h.types[i.type]?"number":"text",i.operators&&i.operators.forEach(function(e){"string"!=typeof e&&f.error("Config","Filter operators must be global operators types (string)")}),i.field||(i.field=i.id),i.label||(i.label=i.field),i.optgroup?(this.status.has_optgroup=!0,this.settings.optgroups[i.optgroup]||(this.settings.optgroups[i.optgroup]=i.optgroup)):i.optgroup=null,i.input){case"radio":case"checkbox":(!i.values||i.values.length<1)&&f.error("Config",'Missing filter "{0}" values',i.id);break;case"select":var r=[];i.has_optgroup=!1,f.iterateOptions(i.values,function(e,t,n){r.push({value:e,label:t,optgroup:n||null}),n&&(i.has_optgroup=!0,this.settings.optgroups[n]||(this.settings.optgroups[n]=n))}.bind(this)),i.has_optgroup?i.values=f.groupSort(r,"optgroup"):i.values=r,i.placeholder&&(void 0===i.placeholder_value&&(i.placeholder_value=-1),i.values.forEach(function(e){e.value==i.placeholder_value&&f.error("Config",'Placeholder of filter "{0}" overlaps with one of its values',i.id)}))}},this),this.settings.sort_filters&&("function"==typeof this.settings.sort_filters?e.sort(this.settings.sort_filters):(n=this,e.sort(function(e,t){return n.translate(e.label).localeCompare(n.translate(t.label))}))),this.status.has_optgroup&&(e=f.groupSort(e,"optgroup")),e},h.prototype.checkOperators=function(n){var i=[];return n.forEach(function(e,t){"string"==typeof e?(h.OPERATORS[e]||f.error("Config",'Unknown operator "{0}"',e),n[t]=e=m.extendext(!0,"replace",{},h.OPERATORS[e])):(e.type||f.error("Config",'Missing "type" for operator {0}',t),h.OPERATORS[e.type]&&(n[t]=e=m.extendext(!0,"replace",{},h.OPERATORS[e.type],e)),void 0!==e.nb_inputs&&void 0!==e.apply_to||f.error("Config",'Missing "nb_inputs" and/or "apply_to" for operator "{0}"',e.type)),-1!=i.indexOf(e.type)&&f.error("Config",'Operator "{0}" already defined',e.type),i.push(e.type),e.optgroup?(this.status.has_operator_optgroup=!0,this.settings.optgroups[e.optgroup]||(this.settings.optgroups[e.optgroup]=e.optgroup)):e.optgroup=null},this),this.status.has_operator_optgroup&&(n=f.groupSort(n,"optgroup")),n},h.prototype.bindEvents=function(){var a=this,t=h.selectors;this.$el.on("change.queryBuilder",t.group_condition,function(){var e;m(this).is(":checked")&&(e=m(this).closest(t.group_container),a.getModel(e).condition=m(this).val())}),this.$el.on("change.queryBuilder",t.rule_filter,function(){var e=m(this).closest(t.rule_container);a.getModel(e).filter=a.getFilterById(m(this).val())}),this.$el.on("change.queryBuilder",t.rule_operator,function(){var e=m(this).closest(t.rule_container);a.getModel(e).operator=a.getOperatorByType(m(this).val())}),this.$el.on("click.queryBuilder",t.add_rule,function(){var e=m(this).closest(t.group_container);a.addRule(a.getModel(e))}),this.$el.on("click.queryBuilder",t.delete_rule,function(){var e=m(this).closest(t.rule_container);a.deleteRule(a.getModel(e))}),0!==this.settings.allow_groups&&(this.$el.on("click.queryBuilder",t.add_group,function(){var e=m(this).closest(t.group_container);a.addGroup(a.getModel(e))}),this.$el.on("click.queryBuilder",t.delete_group,function(){var e=m(this).closest(t.group_container);a.deleteGroup(a.getModel(e))})),this.model.on({drop:function(e,t){t.$el.remove(),a.refreshGroupsConditions()},add:function(e,t,n,i){0===i?n.$el.prependTo(t.$el.find(">"+h.selectors.rules_list)):n.$el.insertAfter(t.rules[i-1].$el),a.refreshGroupsConditions()},move:function(e,t,n,i){t.$el.detach(),0===i?t.$el.prependTo(n.$el.find(">"+h.selectors.rules_list)):t.$el.insertAfter(n.rules[i-1].$el),a.refreshGroupsConditions()},update:function(e,t,n,i,r){if(t instanceof s)switch(n){case"error":a.updateError(t);break;case"flags":a.applyRuleFlags(t);break;case"filter":a.updateRuleFilter(t,r);break;case"operator":a.updateRuleOperator(t,r);break;case"value":a.updateRuleValue(t,r)}else switch(n){case"error":a.updateError(t);break;case"flags":a.applyGroupFlags(t);break;case"condition":a.updateGroupCondition(t,r)}}})},h.prototype.setRoot=function(e,t,n){e=void 0===e||!0===e;var i=this.nextGroupId(),r=m(m.parseHTML(this.getGroupTemplate(i,1)));return this.$el.append(r),this.model.root=new l(null,r),this.model.root.model=this.model,this.model.root.data=t,this.model.root.flags=m.extend({},this.settings.default_group_flags,n),this.model.root.condition=this.settings.default_condition,this.trigger("afterAddGroup",this.model.root),e&&this.addRule(this.model.root),this.model.root},h.prototype.addGroup=function(e,t,n,i){t=void 0===t||!0===t;var r=e.level+1;if(this.trigger("beforeAddGroup",e,t,r).isDefaultPrevented())return null;var a=this.nextGroupId(),s=m(this.getGroupTemplate(a,r)),o=e.addGroup(s);return o.data=n,o.flags=m.extend({},this.settings.default_group_flags,i),o.condition=this.settings.default_condition,this.trigger("afterAddGroup",o),this.trigger("rulesChanged"),t&&this.addRule(o),o},h.prototype.deleteGroup=function(e){if(e.isRoot())return!1;if(this.trigger("beforeDeleteGroup",e).isDefaultPrevented())return!1;var t=!0;return e.each("reverse",function(e){t&=this.deleteRule(e)},function(e){t&=this.deleteGroup(e)},this),t&&(e.drop(),this.trigger("afterDeleteGroup"),this.trigger("rulesChanged")),t},h.prototype.updateGroupCondition=function(t,e){t.$el.find(">"+h.selectors.group_condition).each(function(){var e=m(this);e.prop("checked",e.val()===t.condition),e.parent().toggleClass("active",e.val()===t.condition)}),this.trigger("afterUpdateGroupCondition",t,e),this.trigger("rulesChanged")},h.prototype.refreshGroupsConditions=function(){!function t(e){e.flags&&(!e.flags||e.flags.condition_readonly)||e.$el.find(">"+h.selectors.group_condition).prop("disabled",e.rules.length<=1).parent().toggleClass("disabled",e.rules.length<=1),e.each(null,function(e){t(e)},this)}(this.model.root)},h.prototype.addRule=function(e,t,n){if(this.trigger("beforeAddRule",e).isDefaultPrevented())return null;var i=this.nextRuleId(),r=m(m.parseHTML(this.getRuleTemplate(i))),a=e.addRule(r);return a.data=t,a.flags=m.extend({},this.settings.default_rule_flags,n),this.trigger("afterAddRule",a),this.trigger("rulesChanged"),this.createRuleFilters(a),!this.settings.default_filter&&this.settings.display_empty_filter||(a.filter=this.change("getDefaultFilter",this.getFilterById(this.settings.default_filter||this.filters[0].id),a)),a},h.prototype.deleteRule=function(e){return!e.flags.no_delete&&(!this.trigger("beforeDeleteRule",e).isDefaultPrevented()&&(e.drop(),this.trigger("afterDeleteRule"),this.trigger("rulesChanged"),!0))},h.prototype.createRuleFilters=function(e){var t=this.change("getRuleFilters",this.filters,e),n=m(m.parseHTML(this.getRuleFilterSelect(e,t)));e.$el.find(h.selectors.filter_container).html(n),this.trigger("afterCreateRuleFilters",e),this.applyRuleFlags(e)},h.prototype.createRuleOperators=function(e){var t,n,i=e.$el.find(h.selectors.operator_container).empty();e.filter&&(t=this.getOperators(e.filter),n=m(m.parseHTML(this.getRuleOperatorSelect(e,t))),i.html(n),e.filter.default_operator?e.__.operator=this.getOperatorByType(e.filter.default_operator):e.__.operator=t[0],e.$el.find(h.selectors.rule_operator).val(e.operator.type),this.trigger("afterCreateRuleOperators",e,t),this.applyRuleFlags(e))},h.prototype.createRuleInput=function(e){var t=e.$el.find(h.selectors.value_container).empty();if(e.__.value=void 0,e.filter&&e.operator&&0!==e.operator.nb_inputs){for(var n=this,i=m(),r=e.filter,a=0;a<e.operator.nb_inputs;a++){var s=m(m.parseHTML(this.getRuleInput(e,a)));0<a&&t.append(this.settings.inputs_separator),t.append(s),i=i.add(s)}t.css("display",""),i.on("change "+(r.input_event||""),function(){e._updating_input||(e._updating_value=!0,e.value=n.getRuleInputValue(e),e._updating_value=!1)}),r.plugin&&i[r.plugin](r.plugin_config||{}),this.trigger("afterCreateRuleInput",e),void 0!==r.default_value?e.value=r.default_value:(e._updating_value=!0,e.value=n.getRuleInputValue(e),e._updating_value=!1),this.applyRuleFlags(e)}},h.prototype.updateRuleFilter=function(e,t){this.createRuleOperators(e),this.createRuleInput(e),e.$el.find(h.selectors.rule_filter).val(e.filter?e.filter.id:"-1"),t&&e.filter&&t.id!==e.filter.id&&(e.data=void 0),this.trigger("afterUpdateRuleFilter",e,t),this.trigger("rulesChanged")},h.prototype.updateRuleOperator=function(e,t){var n=e.$el.find(h.selectors.value_container);e.operator&&0!==e.operator.nb_inputs?(n.css("display",""),!n.is(":empty")&&t&&e.operator.nb_inputs===t.nb_inputs&&e.operator.optgroup===t.optgroup||this.createRuleInput(e)):(n.hide(),e.__.value=void 0),e.operator&&(e.$el.find(h.selectors.rule_operator).val(e.operator.type),e.__.value=this.getRuleInputValue(e)),this.trigger("afterUpdateRuleOperator",e,t),this.trigger("rulesChanged")},h.prototype.updateRuleValue=function(e,t){e._updating_value||this.setRuleInputValue(e,e.value),this.trigger("afterUpdateRuleValue",e,t),this.trigger("rulesChanged")},h.prototype.applyRuleFlags=function(e){var t=e.flags,n=h.selectors;e.$el.find(n.rule_filter).prop("disabled",t.filter_readonly),e.$el.find(n.rule_operator).prop("disabled",t.operator_readonly),e.$el.find(n.rule_value).prop("disabled",t.value_readonly),t.no_delete&&e.$el.find(n.delete_rule).remove(),this.trigger("afterApplyRuleFlags",e)},h.prototype.applyGroupFlags=function(e){var t=e.flags,n=h.selectors;e.$el.find(">"+n.group_condition).prop("disabled",t.condition_readonly).parent().toggleClass("readonly",t.condition_readonly),t.no_add_rule&&e.$el.find(n.add_rule).remove(),t.no_add_group&&e.$el.find(n.add_group).remove(),t.no_delete&&e.$el.find(n.delete_group).remove(),this.trigger("afterApplyGroupFlags",e)},h.prototype.clearErrors=function(e){(e=e||this.model.root)&&(e.error=null,e instanceof l&&e.each(function(e){e.error=null},function(e){this.clearErrors(e)},this))},h.prototype.updateError=function(e){var t;this.settings.display_errors&&(null===e.error?e.$el.removeClass("has-error"):(t=this.translate("errors",e.error[0]),t=f.fmt(t,e.error.slice(1)),t=this.change("displayError",t,e.error,e),e.$el.addClass("has-error").find(h.selectors.error_container).eq(0).attr("title",t)))},h.prototype.triggerValidationError=function(e,t,n){m.isArray(t)||(t=[t]),this.trigger("validationError",e,t,n).isDefaultPrevented()||(e.error=t)},h.prototype.destroy=function(){this.trigger("beforeDestroy"),this.status.generated_id&&this.$el.removeAttr("id"),this.clear(),this.model=null,this.$el.off(".queryBuilder").removeClass("query-builder").removeData("queryBuilder"),delete this.$el[0].queryBuilder},h.prototype.reset=function(){this.trigger("beforeReset").isDefaultPrevented()||(this.status.group_id=1,this.status.rule_id=0,this.model.root.empty(),this.model.root.data=void 0,this.model.root.flags=m.extend({},this.settings.default_group_flags),this.model.root.condition=this.settings.default_condition,this.addRule(this.model.root),this.trigger("afterReset"),this.trigger("rulesChanged"))},h.prototype.clear=function(){this.trigger("beforeClear").isDefaultPrevented()||(this.status.group_id=0,this.status.rule_id=0,this.model.root&&(this.model.root.drop(),this.model.root=null),this.trigger("afterClear"),this.trigger("rulesChanged"))},h.prototype.setOptions=function(e){m.each(e,function(e,t){-1!==h.modifiable_options.indexOf(e)&&(this.settings[e]=t)}.bind(this))},h.prototype.getModel=function(e){return e?e instanceof r?e:m(e).data("queryBuilderModel"):this.model.root},h.prototype.validate=function(a){a=m.extend({skip_empty:!1},a),this.clearErrors();var s=this,e=function n(e){var i=0,r=0;return e.each(function(e){if(e.filter||!a.skip_empty){if(!e.filter)return s.triggerValidationError(e,"no_filter",null),void r++;if(!e.operator)return s.triggerValidationError(e,"no_operator",null),void r++;if(0!==e.operator.nb_inputs){var t=s.validateValue(e,e.value);if(!0!==t)return s.triggerValidationError(e,t,e.value),void r++}i++}},function(e){var t=n(e);!0===t?i++:!1===t&&r++}),!(0<r)&&(0===i&&!e.isRoot()&&a.skip_empty?null:!!(0!==i||s.settings.allow_empty&&e.isRoot())||(s.triggerValidationError(e,"empty_group",null),!1))}(this.model.root);return this.change("validate",e)},h.prototype.getRules=function(a){a=m.extend({get_flags:!1,allow_invalid:!1,skip_empty:!1},a);var e=this.validate(a);if(!e&&!a.allow_invalid)return null;var s=this,t=function n(e){var t,r={condition:e.condition,rules:[]};return e.data&&(r.data=m.extendext(!0,"replace",{},e.data)),a.get_flags&&(t=s.getGroupFlags(e.flags,"all"===a.get_flags),m.isEmptyObject(t)||(r.flags=t)),e.each(function(e){var t,n,i;!e.filter&&a.skip_empty||(t=null,e.operator&&0===e.operator.nb_inputs||(t=e.value),n={id:e.filter?e.filter.id:null,field:e.filter?e.filter.field:null,type:e.filter?e.filter.type:null,input:e.filter?e.filter.input:null,operator:e.operator?e.operator.type:null,value:t},(e.filter&&e.filter.data||e.data)&&(n.data=m.extendext(!0,"replace",{},e.filter.data,e.data)),a.get_flags&&(i=s.getRuleFlags(e.flags,"all"===a.get_flags),m.isEmptyObject(i)||(n.flags=i)),r.rules.push(s.change("ruleToJson",n,e)))},function(e){var t=n(e);0===t.rules.length&&a.skip_empty||r.rules.push(t)},this),s.change("groupToJson",r,e)}(this.model.root);return t.valid=e,this.change("getRules",t)},h.prototype.setRules=function(e,r){r=m.extend({allow_invalid:!1},r),m.isArray(e)&&(e={condition:this.settings.default_condition,rules:e}),e&&e.rules&&(0!==e.rules.length||this.settings.allow_empty)||f.error("RulesParse","Incorrect data object passed"),this.clear(),this.setRoot(!1,e.data,this.parseGroupFlags(e)),e=this.change("setRules",e,r);var a=this;!function n(e,i){null!==i&&(void 0===e.condition?e.condition=a.settings.default_condition:-1==a.settings.conditions.indexOf(e.condition)&&(f.error(!r.allow_invalid,"UndefinedCondition",'Invalid condition "{0}"',e.condition),e.condition=a.settings.default_condition),i.condition=e.condition,e.rules.forEach(function(e){var t;if(void 0!==e.rules)if(-1!==a.settings.allow_groups&&a.settings.allow_groups<i.level)f.error(!r.allow_invalid,"RulesParse","No more than {0} groups are allowed",a.settings.allow_groups),a.reset();else{if(null===(t=a.addGroup(i,!1,e.data,a.parseGroupFlags(e))))return;n(e,t)}else{if(e.empty||(void 0===e.id&&(f.error(!r.allow_invalid,"RulesParse","Missing rule field id"),e.empty=!0),void 0===e.operator&&(e.operator="equal")),null===(t=a.addRule(i,e.data,a.parseRuleFlags(e))))return;e.empty||(t.filter=a.getFilterById(e.id,!r.allow_invalid)),t.filter&&(t.operator=a.getOperatorByType(e.operator,!r.allow_invalid),t.operator||(t.operator=a.getOperators(t.filter)[0])),t.operator&&0!==t.operator.nb_inputs&&(void 0!==e.value?t.value=e.value:void 0!==t.filter.default_value&&(t.value=t.filter.default_value)),a.change("jsonToRule",t,e)!=t&&f.error("RulesParse","Plugin tried to change rule reference")}}),a.change("jsonToGroup",i,e)!=i&&f.error("RulesParse","Plugin tried to change group reference"))}(e,this.model.root),this.trigger("afterSetRules")},h.prototype.validateValue=function(e,t){var n=e.filter.validation||{},i=!0,i=n.callback?n.callback.call(this,t,e):this._validateValue(e,t);return this.change("validateValue",i,t,e)},h.prototype._validateValue=function(e,t){var n,i,r=e.filter,a=e.operator,s=r.validation||{},o=!0;1===e.operator.nb_inputs&&(t=[t]);for(var l=0;l<a.nb_inputs;l++){if(!a.multiple&&m.isArray(t[l])&&1<t[l].length){o=["operator_not_multiple",a.type,this.translate("operators",a.type)];break}switch(r.input){case"radio":if(void 0!==t[l]&&0!==t[l].length)break;s.allow_empty_value||(o=["radio_empty"]);break;case"checkbox":if(void 0!==t[l]&&0!==t[l].length)break;s.allow_empty_value||(o=["checkbox_empty"]);break;case"select":if(void 0===t[l]||0===t[l].length||r.placeholder&&t[l]==r.placeholder_value){s.allow_empty_value||(o=["select_empty"]);break}break;default:i=m.isArray(t[l])?t[l]:[t[l]];for(var p=0;p<i.length;p++){switch(h.types[r.type]){case"string":if(void 0===i[p]||0===i[p].length){s.allow_empty_value||(o=["string_empty"]);break}if(void 0!==s.min&&i[p].length<parseInt(s.min)){o=[this.getValidationMessage(s,"min","string_exceed_min_length"),s.min];break}if(void 0!==s.max&&i[p].length>parseInt(s.max)){o=[this.getValidationMessage(s,"max","string_exceed_max_length"),s.max];break}if(!s.format||("string"==typeof s.format&&(s.format=new RegExp(s.format)),s.format.test(i[p])))break;o=[this.getValidationMessage(s,"format","string_invalid_format"),s.format];break;case"number":if(void 0===i[p]||0===i[p].length){s.allow_empty_value||(o=["number_nan"]);break}if(isNaN(i[p])){o=["number_nan"];break}if("integer"==r.type){if(parseInt(i[p])!=i[p]){o=["number_not_integer"];break}}else if(parseFloat(i[p])!=i[p]){o=["number_not_double"];break}if(void 0!==s.min&&i[p]<parseFloat(s.min)){o=[this.getValidationMessage(s,"min","number_exceed_min"),s.min];break}if(void 0!==s.max&&i[p]>parseFloat(s.max)){o=[this.getValidationMessage(s,"max","number_exceed_max"),s.max];break}if(void 0!==s.step&&"any"!==s.step){var u=(i[p]/s.step).toPrecision(14);if(parseInt(u)!=u){o=[this.getValidationMessage(s,"step","number_wrong_step"),s.step];break}}break;case"datetime":if(void 0===i[p]||0===i[p].length){s.allow_empty_value||(o=["datetime_empty"]);break}if(s.format){"moment"in window||f.error("MissingLibrary","MomentJS is required for Date/Time validation. Get it here http://momentjs.com");var c=moment(i[p],s.format);if(!c.isValid()){o=[this.getValidationMessage(s,"format","datetime_invalid"),s.format];break}if(s.min&&c<moment(s.min,s.format)){o=[this.getValidationMessage(s,"min","datetime_exceed_min"),s.min];break}if(s.max&&c>moment(s.max,s.format)){o=[this.getValidationMessage(s,"max","datetime_exceed_max"),s.max];break}}break;case"boolean":if(void 0===i[p]||0===i[p].length){s.allow_empty_value||(o=["boolean_not_valid"]);break}if("true"!==(n=(""+i[p]).trim().toLowerCase())&&"false"!==n&&"1"!==n&&"0"!==n&&1!==i[p]&&0!==i[p]){o=["boolean_not_valid"];break}}if(!0!==o)break}}if(!0!==o)break}if(("between"===e.operator.type||"not_between"===e.operator.type)&&2===t.length)switch(h.types[r.type]){case"number":t[0]>t[1]&&(o=["number_between_invalid",t[0],t[1]]);break;case"datetime":s.format&&("moment"in window||f.error("MissingLibrary","MomentJS is required for Date/Time validation. Get it here http://momentjs.com"),moment(t[0],s.format).isAfter(moment(t[1],s.format))&&(o=["datetime_between_invalid",t[0],t[1]]))}return o},h.prototype.nextGroupId=function(){return this.status.id+"_group_"+this.status.group_id++},h.prototype.nextRuleId=function(){return this.status.id+"_rule_"+this.status.rule_id++},h.prototype.getOperators=function(n){"string"==typeof n&&(n=this.getFilterById(n));for(var e=[],t=0,i=this.operators.length;t<i;t++){if(n.operators){if(-1==n.operators.indexOf(this.operators[t].type))continue}else if(-1==this.operators[t].apply_to.indexOf(h.types[n.type]))continue;e.push(this.operators[t])}return n.operators&&e.sort(function(e,t){return n.operators.indexOf(e.type)-n.operators.indexOf(t.type)}),this.change("getOperators",e,n)},h.prototype.getFilterById=function(e,t){if("-1"==e)return null;for(var n=0,i=this.filters.length;n<i;n++)if(this.filters[n].id==e)return this.filters[n];return f.error(!1!==t,"UndefinedFilter",'Undefined filter "{0}"',e),null},h.prototype.getOperatorByType=function(e,t){if("-1"==e)return null;for(var n=0,i=this.operators.length;n<i;n++)if(this.operators[n].type==e)return this.operators[n];return f.error(!1!==t,"UndefinedOperator",'Undefined operator "{0}"',e),null},h.prototype.getRuleInputValue=function(e){var t=e.filter,n=e.operator,i=[];if(t.valueGetter)i=t.valueGetter.call(this,e);else{for(var r=e.$el.find(h.selectors.value_container),a=0;a<n.nb_inputs;a++){var s,o=f.escapeElementId(e.id+"_value_"+a);switch(t.input){case"radio":i.push(r.find("[name="+o+"]:checked").val());break;case"checkbox":s=[],r.find("[name="+o+"]:checked").each(function(){s.push(m(this).val())}),i.push(s);break;case"select":t.multiple?(s=[],r.find("[name="+o+"] option:selected").each(function(){s.push(m(this).val())}),i.push(s)):i.push(r.find("[name="+o+"] option:selected").val());break;default:i.push(r.find("[name="+o+"]").val())}}i=i.map(function(e){return n.multiple&&t.value_separator&&"string"==typeof e&&(e=e.split(t.value_separator)),m.isArray(e)?e.map(function(e){return f.changeType(e,t.type)}):f.changeType(e,t.type)}),1===n.nb_inputs&&(i=i[0]),t.valueParser&&(i=t.valueParser.call(this,e,i))}return this.change("getRuleValue",i,e)},h.prototype.setRuleInputValue=function(e,t){var n=e.filter,i=e.operator;if(n&&i){if(e._updating_input=!0,n.valueSetter)n.valueSetter.call(this,e,t);else{var r=e.$el.find(h.selectors.value_container);1==i.nb_inputs&&(t=[t]);for(var a=0;a<i.nb_inputs;a++){var s=f.escapeElementId(e.id+"_value_"+a);switch(n.input){case"radio":r.find("[name="+s+'][value="'+t[a]+'"]').prop("checked",!0).trigger("change");break;case"checkbox":m.isArray(t[a])||(t[a]=[t[a]]),t[a].forEach(function(e){r.find("[name="+s+'][value="'+e+'"]').prop("checked",!0).trigger("change")});break;default:i.multiple&&n.value_separator&&m.isArray(t[a])&&(t[a]=t[a].join(n.value_separator)),r.find("[name="+s+"]").val(t[a]).trigger("change")}}}e._updating_input=!1}},h.prototype.parseRuleFlags=function(e){var t=m.extend({},this.settings.default_rule_flags);return e.readonly&&m.extend(t,{filter_readonly:!0,operator_readonly:!0,value_readonly:!0,no_delete:!0}),e.flags&&m.extend(t,e.flags),this.change("parseRuleFlags",t,e)},h.prototype.getRuleFlags=function(n,e){if(e)return m.extend({},n);var i={};return m.each(this.settings.default_rule_flags,function(e,t){n[e]!==t&&(i[e]=n[e])}),i},h.prototype.parseGroupFlags=function(e){var t=m.extend({},this.settings.default_group_flags);return e.readonly&&m.extend(t,{condition_readonly:!0,no_add_rule:!0,no_add_group:!0,no_delete:!0}),e.flags&&m.extend(t,e.flags),this.change("parseGroupFlags",t,e)},h.prototype.getGroupFlags=function(n,e){if(e)return m.extend({},n);var i={};return m.each(this.settings.default_group_flags,function(e,t){n[e]!==t&&(i[e]=n[e])}),i},h.prototype.translate=function(e,t){var n;return t||(t=e,e=void 0),n="object"==typeof t?t[this.settings.lang_code]||t.en:(e?this.lang[e]:this.lang)[t]||t,this.change("translate",n,t,e)},h.prototype.getValidationMessage=function(e,t,n){return e.messages&&e.messages[t]||n},h.templates.group='<div id="{{= it.group_id }}" class="rules-group-container">   <div class="rules-group-header">     <div class="btn-group pull-right group-actions">       <button type="button" class="btn btn-xs btn-success" data-add="rule">         <i class="{{= it.icons.add_rule }}"></i> {{= it.translate("add_rule") }}       </button>       {{? it.settings.allow_groups===-1 || it.settings.allow_groups>=it.level }}         <button type="button" class="btn btn-xs btn-success" data-add="group">           <i class="{{= it.icons.add_group }}"></i> {{= it.translate("add_group") }}         </button>       {{?}}       {{? it.level>1 }}         <button type="button" class="btn btn-xs btn-danger" data-delete="group">           <i class="{{= it.icons.remove_group }}"></i> {{= it.translate("delete_group") }}         </button>       {{?}}     </div>     <div class="btn-group group-conditions">       {{~ it.conditions: condition }}         <label class="btn btn-xs btn-primary">           <input type="radio" name="{{= it.group_id }}_cond" value="{{= condition }}"> {{= it.translate("conditions", condition) }}         </label>       {{~}}     </div>     {{? it.settings.display_errors }}       <div class="error-container"><i class="{{= it.icons.error }}"></i></div>     {{?}}   </div>   <div class=rules-group-body>     <div class=rules-list></div>   </div> </div>',h.templates.rule='<div id="{{= it.rule_id }}" class="rule-container">   <div class="rule-header">     <div class="btn-group pull-right rule-actions">       <button type="button" class="btn btn-xs btn-danger" data-delete="rule">         <i class="{{= it.icons.remove_rule }}"></i> {{= it.translate("delete_rule") }}       </button>     </div>   </div>   {{? it.settings.display_errors }}     <div class="error-container"><i class="{{= it.icons.error }}"></i></div>   {{?}}   <div class="rule-filter-container"></div>   <div class="rule-operator-container"></div>   <div class="rule-value-container"></div> </div>',h.templates.filterSelect='{{ var optgroup = null; }} <select class="form-control" name="{{= it.rule.id }}_filter">   {{? it.settings.display_empty_filter }}     <option value="-1">{{= it.settings.select_placeholder }}</option>   {{?}}   {{~ it.filters: filter }}     {{? optgroup !== filter.optgroup }}       {{? optgroup !== null }}</optgroup>{{?}}       {{? (optgroup = filter.optgroup) !== null }}         <optgroup label="{{= it.translate(it.settings.optgroups[optgroup]) }}">       {{?}}     {{?}}     <option value="{{= filter.id }}" {{? filter.icon}}data-icon="{{= filter.icon}}"{{?}}>{{= it.translate(filter.label) }}</option>   {{~}}   {{? optgroup !== null }}</optgroup>{{?}} </select>',h.templates.operatorSelect='{{? it.operators.length === 1 }} <span> {{= it.translate("operators", it.operators[0].type) }} </span> {{?}} {{ var optgroup = null; }} <select class="form-control {{? it.operators.length === 1 }}hide{{?}}" name="{{= it.rule.id }}_operator">   {{~ it.operators: operator }}     {{? optgroup !== operator.optgroup }}       {{? optgroup !== null }}</optgroup>{{?}}       {{? (optgroup = operator.optgroup) !== null }}         <optgroup label="{{= it.translate(it.settings.optgroups[optgroup]) }}">       {{?}}     {{?}}     <option value="{{= operator.type }}" {{? operator.icon}}data-icon="{{= operator.icon}}"{{?}}>{{= it.translate("operators", operator.type) }}</option>   {{~}}   {{? optgroup !== null }}</optgroup>{{?}} </select>',h.templates.ruleValueSelect='{{ var optgroup = null; }} <select class="form-control" name="{{= it.name }}" {{? it.rule.filter.multiple }}multiple{{?}}>   {{? it.rule.filter.placeholder }}     <option value="{{= it.rule.filter.placeholder_value }}" disabled selected>{{= it.rule.filter.placeholder }}</option>   {{?}}   {{~ it.rule.filter.values: entry }}     {{? optgroup !== entry.optgroup }}       {{? optgroup !== null }}</optgroup>{{?}}       {{? (optgroup = entry.optgroup) !== null }}         <optgroup label="{{= it.translate(it.settings.optgroups[optgroup]) }}">       {{?}}     {{?}}     <option value="{{= entry.value }}">{{= entry.label }}</option>   {{~}}   {{? optgroup !== null }}</optgroup>{{?}} </select>',h.prototype.getGroupTemplate=function(e,t){var n=this.templates.group({builder:this,group_id:e,level:t,conditions:this.settings.conditions,icons:this.icons,settings:this.settings,translate:this.translate.bind(this)});return this.change("getGroupTemplate",n,t)},h.prototype.getRuleTemplate=function(e){var t=this.templates.rule({builder:this,rule_id:e,icons:this.icons,settings:this.settings,translate:this.translate.bind(this)});return this.change("getRuleTemplate",t)},h.prototype.getRuleFilterSelect=function(e,t){var n=this.templates.filterSelect({builder:this,rule:e,filters:t,icons:this.icons,settings:this.settings,translate:this.translate.bind(this)});return this.change("getRuleFilterSelect",n,e,t)},h.prototype.getRuleOperatorSelect=function(e,t){var n=this.templates.operatorSelect({builder:this,rule:e,operators:t,icons:this.icons,settings:this.settings,translate:this.translate.bind(this)});return this.change("getRuleOperatorSelect",n,e,t)},h.prototype.getRuleValueSelect=function(e,t){var n=this.templates.ruleValueSelect({builder:this,name:e,rule:t,icons:this.icons,settings:this.settings,translate:this.translate.bind(this)});return this.change("getRuleValueSelect",n,e,t)},h.prototype.getRuleInput=function(e,t){var n=e.filter,i=e.filter.validation||{},r=e.id+"_value_"+t,a=n.vertical?" class=block":"",s="",o=Array.isArray(n.placeholder)?n.placeholder[t]:n.placeholder;if("function"==typeof n.input)s=n.input.call(this,e,r);else switch(n.input){case"radio":case"checkbox":f.iterateOptions(n.values,function(e,t){s+="<label"+a+'><input type="'+n.input+'" name="'+r+'" value="'+e+'"> '+t+"</label> "});break;case"select":s=this.getRuleValueSelect(r,e);break;case"textarea":s+='<textarea class="form-control" name="'+r+'"',n.size&&(s+=' cols="'+n.size+'"'),n.rows&&(s+=' rows="'+n.rows+'"'),void 0!==i.min&&(s+=' minlength="'+i.min+'"'),void 0!==i.max&&(s+=' maxlength="'+i.max+'"'),o&&(s+=' placeholder="'+o+'"'),s+="></textarea>";break;case"number":s+='<input class="form-control" type="number" name="'+r+'"',void 0!==i.step&&(s+=' step="'+i.step+'"'),void 0!==i.min&&(s+=' min="'+i.min+'"'),void 0!==i.max&&(s+=' max="'+i.max+'"'),o&&(s+=' placeholder="'+o+'"'),n.size&&(s+=' size="'+n.size+'"'),s+=">";break;default:s+='<input class="form-control" type="text" name="'+r+'"',o&&(s+=' placeholder="'+o+'"'),"string"===n.type&&void 0!==i.min&&(s+=' minlength="'+i.min+'"'),"string"===n.type&&void 0!==i.max&&(s+=' maxlength="'+i.max+'"'),n.size&&(s+=' size="'+n.size+'"'),s+=">"}return this.change("getRuleInput",s,e,r)};var f={};function i(){this.root=null,this.$=m(this)}(h.utils=f).iterateOptions=function(e,n){e&&(m.isArray(e)?e.forEach(function(e){m.isPlainObject(e)?"value"in e?n(e.value,e.label||e.value,e.optgroup):m.each(e,function(e,t){return n(e,t),!1}):n(e,e)}):m.each(e,function(e,t){n(e,t)}))},f.fmt=function(e,n){return Array.isArray(n)||(n=Array.prototype.slice.call(arguments,1)),e.replace(/{([0-9]+)}/g,function(e,t){return n[parseInt(t)]})},f.error=function(){var e=0,t="boolean"!=typeof arguments[e]||arguments[e++],n=arguments[e++],i=arguments[e++],r=Array.isArray(arguments[e])?arguments[e]:Array.prototype.slice.call(arguments,e);if(t){var a=new Error(f.fmt(i,r));throw a.name=n+"Error",a.args=r,a}console.error(n+"Error: "+f.fmt(i,r))},f.changeType=function(e,t){if(""!==e&&void 0!==e)switch(t){case"integer":return"string"!=typeof e||/^-?\d+$/.test(e)?parseInt(e):e;case"double":return"string"!=typeof e||/^-?\d+\.?\d*$/.test(e)?parseFloat(e):e;case"boolean":return"string"!=typeof e||/^(0|1|true|false){1}$/i.test(e)?!0===e||1===e||"true"===e.toLowerCase()||"1"===e:e;default:return e}},f.escapeString=function(e){return"string"!=typeof e?e:e.replace(/[\0\n\r\b\\\'\"]/g,function(e){switch(e){case"\0":return"\\0";case"\n":return"\\n";case"\r":return"\\r";case"\b":return"\\b";default:return"\\"+e}}).replace(/\t/g,"\\t").replace(/\x1a/g,"\\Z")},f.escapeRegExp=function(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")},f.escapeElementId=function(e){return e?e.replace(/(\\)?([:.\[\],])/g,function(e,t,n){return t?e:"\\"+n}):e},f.groupSort=function(e,n){var i=[],r=[];return e.forEach(function(e){var t;!e[n]||-1==(t=i.lastIndexOf(e[n]))?t=i.length:t++,i.splice(t,0,e[n]),r.splice(t,0,e)}),r},f.defineModelProperties=function(e,t){t.forEach(function(n){Object.defineProperty(e.prototype,n,{enumerable:!0,get:function(){return this.__[n]},set:function(e){var t=null!==this.__[n]&&"object"==typeof this.__[n]?m.extend({},this.__[n]):this.__[n];this.__[n]=e,null!==this.model&&this.model.trigger("update",this,n,e,t)}})})},m.extend(i.prototype,{trigger:function(e){var t=new m.Event(e);return this.$.triggerHandler(t,Array.prototype.slice.call(arguments,1)),t},on:function(){return this.$.on.apply(this.$,Array.prototype.slice.call(arguments)),this},off:function(){return this.$.off.apply(this.$,Array.prototype.slice.call(arguments)),this},once:function(){return this.$.one.apply(this.$,Array.prototype.slice.call(arguments)),this}});var r=function(e,t){if(!(this instanceof r))return new r(e,t);Object.defineProperty(this,"__",{value:{}}),t.data("queryBuilderModel",this),this.__.level=1,this.__.error=null,this.__.flags={},this.__.data=void 0,this.$el=t,this.id=t[0].id,this.model=null,this.parent=e};f.defineModelProperties(r,["level","error","data","flags"]),Object.defineProperty(r.prototype,"parent",{enumerable:!0,get:function(){return this.__.parent},set:function(e){this.__.parent=e,this.level=null===e?1:e.level+1,this.model=null===e?null:e.model}}),r.prototype.isRoot=function(){return 1===this.level},r.prototype.getPos=function(){return this.isRoot()?-1:this.parent.getNodePos(this)},r.prototype.drop=function(){var e=this.model;this.parent&&this.parent.removeNode(this),this.$el.removeData("queryBuilderModel"),null!==e&&e.trigger("drop",this)},r.prototype.moveAfter=function(e){this.isRoot()||this.move(e.parent,e.getPos()+1)},r.prototype.moveAtBegin=function(e){this.isRoot()||(void 0===e&&(e=this.parent),this.move(e,0))},r.prototype.moveAtEnd=function(e){this.isRoot()||(void 0===e&&(e=this.parent),this.move(e,0===e.length()?0:e.length()-1))},r.prototype.move=function(e,t){this.isRoot()||("number"==typeof e&&(t=e,e=this.parent),this.parent.removeNode(this),e.insertNode(this,t,!1),null!==this.model&&this.model.trigger("move",this,e,t))};var l=function(e,t){if(!(this instanceof l))return new l(e,t);r.call(this,e,t),this.rules=[],this.__.condition=null};l.prototype=Object.create(r.prototype),l.prototype.constructor=l,f.defineModelProperties(l,["condition"]),l.prototype.empty=function(){this.each("reverse",function(e){e.drop()},function(e){e.drop()})},l.prototype.drop=function(){this.empty(),r.prototype.drop.call(this)},l.prototype.length=function(){return this.rules.length},l.prototype.insertNode=function(e,t,n){return void 0===t&&(t=this.length()),this.rules.splice(t,0,e),e.parent=this,n&&null!==this.model&&this.model.trigger("add",this,e,t),e},l.prototype.addGroup=function(e,t){return this.insertNode(new l(this,e),t,!0)},l.prototype.addRule=function(e,t){return this.insertNode(new s(this,e),t,!0)},l.prototype.removeNode=function(e){var t=this.getNodePos(e);-1!==t&&(e.parent=null,this.rules.splice(t,1))},l.prototype.getNodePos=function(e){return this.rules.indexOf(e)},l.prototype.each=function(e,t,n,i){"boolean"!=typeof e&&"string"!=typeof e&&(i=n,n=t,t=e,e=!1),i=void 0===i?null:i;for(var r=e?this.rules.length-1:0,a=e?0:this.rules.length-1,s=e?-1:1,o=!1;(e?a<=r:r<=a)&&(this.rules[r]instanceof l?n&&(o=!1===n.call(i,this.rules[r])):t&&(o=!1===t.call(i,this.rules[r])),!o);r+=s);return!o},l.prototype.contains=function(t,e){return-1!==this.getNodePos(t)||!!e&&!this.each(function(){return!0},function(e){return!e.contains(t,!0)})};var s=function(e,t){if(!(this instanceof s))return new s(e,t);r.call(this,e,t),this._updating_value=!1,this._updating_input=!1,this.__.filter=null,this.__.operator=null,this.__.value=void 0};function p(e,t,n){var i,r=h.selectors,a=t.closest(r.rule_container);a.length&&(i="moveAfter"),i||(a=t.closest(r.group_header)).length&&(a=t.closest(r.group_container),i="moveAtBegin"),i||(a=t.closest(r.group_container)).length&&(i="moveAtEnd"),i&&(e[i](n.getModel(a)),n&&e instanceof s&&n.setRuleInputValue(e,e.value))}function a(e){return e.match(/(question_mark|numbered|named)(?:\((.)\))?/)||[null,"question_mark",void 0]}return s.prototype=Object.create(r.prototype),s.prototype.constructor=s,f.defineModelProperties(s,["filter","operator","value"]),s.prototype.isRoot=function(){return!1},h.Group=l,h.Rule=s,m.fn.queryBuilder=function(e){0===this.length&&f.error("Config","No target defined"),1<this.length&&f.error("Config","Unable to initialize on multiple target");var t,n=this.data("queryBuilder"),i="object"==typeof e&&e||{};return n||"destroy"!=e?(n||(t=new h(this,i),this.data("queryBuilder",t),t.init(i.rules)),"string"==typeof e?n[e].apply(n,Array.prototype.slice.call(arguments,1)):this):this},m.fn.queryBuilder.constructor=h,m.fn.queryBuilder.defaults=h.defaults,m.fn.queryBuilder.extend=h.extend,m.fn.queryBuilder.define=h.define,m.fn.queryBuilder.regional=h.regional,h.define("bt-checkbox",function(p){"glyphicons"==p.font&&this.$el.addClass("bt-checkbox-glyphicons"),this.on("getRuleInput.filter",function(r,e,a){var s,o,l=e.filter;"radio"!==l.input&&"checkbox"!==l.input||l.plugin||(r.value="",l.colors||(l.colors={}),l.color&&(l.colors._def_=l.color),s=l.vertical?' style="display:block"':"",o=0,f.iterateOptions(l.values,function(e,t){var n=l.colors[e]||l.colors._def_||p.color,i=a+"_"+o++;r.value+="<div"+s+' class="'+l.input+" "+l.input+"-"+n+'">   <input type="'+l.input+'" name="'+a+'" id="'+i+'" value="'+e+'">   <label for="'+i+'">'+t+"</label> </div>"}))})},{font:"glyphicons",color:"default"}),h.define("bt-selectpicker",function(n){m.fn.selectpicker&&m.fn.selectpicker.Constructor||f.error("MissingLibrary",'Bootstrap Select is required to use "bt-selectpicker" plugin. Get it here: http://silviomoreto.github.io/bootstrap-select');var i=h.selectors;this.on("afterCreateRuleFilters",function(e,t){t.$el.find(i.rule_filter).removeClass("form-control").selectpicker(n)}),this.on("afterCreateRuleOperators",function(e,t){t.$el.find(i.rule_operator).removeClass("form-control").selectpicker(n)}),this.on("afterUpdateRuleFilter",function(e,t){t.$el.find(i.rule_filter).selectpicker("render")}),this.on("afterUpdateRuleOperator",function(e,t){t.$el.find(i.rule_operator).selectpicker("render")}),this.on("beforeDeleteRule",function(e,t){t.$el.find(i.rule_filter).selectpicker("destroy"),t.$el.find(i.rule_operator).selectpicker("destroy")})},{container:"body",style:"btn-inverse btn-xs",width:"auto",showIcon:!1}),h.define("bt-tooltip-errors",function(i){m.fn.tooltip&&m.fn.tooltip.Constructor&&m.fn.tooltip.Constructor.prototype.fixTitle||f.error("MissingLibrary",'Bootstrap Tooltip is required to use "bt-tooltip-errors" plugin. Get it here: http://getbootstrap.com');var r=this;this.on("getRuleTemplate.filter getGroupTemplate.filter",function(e){var t=m(m.parseHTML(e.value));t.find(h.selectors.error_container).attr("data-toggle","tooltip"),e.value=t.prop("outerHTML")}),this.model.on("update",function(e,t,n){"error"==n&&r.settings.display_errors&&t.$el.find(h.selectors.error_container).eq(0).tooltip(i).tooltip("hide").tooltip("fixTitle")})},{placement:"right"}),h.extend({setFilters:function(e,t){var n=this;void 0===t&&(t=e,e=!1),t=this.checkFilters(t);var i=(t=this.change("setFilters",t)).map(function(e){return e.id});if(e||!function e(t){t.each(function(e){e.filter&&-1===i.indexOf(e.filter.id)&&f.error("ChangeFilter",'A rule is using filter "{0}"',e.filter.id)},e)}(this.model.root),this.filters=t,function e(t){t.each(!0,function(e){e.filter&&-1===i.indexOf(e.filter.id)?(e.drop(),n.trigger("rulesChanged")):(n.createRuleFilters(e),e.$el.find(h.selectors.rule_filter).val(e.filter?e.filter.id:"-1"),n.trigger("afterUpdateRuleFilter",e))},e)}(this.model.root),this.settings.plugins&&(this.settings.plugins["unique-filter"]&&this.updateDisabledFilters(),this.settings.plugins["bt-selectpicker"]&&this.$el.find(h.selectors.rule_filter).selectpicker("render")),this.settings.default_filter)try{this.getFilterById(this.settings.default_filter)}catch(e){this.settings.default_filter=null}this.trigger("afterSetFilters",t)},addFilter:function(e,n){void 0===n||"#end"==n?n=this.filters.length:"#start"==n&&(n=0),m.isArray(e)||(e=[e]);var t=m.extend(!0,[],this.filters);parseInt(n)==n||this.filters.some(function(e,t){if(e.id==n)return n=t+1,!0})?Array.prototype.splice.apply(t,[n,0].concat(e)):Array.prototype.push.apply(t,e),this.setFilters(t)},removeFilter:function(t,e){var n=m.extend(!0,[],this.filters);"string"==typeof t&&(t=[t]),n=n.filter(function(e){return-1===t.indexOf(e.id)}),this.setFilters(e,n)}}),h.define("chosen-selectpicker",function(n){m.fn.chosen||f.error("MissingLibrary",'chosen is required to use "chosen-selectpicker" plugin. Get it here: https://github.com/harvesthq/chosen'),this.settings.plugins["bt-selectpicker"]&&f.error("Conflict","bt-selectpicker is already selected as the dropdown plugin. Please remove chosen-selectpicker from the plugin list");var i=h.selectors;this.on("afterCreateRuleFilters",function(e,t){t.$el.find(i.rule_filter).removeClass("form-control").chosen(n)}),this.on("afterCreateRuleOperators",function(e,t){1<e.builder.getOperators(t.filter).length&&t.$el.find(i.rule_operator).removeClass("form-control").chosen(n)}),this.on("afterUpdateRuleFilter",function(e,t){t.$el.find(i.rule_filter).trigger("chosen:updated")}),this.on("afterUpdateRuleOperator",function(e,t){t.$el.find(i.rule_operator).trigger("chosen:updated")}),this.on("beforeDeleteRule",function(e,t){t.$el.find(i.rule_filter).chosen("destroy"),t.$el.find(i.rule_operator).chosen("destroy")})}),h.define("filter-description",function(r){"inline"===r.mode?this.on("afterUpdateRuleFilter afterUpdateRuleOperator",function(e,t){var n=t.$el.find("p.filter-description"),i=e.builder.getFilterDescription(t.filter,t);i?(0===n.length?(n=m(m.parseHTML('<p class="filter-description"></p>'))).appendTo(t.$el):n.css("display",""),n.html('<i class="'+r.icon+'"></i> '+i)):n.hide()}):"popover"===r.mode?(m.fn.popover&&m.fn.popover.Constructor&&m.fn.popover.Constructor.prototype.fixTitle||f.error("MissingLibrary",'Bootstrap Popover is required to use "filter-description" plugin. Get it here: http://getbootstrap.com'),this.on("afterUpdateRuleFilter afterUpdateRuleOperator",function(e,t){var n=t.$el.find("button.filter-description"),i=e.builder.getFilterDescription(t.filter,t);i?(0===n.length?((n=m(m.parseHTML('<button type="button" class="btn btn-xs btn-info filter-description" data-toggle="popover"><i class="'+r.icon+'"></i></button>'))).prependTo(t.$el.find(h.selectors.rule_actions)),n.popover({placement:"left",container:"body",html:!0}),n.on("mouseout",function(){n.popover("hide")})):n.css("display",""),n.data("bs.popover").options.content=i,n.attr("aria-describedby")&&n.popover("show")):(n.hide(),n.data("bs.popover")&&n.popover("hide"))})):"bootbox"===r.mode&&("bootbox"in window||f.error("MissingLibrary",'Bootbox is required to use "filter-description" plugin. Get it here: http://bootboxjs.com'),this.on("afterUpdateRuleFilter afterUpdateRuleOperator",function(e,t){var n=t.$el.find("button.filter-description"),i=e.builder.getFilterDescription(t.filter,t);i?(0===n.length?((n=m(m.parseHTML('<button type="button" class="btn btn-xs btn-info filter-description" data-toggle="bootbox"><i class="'+r.icon+'"></i></button>'))).prependTo(t.$el.find(h.selectors.rule_actions)),n.on("click",function(){bootbox.alert(n.data("description"))})):n.css("display",""),n.data("description",i)):n.hide()}))},{icon:"glyphicon glyphicon-info-sign",mode:"popover"}),h.extend({getFilterDescription:function(e,t){return e?"function"==typeof e.description?e.description.call(this,t):e.description:void 0}}),h.define("invert",function(n){var i=this,r=h.selectors;this.on("afterInit",function(){i.$el.on("click.queryBuilder","[data-invert=group]",function(){var e=m(this).closest(r.group_container);i.invert(i.getModel(e),n)}),n.display_rules_button&&n.invert_rules&&i.$el.on("click.queryBuilder","[data-invert=rule]",function(){var e=m(this).closest(r.rule_container);i.invert(i.getModel(e),n)})}),n.disable_template||(this.on("getGroupTemplate.filter",function(e){var t=m(m.parseHTML(e.value));t.find(r.condition_container).after('<button type="button" class="btn btn-xs btn-default" data-invert="group"><i class="'+n.icon+'"></i> '+i.translate("invert")+"</button>"),e.value=t.prop("outerHTML")}),n.display_rules_button&&n.invert_rules&&this.on("getRuleTemplate.filter",function(e){var t=m(m.parseHTML(e.value));t.find(r.rule_actions).prepend('<button type="button" class="btn btn-xs btn-default" data-invert="rule"><i class="'+n.icon+'"></i> '+i.translate("invert")+"</button>"),e.value=t.prop("outerHTML")}))},{icon:"glyphicon glyphicon-random",recursive:!0,invert_rules:!0,display_rules_button:!1,silent_fail:!1,disable_template:!1}),h.defaults({operatorOpposites:{equal:"not_equal",not_equal:"equal",in:"not_in",not_in:"in",less:"greater_or_equal",less_or_equal:"greater",greater:"less_or_equal",greater_or_equal:"less",between:"not_between",not_between:"between",begins_with:"not_begins_with",not_begins_with:"begins_with",contains:"not_contains",not_contains:"contains",ends_with:"not_ends_with",not_ends_with:"ends_with",is_empty:"is_not_empty",is_not_empty:"is_empty",is_null:"is_not_null",is_not_null:"is_null"},conditionOpposites:{AND:"OR",OR:"AND"}}),h.extend({invert:function(e,t){if(!(e instanceof r)){if(!this.model.root)return;t=e,e=this.model.root}var n,i;"object"!=typeof t&&(t={}),void 0===t.recursive&&(t.recursive=!0),void 0===t.invert_rules&&(t.invert_rules=!0),void 0===t.silent_fail&&(t.silent_fail=!1),void 0===t.trigger&&(t.trigger=!0),e instanceof l?(this.settings.conditionOpposites[e.condition]?e.condition=this.settings.conditionOpposites[e.condition]:t.silent_fail||f.error("InvertCondition",'Unknown inverse of condition "{0}"',e.condition),t.recursive&&(n=m.extend({},t,{trigger:!1}),e.each(function(e){t.invert_rules&&this.invert(e,n)},function(e){this.invert(e,n)},this))):e instanceof s&&e.operator&&!e.filter.no_invert&&(this.settings.operatorOpposites[e.operator.type]?(i=this.settings.operatorOpposites[e.operator.type],e.filter.operators&&-1==e.filter.operators.indexOf(i)||(e.operator=this.getOperatorByType(i))):t.silent_fail||f.error("InvertOperator",'Unknown inverse of operator "{0}"',e.operator.type)),t.trigger&&(this.trigger("afterInvert",e,t),this.trigger("rulesChanged"))}}),h.defaults({mongoOperators:{equal:function(e){return e[0]},not_equal:function(e){return{$ne:e[0]}},in:function(e){return{$in:e}},not_in:function(e){return{$nin:e}},less:function(e){return{$lt:e[0]}},less_or_equal:function(e){return{$lte:e[0]}},greater:function(e){return{$gt:e[0]}},greater_or_equal:function(e){return{$gte:e[0]}},between:function(e){return{$gte:e[0],$lte:e[1]}},not_between:function(e){return{$lt:e[0],$gt:e[1]}},begins_with:function(e){return{$regex:"^"+f.escapeRegExp(e[0])}},not_begins_with:function(e){return{$regex:"^(?!"+f.escapeRegExp(e[0])+")"}},contains:function(e){return{$regex:f.escapeRegExp(e[0])}},not_contains:function(e){return{$regex:"^((?!"+f.escapeRegExp(e[0])+").)*$",$options:"s"}},ends_with:function(e){return{$regex:f.escapeRegExp(e[0])+"$"}},not_ends_with:function(e){return{$regex:"(?<!"+f.escapeRegExp(e[0])+")$"}},is_empty:function(e){return""},is_not_empty:function(e){return{$ne:""}},is_null:function(e){return null},is_not_null:function(e){return{$ne:null}}},mongoRuleOperators:{$eq:function(e){return{val:e,op:null===e?"is_null":""===e?"is_empty":"equal"}},$ne:function(e){return{val:e=e.$ne,op:null===e?"is_not_null":""===e?"is_not_empty":"not_equal"}},$regex:function(e){return"^(?!"==(e=e.$regex).slice(0,4)&&")"==e.slice(-1)?{val:e.slice(4,-1),op:"not_begins_with"}:"^((?!"==e.slice(0,5)&&").)*$"==e.slice(-5)?{val:e.slice(5,-5),op:"not_contains"}:"(?<!"==e.slice(0,4)&&")$"==e.slice(-2)?{val:e.slice(4,-2),op:"not_ends_with"}:"$"==e.slice(-1)?{val:e.slice(0,-1),op:"ends_with"}:"^"==e.slice(0,1)?{val:e.slice(1),op:"begins_with"}:{val:e,op:"contains"}},between:function(e){return{val:[e.$gte,e.$lte],op:"between"}},not_between:function(e){return{val:[e.$lt,e.$gt],op:"not_between"}},$in:function(e){return{val:e.$in,op:"in"}},$nin:function(e){return{val:e.$nin,op:"not_in"}},$lt:function(e){return{val:e.$lt,op:"less"}},$lte:function(e){return{val:e.$lte,op:"less_or_equal"}},$gt:function(e){return{val:e.$gt,op:"greater"}},$gte:function(e){return{val:e.$gte,op:"greater_or_equal"}}}}),h.extend({getMongo:function(e){if(!(e=void 0===e?this.getRules():e))return null;var s=this;return function r(e){if(e.condition||(e.condition=s.settings.default_condition),-1===["AND","OR"].indexOf(e.condition.toUpperCase())&&f.error("UndefinedMongoCondition",'Unable to build MongoDB query with condition "{0}"',e.condition),!e.rules)return{};var a=[];e.rules.forEach(function(e){var t,n,i;e.rules&&0<e.rules.length?a.push(r(e)):(t=s.settings.mongoOperators[e.operator],n=s.getOperatorByType(e.operator),void 0===t&&f.error("UndefinedMongoOperator",'Unknown MongoDB operation for operator "{0}"',e.operator),0!==n.nb_inputs&&(e.value instanceof Array||(e.value=[e.value])),(i={})[s.change("getMongoDBField",e.field,e)]=t.call(s,e.value),a.push(s.change("ruleToMongo",i,e,e.value,t)))});var t={};return t["$"+e.condition.toLowerCase()]=a,s.change("groupToMongo",t,e)}(e)},getRulesFromMongo:function(e){if(null==e)return null;var c=this;if("rules"in(e=c.change("parseMongoNode",e))&&"condition"in e)return e;if("id"in e&&"operator"in e&&"value"in e)return{condition:this.settings.default_condition,rules:[e]};var t=c.getMongoCondition(e);return t||f.error("MongoParse","Invalid MongoDB query format"),function p(e,t){var n=e[t],u=[];return n.forEach(function(e){var t,n,i,r,a,s,o,l;"rules"in(e=c.change("parseMongoNode",e))&&"condition"in e||"id"in e&&"operator"in e&&"value"in e?u.push(e):(t=c.getMongoCondition(e))?u.push(p(e,t)):(i=e[n=Object.keys(e)[0]],void 0===(r=c.getMongoOperator(i))&&f.error("MongoParse","Invalid MongoDB query format"),void 0===(a=c.settings.mongoRuleOperators[r])&&f.error("UndefinedMongoOperator",'JSON Rule operation unknown for operator "{0}"',r),s=a.call(c,i),o=c.getMongoDBFieldID(n,i),l=c.change("mongoToRule",{id:o,field:n,operator:s.op,value:s.val},e),u.push(l))}),c.change("mongoToGroup",{condition:t.replace("$","").toUpperCase(),rules:u},e)}(e,t)},setRulesFromMongo:function(e){this.setRules(this.getRulesFromMongo(e))},getMongoDBFieldID:function(t,e){var n=this.filters.filter(function(e){return e.field===t}),i=1===n.length?n[0].id:this.change("getMongoDBFieldID",t,e);return i},getMongoOperator:function(e){if(null===e||"object"!=typeof e)return"$eq";if(void 0!==e.$gte&&void 0!==e.$lte)return"between";if(void 0!==e.$lt&&void 0!==e.$gt)return"not_between";var t=Object.keys(e).filter(function(e){return!!this.settings.mongoRuleOperators[e]}.bind(this));return 1===t.length?t[0]:void 0},getMongoCondition:function(e){for(var t=Object.keys(e),n=0,i=t.length;n<i;n++)if("$or"===t[n].toLowerCase()||"$and"===t[n].toLowerCase())return t[n]}}),h.define("not-group",function(n){var i=this;this.on("afterInit",function(){i.$el.on("click.queryBuilder","[data-not=group]",function(){var e=m(this).closest(h.selectors.group_container),t=i.getModel(e);t.not=!t.not}),i.model.on("update",function(e,t,n){t instanceof l&&"not"===n&&i.updateGroupNot(t)})}),this.on("afterAddGroup",function(e,t){t.__.not=!1}),n.disable_template||this.on("getGroupTemplate.filter",function(e){var t=m(m.parseHTML(e.value));t.find(h.selectors.condition_container).prepend('<button type="button" class="btn btn-xs btn-default" data-not="group"><i class="'+n.icon_unchecked+'"></i> '+i.translate("NOT")+"</button>"),e.value=t.prop("outerHTML")}),this.on("groupToJson.filter",function(e,t){e.value.not=t.not}),this.on("jsonToGroup.filter",function(e,t){e.value.not=!!t.not}),this.on("groupToSQL.filter",function(e,t){t.not&&(e.value="NOT ( "+e.value+" )")}),this.on("parseSQLNode.filter",function(e){e.value.name&&"NOT"==e.value.name.toUpperCase()&&(e.value=e.value.arguments.value[0],-1===["AND","OR"].indexOf(e.value.operation.toUpperCase())&&(e.value=new SQLParser.nodes.Op(i.settings.default_condition,e.value,null)),e.value.not=!0)}),this.on("sqlGroupsDistinct.filter",function(e,t,n,i){n.not&&0<i&&(e.value=!0)}),this.on("sqlToGroup.filter",function(e,t){e.value.not=!!t.not}),this.on("groupToMongo.filter",function(e,t){var n="$"+t.condition.toLowerCase();t.not&&e.value[n]&&(e.value={$nor:[e.value]})}),this.on("parseMongoNode.filter",function(e){var t=Object.keys(e.value);"$nor"==t[0]&&(e.value=e.value[t[0]][0],e.value.not=!0)}),this.on("mongoToGroup.filter",function(e,t){e.value.not=!!t.not})},{icon_unchecked:"glyphicon glyphicon-unchecked",icon_checked:"glyphicon glyphicon-check",disable_template:!1}),f.defineModelProperties(l,["not"]),h.selectors.group_not=h.selectors.group_header+" [data-not=group]",h.extend({updateGroupNot:function(e){var t=this.plugins["not-group"];e.$el.find(">"+h.selectors.group_not).toggleClass("active",e.not).find("i").attr("class",e.not?t.icon_checked:t.icon_unchecked),this.trigger("afterUpdateGroupNot",e),this.trigger("rulesChanged")}}),h.define("sortable",function(i){var r,a,s,o;"interact"in window||f.error("MissingLibrary",'interact.js is required to use "sortable" plugin. Get it here: http://interactjs.io'),void 0!==i.default_no_sortable&&(f.error(!1,"Config",'Sortable plugin : "default_no_sortable" options is deprecated, use standard "default_rule_flags" and "default_group_flags" instead'),this.settings.default_rule_flags.no_sortable=this.settings.default_group_flags.no_sortable=i.default_no_sortable),interact.dynamicDrop(!0),interact.pointerMoveTolerance(10),this.on("afterAddRule afterAddGroup",function(e,t){var n;t!=r&&(n=e.builder,i.inherit_no_sortable&&t.parent&&t.parent.flags.no_sortable&&(t.flags.no_sortable=!0),i.inherit_no_drop&&t.parent&&t.parent.flags.no_drop&&(t.flags.no_drop=!0),t.flags.no_sortable||interact(t.$el[0]).draggable({allowFrom:h.selectors.drag_handle,onstart:function(e){o=!1,s=n.getModel(e.target),a=s.$el.clone().appendTo(s.$el.parent()).width(s.$el.outerWidth()).addClass("dragging");var t=m(m.parseHTML('<div class="rule-placeholder">&nbsp;</div>')).height(s.$el.outerHeight());r=s.parent.addRule(t,s.getPos()),s.$el.hide()},onmove:function(e){a[0].style.top=e.clientY-15+"px",a[0].style.left=e.clientX-15+"px"},onend:function(e){e.dropzone&&(p(s,m(e.relatedTarget),n),o=!0),a.remove(),a=void 0,r.drop(),r=void 0,s.$el.css("display",""),n.trigger("afterMove",s),n.trigger("rulesChanged")}}),t.flags.no_drop||(interact(t.$el[0]).dropzone({accept:h.selectors.rule_and_group_containers,ondragenter:function(e){p(r,m(e.target),n)},ondrop:function(e){o||p(s,m(e.target),n)}}),t instanceof l&&interact(t.$el.find(h.selectors.group_header)[0]).dropzone({accept:h.selectors.rule_and_group_containers,ondragenter:function(e){p(r,m(e.target),n)},ondrop:function(e){o||p(s,m(e.target),n)}})))}),this.on("beforeDeleteRule beforeDeleteGroup",function(e,t){e.isDefaultPrevented()||(interact(t.$el[0]).unset(),t instanceof l&&interact(t.$el.find(h.selectors.group_header)[0]).unset())}),this.on("afterApplyRuleFlags afterApplyGroupFlags",function(e,t){t.flags.no_sortable&&t.$el.find(".drag-handle").remove()}),i.disable_template||(this.on("getGroupTemplate.filter",function(e,t){var n;1<t&&((n=m(m.parseHTML(e.value))).find(h.selectors.condition_container).after('<div class="drag-handle"><i class="'+i.icon+'"></i></div>'),e.value=n.prop("outerHTML"))}),this.on("getRuleTemplate.filter",function(e){var t=m(m.parseHTML(e.value));t.find(h.selectors.rule_header).after('<div class="drag-handle"><i class="'+i.icon+'"></i></div>'),e.value=t.prop("outerHTML")}))},{inherit_no_sortable:!0,inherit_no_drop:!0,icon:"glyphicon glyphicon-sort",disable_template:!1}),h.selectors.rule_and_group_containers=h.selectors.rule_container+", "+h.selectors.group_container,h.selectors.drag_handle=".drag-handle",h.defaults({default_rule_flags:{no_sortable:!1,no_drop:!1},default_group_flags:{no_sortable:!1,no_drop:!1}}),h.define("sql-support",function(e){},{boolean_as_integer:!0}),h.defaults({sqlOperators:{equal:{op:"= ?"},not_equal:{op:"!= ?"},in:{op:"IN(?)",sep:", "},not_in:{op:"NOT IN(?)",sep:", "},less:{op:"< ?"},less_or_equal:{op:"<= ?"},greater:{op:"> ?"},greater_or_equal:{op:">= ?"},between:{op:"BETWEEN ?",sep:" AND "},not_between:{op:"NOT BETWEEN ?",sep:" AND "},begins_with:{op:"LIKE(?)",mod:"{0}%"},not_begins_with:{op:"NOT LIKE(?)",mod:"{0}%"},contains:{op:"LIKE(?)",mod:"%{0}%"},not_contains:{op:"NOT LIKE(?)",mod:"%{0}%"},ends_with:{op:"LIKE(?)",mod:"%{0}"},not_ends_with:{op:"NOT LIKE(?)",mod:"%{0}"},is_empty:{op:"= ''"},is_not_empty:{op:"!= ''"},is_null:{op:"IS NULL"},is_not_null:{op:"IS NOT NULL"}},sqlRuleOperator:{"=":function(e){return{val:e,op:""===e?"is_empty":"equal"}},"!=":function(e){return{val:e,op:""===e?"is_not_empty":"not_equal"}},LIKE:function(e){return"%"==e.slice(0,1)&&"%"==e.slice(-1)?{val:e.slice(1,-1),op:"contains"}:"%"==e.slice(0,1)?{val:e.slice(1),op:"ends_with"}:"%"==e.slice(-1)?{val:e.slice(0,-1),op:"begins_with"}:void f.error("SQLParse",'Invalid value for LIKE operator "{0}"',e)},"NOT LIKE":function(e){return"%"==e.slice(0,1)&&"%"==e.slice(-1)?{val:e.slice(1,-1),op:"not_contains"}:"%"==e.slice(0,1)?{val:e.slice(1),op:"not_ends_with"}:"%"==e.slice(-1)?{val:e.slice(0,-1),op:"not_begins_with"}:void f.error("SQLParse",'Invalid value for NOT LIKE operator "{0}"',e)},IN:function(e){return{val:e,op:"in"}},"NOT IN":function(e){return{val:e,op:"not_in"}},"<":function(e){return{val:e,op:"less"}},"<=":function(e){return{val:e,op:"less_or_equal"}},">":function(e){return{val:e,op:"greater"}},">=":function(e){return{val:e,op:"greater_or_equal"}},BETWEEN:function(e){return{val:e,op:"between"}},"NOT BETWEEN":function(e){return{val:e,op:"not_between"}},IS:function(e){return null!==e&&f.error("SQLParse","Invalid value for IS operator"),{val:null,op:"is_null"}},"IS NOT":function(e){return null!==e&&f.error("SQLParse","Invalid value for IS operator"),{val:null,op:"is_not_null"}}},sqlStatements:{question_mark:function(){var n=[];return{add:function(e,t){return n.push(t),"?"},run:function(){return n}}},numbered:function(n){(!n||1<n.length)&&(n="$");var i=0,r=[];return{add:function(e,t){return r.push(t),n+ ++i},run:function(){return r}}},named:function(i){(!i||1<i.length)&&(i=":");var r={},a={};return{add:function(e,t){r[e.field]||(r[e.field]=1);var n=e.field+"_"+r[e.field]++;return a[n]=t,i+n},run:function(){return a}}}},sqlRuleStatement:{question_mark:function(t){var n=0;return{parse:function(e){return"?"==e?t[n++]:e},esc:function(e){return e.replace(/\?/g,"'?'")}}},numbered:function(t,n){(!n||1<n.length)&&(n="$");var i=new RegExp("^\\"+n+"[0-9]+$"),r=new RegExp("\\"+n+"([0-9]+)","g");return{parse:function(e){return i.test(e)?t[e.slice(1)-1]:e},esc:function(e){return e.replace(r,"'"+("$"==n?"$$":n)+"$1'")}}},named:function(t,n){(!n||1<n.length)&&(n=":");var i=new RegExp("^\\"+n),r=new RegExp("\\"+n+"("+Object.keys(t).join("|")+")\\b","g");return{parse:function(e){return i.test(e)?t[e.slice(1)]:e},esc:function(e){return e.replace(r,"'"+("$"==n?"$$":n)+"$1'")}}}}}),h.extend({getSQL:function(l,p,e){if(!(e=void 0===e?this.getRules():e))return null;p=p?"\n":" ";var t,u=this.getPluginOptions("sql-support","boolean_as_integer");!0===l&&(l="question_mark"),"string"==typeof l&&(t=a(l),l=this.settings.sqlStatements[t[1]](t[2]));var c=this,n=function s(e){if(e.condition||(e.condition=c.settings.default_condition),-1===["AND","OR"].indexOf(e.condition.toUpperCase())&&f.error("UndefinedSQLCondition",'Unable to build SQL query with condition "{0}"',e.condition),!e.rules)return"";var o=[];e.rules.forEach(function(n){var i,e,r,t,a;n.rules&&0<n.rules.length?o.push("("+p+s(n)+p+")"+p):(i=c.settings.sqlOperators[n.operator],e=c.getOperatorByType(n.operator),r="",void 0===i&&f.error("UndefinedSQLOperator",'Unknown SQL operation for operator "{0}"',n.operator),0!==e.nb_inputs&&(n.value instanceof Array||(n.value=[n.value]),n.value.forEach(function(e,t){0<t&&(r+=i.sep),"boolean"==n.type&&u?e=e?1:0:l||"integer"===n.type||"double"===n.type||"boolean"===n.type||(e=f.escapeString(e)),i.mod&&(e=f.fmt(i.mod,e)),l?r+=l.add(n,e):("string"==typeof e&&(e="'"+e+"'"),r+=e)})),t=function(e){return i.op.replace("?",function(){return e})},a=c.change("getSQLField",n.field,n)+" "+t(r),o.push(c.change("ruleToSQL",a,n,r,t)))});var t=o.join(" "+e.condition+p);return c.change("groupToSQL",t,e)}(e);return l?{sql:n,params:l.run()}:{sql:n}},getRulesFromSQL:function(e,h){"SQLParser"in window||f.error("MissingLibrary","SQLParser is required to parse SQL queries. Get it here https://github.com/mistic100/sql-parser");var t,A=this;"string"==typeof e&&(e={sql:e}),!0===h&&(h="question_mark"),"string"==typeof h&&(t=a(h),h=this.settings.sqlRuleStatement[t[1]](e.params,t[2])),h&&(e.sql=h.esc(e.sql)),0!==e.sql.toUpperCase().indexOf("SELECT")&&(e.sql="SELECT * FROM table WHERE "+e.sql);var n=SQLParser.parse(e.sql);n.where||f.error("SQLParse","No WHERE clause found");var i=A.change("parseSQLNode",n.where.conditions);if("rules"in i&&"condition"in i)return i;if("id"in i&&"operator"in i&&"value"in i)return{condition:this.settings.default_condition,rules:[i]};var r=A.change("sqlToGroup",{condition:this.settings.default_condition,rules:[]},i),d=r;return function e(t,n){var i,r,a,s,o,l,p,u,c;null!==t&&("rules"in(t=A.change("parseSQLNode",t))&&"condition"in t||"id"in t&&"operator"in t&&"value"in t?d.rules.push(t):("left"in t&&"right"in t&&"operation"in t||f.error("SQLParse","Unable to parse WHERE clause"),-1!==["AND","OR"].indexOf(t.operation.toUpperCase())?(A.change("sqlGroupsDistinct",0<n&&d.condition!=t.operation.toUpperCase(),d,t,n)&&(i=A.change("sqlToGroup",{condition:A.settings.default_condition,rules:[]},t),d.rules.push(i),d=i),d.condition=t.operation.toUpperCase(),n++,r=d,e(t.left,n),d=r,e(t.right,n)):(m.isPlainObject(t.right.value)&&f.error("SQLParse","Value format not supported for {0}.",t.left.value),a=m.isArray(t.right.value)?t.right.value.map(function(e){return e.value}):t.right.value,h&&(a=m.isArray(a)?a.map(h.parse):h.parse(a)),"<>"==(s=t.operation.toUpperCase())&&(s="!="),void 0===(o=A.settings.sqlRuleOperator[s])&&f.error("UndefinedSQLOperator",'Invalid SQL operation "{0}".',t.operation),l=o.call(this,a,t.operation),"values"in t.left?p=t.left.values.join("."):"value"in t.left?p=t.left.value:f.error("SQLParse","Cannot find field name in {0}",JSON.stringify(t.left)),u=A.getSQLFieldID(p,a),c=A.change("sqlToRule",{id:u,field:p,operator:l.op,value:l.val},t),d.rules.push(c))))}(i,0),r},setRulesFromSQL:function(e,t){this.setRules(this.getRulesFromSQL(e,t))},getSQLFieldID:function(t,e){var n=this.filters.filter(function(e){return e.field.toLowerCase()===t.toLowerCase()}),i=1===n.length?n[0].id:this.change("getSQLFieldID",t,e);return i}}),h.define("unique-filter",function(){this.status.used_filters={},this.on("afterUpdateRuleFilter",this.updateDisabledFilters),this.on("afterDeleteRule",this.updateDisabledFilters),this.on("afterCreateRuleFilters",this.applyDisabledFilters),this.on("afterReset",this.clearDisabledFilters),this.on("afterClear",this.clearDisabledFilters),this.on("getDefaultFilter.filter",function(t,n){var i=t.builder;i.updateDisabledFilters(),t.value.id in i.status.used_filters&&(i.filters.some(function(e){if(!(e.id in i.status.used_filters)||0<i.status.used_filters[e.id].length&&-1===i.status.used_filters[e.id].indexOf(n.parent))return t.value=e,!0})||(f.error(!1,"UniqueFilter","No more non-unique filters available"),t.value=void 0))})}),h.extend({updateDisabledFilters:function(e){var n=e?e.builder:this;n.status.used_filters={},n.model&&(function t(e){e.each(function(e){e.filter&&e.filter.unique&&(n.status.used_filters[e.filter.id]||(n.status.used_filters[e.filter.id]=[]),"group"==e.filter.unique&&n.status.used_filters[e.filter.id].push(e.parent))},function(e){t(e)})}(n.model.root),n.applyDisabledFilters(e))},clearDisabledFilters:function(e){var t=e?e.builder:this;t.status.used_filters={},t.applyDisabledFilters(e)},applyDisabledFilters:function(e){var n=e?e.builder:this;n.$el.find(h.selectors.filter_container+" option").prop("disabled",!1),m.each(n.status.used_filters,function(t,e){0===e.length?n.$el.find(h.selectors.filter_container+' option[value="'+t+'"]:not(:selected)').prop("disabled",!0):e.forEach(function(e){e.each(function(e){e.$el.find(h.selectors.filter_container+' option[value="'+t+'"]:not(:selected)').prop("disabled",!0)})})}),n.settings.plugins&&n.settings.plugins["bt-selectpicker"]&&n.$el.find(h.selectors.rule_filter).selectpicker("render")}}),h.regional.en={__locale:"English (en)",__author:'Damien "Mistic" Sorel, http://www.strangeplanet.fr',add_rule:"Add rule",add_group:"Add group",delete_rule:"Delete",delete_group:"Delete",conditions:{AND:"AND",OR:"OR"},operators:{equal:"equal",not_equal:"not equal",in:"in",not_in:"not in",less:"less",less_or_equal:"less or equal",greater:"greater",greater_or_equal:"greater or equal",between:"between",not_between:"not between",begins_with:"begins with",not_begins_with:"doesn't begin with",contains:"contains",not_contains:"doesn't contain",ends_with:"ends with",not_ends_with:"doesn't end with",is_empty:"is empty",is_not_empty:"is not empty",is_null:"is null",is_not_null:"is not null"},errors:{no_filter:"No filter selected",empty_group:"The group is empty",radio_empty:"No value selected",checkbox_empty:"No value selected",select_empty:"No value selected",string_empty:"Empty value",string_exceed_min_length:"Must contain at least {0} characters",string_exceed_max_length:"Must not contain more than {0} characters",string_invalid_format:"Invalid format ({0})",number_nan:"Not a number",number_not_integer:"Not an integer",number_not_double:"Not a real number",number_exceed_min:"Must be greater than {0}",number_exceed_max:"Must be lower than {0}",number_wrong_step:"Must be a multiple of {0}",number_between_invalid:"Invalid values, {0} is greater than {1}",datetime_empty:"Empty value",datetime_invalid:"Invalid date format ({0})",datetime_exceed_min:"Must be after {0}",datetime_exceed_max:"Must be before {0}",datetime_between_invalid:"Invalid values, {0} is greater than {1}",boolean_not_valid:"Not a boolean",operator_not_multiple:'Operator "{1}" cannot accept multiple values'},invert:"Invert",NOT:"NOT"},h.defaults({lang_code:"en"}),h},"function"==typeof define&&define.amd?define(["jquery","dot/doT","jquery-extendext"],r):"object"==typeof t&&t.exports?t.exports=r(e("jquery"),e("dot/doT"),e("jquery-extendext")):r(i.jQuery,i.doT)},{"dot/doT":1,jquery:29,"jquery-extendext":4}],3:[function(e,t,n){QueryBuilder.extend({setFilters:function(e,t){var n=this;void 0===t&&(t=e,e=!1),t=this.checkFilters(t);var i=(t=this.change("setFilters",t)).map(function(e){return e.id});if(e||!function e(t){t.each(function(e){e.filter&&-1===i.indexOf(e.filter.id)&&Utils.error("ChangeFilter",'A rule is using filter "{0}"',e.filter.id)},e)}(this.model.root),this.filters=t,function e(t){t.each(!0,function(e){e.filter&&-1===i.indexOf(e.filter.id)?(e.drop(),n.trigger("rulesChanged")):(n.createRuleFilters(e),e.$el.find(QueryBuilder.selectors.rule_filter).val(e.filter?e.filter.id:"-1"),n.trigger("afterUpdateRuleFilter",e))},e)}(this.model.root),this.settings.plugins&&(this.settings.plugins["unique-filter"]&&this.updateDisabledFilters(),this.settings.plugins["bt-selectpicker"]&&this.$el.find(QueryBuilder.selectors.rule_filter).selectpicker("render")),this.settings.default_filter)try{this.getFilterById(this.settings.default_filter)}catch(e){this.settings.default_filter=null}this.trigger("afterSetFilters",t)},addFilter:function(e,n){void 0===n||"#end"==n?n=this.filters.length:"#start"==n&&(n=0),$.isArray(e)||(e=[e]);var t=$.extend(!0,[],this.filters);parseInt(n)==n||this.filters.some(function(e,t){if(e.id==n)return n=t+1,!0})?Array.prototype.splice.apply(t,[n,0].concat(e)):Array.prototype.push.apply(t,e),this.setFilters(t)},removeFilter:function(t,e){var n=$.extend(!0,[],this.filters);"string"==typeof t&&(t=[t]),n=n.filter(function(e){return-1===t.indexOf(e.id)}),this.setFilters(e,n)}})},{}],4:[function(e,t,n){var i,r;i=this,r=function(c){"use strict";c.extendext=function(){var e,t,n,i,r,a,s=arguments[0]||{},o=1,l=arguments.length,p=!1,u="default";for("boolean"==typeof s&&(p=s,s=arguments[o++]||{}),"string"==typeof s&&("concat"!==(u=s.toLowerCase())&&"replace"!==u&&"extend"!==u&&(u="default"),s=arguments[o++]||{}),"object"==typeof s||c.isFunction(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!==(e=arguments[o]))if(c.isArray(e)&&"default"!==u)switch(a=s&&c.isArray(s)?s:[],u){case"concat":s=a.concat(c.extend(p,[],e));break;case"replace":s=c.extend(p,[],e);break;case"extend":e.forEach(function(e,t){var n;"object"==typeof e?(n=c.isArray(e)?[]:{},a[t]=c.extendext(p,u,a[t]||n,e)):-1===a.indexOf(e)&&a.push(e)}),s=a}else for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(p&&i&&(c.isPlainObject(i)||(r=c.isArray(i)))?(n=s[t],a=r&&!Array.isArray(n)?[]:r||c.isPlainObject(n)?n:{},r=!1,s[t]=c.extendext(p,u,a,i)):void 0!==i&&(s[t]=i));return s}},"function"==typeof define&&define.amd?define(["jquery"],r):"object"==typeof t&&t.exports?t.exports=r(e("jquery")):r(i.jQuery)},{jquery:29}],5:[function(e,t,n){var i;i=function(i){return i.extend(i.expr[":"],{data:i.expr.createPseudo?i.expr.createPseudo(function(t){return function(e){return!!i.data(e,t)}}):function(e,t,n){return!!i.data(e,n[3])}})},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],6:[function(e,t,n){var i;i=function(e){return e.fn.extend({disableSelection:(t="onselectstart"in document.createElement("div")?"selectstart":"mousedown",function(){return this.on(t+".ui-disableSelection",function(e){e.preventDefault()})}),enableSelection:function(){return this.off(".ui-disableSelection")}});var t},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],7:[function(e,t,n){var i;i=function(l){return l.ui.focusable=function(e,t){var n,i,r,a,s,o=e.nodeName.toLowerCase();return"area"===o?(i=(n=e.parentNode).name,!(!e.href||!i||"map"!==n.nodeName.toLowerCase())&&(0<(r=l("img[usemap='#"+i+"']")).length&&r.is(":visible"))):(/^(input|select|textarea|button|object)$/.test(o)?(a=!e.disabled)&&(s=l(e).closest("fieldset")[0])&&(a=!s.disabled):a="a"===o&&e.href||t,a&&l(e).is(":visible")&&function(e){var t=e.css("visibility");for(;"inherit"===t;)e=e.parent(),t=e.css("visibility");return"hidden"!==t}(l(e)))},l.extend(l.expr[":"],{focusable:function(e){return l.ui.focusable(e,null!=l.attr(e,"tabindex"))}}),l.ui.focusable},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],8:[function(e,t,n){var i;i=function(e){return e.ui.ie=!!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase())},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],9:[function(e,t,n){var i;i=function(e){return e.ui.keyCode={BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],10:[function(e,t,n){var i;i=function(a){return a.ui.plugin={add:function(e,t,n){var i,r=a.ui[e].prototype;for(i in n)r.plugins[i]=r.plugins[i]||[],r.plugins[i].push([t,n[i]])},call:function(e,t,n,i){var r,a=e.plugins[t];if(a&&(i||e.element[0].parentNode&&11!==e.element[0].parentNode.nodeType))for(r=0;r<a.length;r++)e.options[a[r][0]]&&a[r][1].apply(e.element,n)}}},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],11:[function(e,t,n){var i;i=function(Q){function B(e,t,n){return[parseFloat(e[0])*(l.test(e[0])?t/100:1),parseFloat(e[1])*(l.test(e[1])?n/100:1)]}function K(e,t){return parseInt(Q.css(e,t),10)||0}var r,_,w,i,a,s,o,l,p;return _=Math.max,w=Math.abs,i=/left|center|right/,a=/top|center|bottom/,s=/[\+\-]\d+(\.[\d]+)?%?/,o=/^\w+/,l=/%$/,p=Q.fn.position,Q.position={scrollbarWidth:function(){if(void 0!==r)return r;var e,t,n=Q("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),i=n.children()[0];return Q("body").append(n),e=i.offsetWidth,n.css("overflow","scroll"),e===(t=i.offsetWidth)&&(t=n[0].clientWidth),n.remove(),r=e-t},getScrollInfo:function(e){var t=e.isWindow||e.isDocument?"":e.element.css("overflow-x"),n=e.isWindow||e.isDocument?"":e.element.css("overflow-y"),i="scroll"===t||"auto"===t&&e.width<e.element[0].scrollWidth;return{width:"scroll"===n||"auto"===n&&e.height<e.element[0].scrollHeight?Q.position.scrollbarWidth():0,height:i?Q.position.scrollbarWidth():0}},getWithinInfo:function(e){var t=Q(e||window),n=Q.isWindow(t[0]),i=!!t[0]&&9===t[0].nodeType;return{element:t,isWindow:n,isDocument:i,offset:!n&&!i?Q(e).offset():{left:0,top:0},scrollLeft:t.scrollLeft(),scrollTop:t.scrollTop(),width:t.outerWidth(),height:t.outerHeight()}}},Q.fn.position=function(c){if(!c||!c.of)return p.apply(this,arguments);c=Q.extend({},c);var h,A,d,m,f,e,t,g=Q(c.of),v=Q.position.getWithinInfo(c.within),b=Q.position.getScrollInfo(v),C=(c.collision||"flip").split(" "),y={},n=9===(t=(e=g)[0]).nodeType?{width:e.width(),height:e.height(),offset:{top:0,left:0}}:Q.isWindow(t)?{width:e.width(),height:e.height(),offset:{top:e.scrollTop(),left:e.scrollLeft()}}:t.preventDefault?{width:0,height:0,offset:{top:t.pageY,left:t.pageX}}:{width:e.outerWidth(),height:e.outerHeight(),offset:e.offset()};return g[0].preventDefault&&(c.at="left top"),A=n.width,d=n.height,m=n.offset,f=Q.extend({},m),Q.each(["my","at"],function(){var e,t,n=(c[this]||"").split(" ");1===n.length&&(n=i.test(n[0])?n.concat(["center"]):a.test(n[0])?["center"].concat(n):["center","center"]),n[0]=i.test(n[0])?n[0]:"center",n[1]=a.test(n[1])?n[1]:"center",e=s.exec(n[0]),t=s.exec(n[1]),y[this]=[e?e[0]:0,t?t[0]:0],c[this]=[o.exec(n[0])[0],o.exec(n[1])[0]]}),1===C.length&&(C[1]=C[0]),"right"===c.at[0]?f.left+=A:"center"===c.at[0]&&(f.left+=A/2),"bottom"===c.at[1]?f.top+=d:"center"===c.at[1]&&(f.top+=d/2),h=B(y.at,A,d),f.left+=h[0],f.top+=h[1],this.each(function(){var n,e,s=Q(this),o=s.outerWidth(),l=s.outerHeight(),t=K(this,"marginLeft"),i=K(this,"marginTop"),r=o+t+K(this,"marginRight")+b.width,a=l+i+K(this,"marginBottom")+b.height,p=Q.extend({},f),u=B(y.my,s.outerWidth(),s.outerHeight());"right"===c.my[0]?p.left-=o:"center"===c.my[0]&&(p.left-=o/2),"bottom"===c.my[1]?p.top-=l:"center"===c.my[1]&&(p.top-=l/2),p.left+=u[0],p.top+=u[1],n={marginLeft:t,marginTop:i},Q.each(["left","top"],function(e,t){Q.ui.position[C[e]]&&Q.ui.position[C[e]][t](p,{targetWidth:A,targetHeight:d,elemWidth:o,elemHeight:l,collisionPosition:n,collisionWidth:r,collisionHeight:a,offset:[h[0]+u[0],h[1]+u[1]],my:c.my,at:c.at,within:v,elem:s})}),c.using&&(e=function(e){var t=m.left-p.left,n=t+A-o,i=m.top-p.top,r=i+d-l,a={target:{element:g,left:m.left,top:m.top,width:A,height:d},element:{element:s,left:p.left,top:p.top,width:o,height:l},horizontal:n<0?"left":0<t?"right":"center",vertical:r<0?"top":0<i?"bottom":"middle"};A<o&&w(t+n)<A&&(a.horizontal="center"),d<l&&w(i+r)<d&&(a.vertical="middle"),_(w(t),w(n))>_(w(i),w(r))?a.important="horizontal":a.important="vertical",c.using.call(this,e,a)}),s.offset(Q.extend(p,{using:e}))})},Q.ui.position={fit:{left:function(e,t){var n,i=t.within,r=i.isWindow?i.scrollLeft:i.offset.left,a=i.width,s=e.left-t.collisionPosition.marginLeft,o=r-s,l=s+t.collisionWidth-a-r;t.collisionWidth>a?0<o&&l<=0?(n=e.left+o+t.collisionWidth-a-r,e.left+=o-n):e.left=!(0<l&&o<=0)&&l<o?r+a-t.collisionWidth:r:0<o?e.left+=o:0<l?e.left-=l:e.left=_(e.left-s,e.left)},top:function(e,t){var n,i=t.within,r=i.isWindow?i.scrollTop:i.offset.top,a=t.within.height,s=e.top-t.collisionPosition.marginTop,o=r-s,l=s+t.collisionHeight-a-r;t.collisionHeight>a?0<o&&l<=0?(n=e.top+o+t.collisionHeight-a-r,e.top+=o-n):e.top=!(0<l&&o<=0)&&l<o?r+a-t.collisionHeight:r:0<o?e.top+=o:0<l?e.top-=l:e.top=_(e.top-s,e.top)}},flip:{left:function(e,t){var n,i,r=t.within,a=r.offset.left+r.scrollLeft,s=r.width,o=r.isWindow?r.scrollLeft:r.offset.left,l=e.left-t.collisionPosition.marginLeft,p=l-o,u=l+t.collisionWidth-s-o,c="left"===t.my[0]?-t.elemWidth:"right"===t.my[0]?t.elemWidth:0,h="left"===t.at[0]?t.targetWidth:"right"===t.at[0]?-t.targetWidth:0,A=-2*t.offset[0];p<0?((n=e.left+c+h+A+t.collisionWidth-s-a)<0||n<w(p))&&(e.left+=c+h+A):0<u&&(0<(i=e.left-t.collisionPosition.marginLeft+c+h+A-o)||w(i)<u)&&(e.left+=c+h+A)},top:function(e,t){var n,i,r=t.within,a=r.offset.top+r.scrollTop,s=r.height,o=r.isWindow?r.scrollTop:r.offset.top,l=e.top-t.collisionPosition.marginTop,p=l-o,u=l+t.collisionHeight-s-o,c="top"===t.my[1]?-t.elemHeight:"bottom"===t.my[1]?t.elemHeight:0,h="top"===t.at[1]?t.targetHeight:"bottom"===t.at[1]?-t.targetHeight:0,A=-2*t.offset[1];p<0?((i=e.top+c+h+A+t.collisionHeight-s-a)<0||i<w(p))&&(e.top+=c+h+A):0<u&&(0<(n=e.top-t.collisionPosition.marginTop+c+h+A-o)||w(n)<u)&&(e.top+=c+h+A)}},flipfit:{left:function(){Q.ui.position.flip.left.apply(this,arguments),Q.ui.position.fit.left.apply(this,arguments)},top:function(){Q.ui.position.flip.top.apply(this,arguments),Q.ui.position.fit.top.apply(this,arguments)}}},Q.ui.position},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],12:[function(e,t,n){var i;i=function(e){return e.ui.safeActiveElement=function(t){var n;try{n=t.activeElement}catch(e){n=t.body}return(n=n||t.body).nodeName||(n=t.body),n}},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],13:[function(e,t,n){var i;i=function(t){return t.ui.safeBlur=function(e){e&&"body"!==e.nodeName.toLowerCase()&&t(e).trigger("blur")}},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],14:[function(e,t,n){var i;i=function(a){return a.fn.scrollParent=function(e){var t=this.css("position"),n="absolute"===t,i=e?/(auto|scroll|hidden)/:/(auto|scroll)/,r=this.parents().filter(function(){var e=a(this);return(!n||"static"!==e.css("position"))&&i.test(e.css("overflow")+e.css("overflow-y")+e.css("overflow-x"))}).eq(0);return"fixed"!==t&&r.length?r:a(this[0].ownerDocument||document)}},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],15:[function(e,t,n){var i;i=function(i){return i.extend(i.expr[":"],{tabbable:function(e){var t=i.attr(e,"tabindex"),n=null!=t;return(!n||0<=t)&&i.ui.focusable(e,n)}})},"function"==typeof define&&define.amd?define(["jquery","./version","./focusable"],i):i(jQuery)},{}],16:[function(e,t,n){var i;i=function(e){return e.fn.extend({uniqueId:(t=0,function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++t)})}),removeUniqueId:function(){return this.each(function(){/^ui-id-\d+$/.test(this.id)&&e(this).removeAttr("id")})}});var t},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],17:[function(e,t,n){var i;i=function(e){return e.ui=e.ui||{},e.ui.version="1.12.1"},"function"==typeof define&&define.amd?define(["jquery"],i):i(jQuery)},{}],18:[function(e,t,n){var i;i=function(u){var r,n=0,o=Array.prototype.slice;return u.cleanData=(r=u.cleanData,function(e){for(var t,n,i=0;null!=(n=e[i]);i++)try{(t=u._data(n,"events"))&&t.remove&&u(n).triggerHandler("remove")}catch(e){}r(e)}),u.widget=function(e,n,t){var i,r,a,s={},o=e.split(".")[0],l=o+"-"+(e=e.split(".")[1]);return t||(t=n,n=u.Widget),u.isArray(t)&&(t=u.extend.apply(null,[{}].concat(t))),u.expr[":"][l.toLowerCase()]=function(e){return!!u.data(e,l)},u[o]=u[o]||{},i=u[o][e],r=u[o][e]=function(e,t){if(!this._createWidget)return new r(e,t);arguments.length&&this._createWidget(e,t)},u.extend(r,i,{version:t.version,_proto:u.extend({},t),_childConstructors:[]}),(a=new n).options=u.widget.extend({},a.options),u.each(t,function(t,i){function r(){return n.prototype[t].apply(this,arguments)}function a(e){return n.prototype[t].apply(this,e)}u.isFunction(i)?s[t]=function(){var e,t=this._super,n=this._superApply;return this._super=r,this._superApply=a,e=i.apply(this,arguments),this._super=t,this._superApply=n,e}:s[t]=i}),r.prototype=u.widget.extend(a,{widgetEventPrefix:i&&a.widgetEventPrefix||e},s,{constructor:r,namespace:o,widgetName:e,widgetFullName:l}),i?(u.each(i._childConstructors,function(e,t){var n=t.prototype;u.widget(n.namespace+"."+n.widgetName,r,t._proto)}),delete i._childConstructors):n._childConstructors.push(r),u.widget.bridge(e,r),r},u.widget.extend=function(e){for(var t,n,i=o.call(arguments,1),r=0,a=i.length;r<a;r++)for(t in i[r])n=i[r][t],i[r].hasOwnProperty(t)&&void 0!==n&&(u.isPlainObject(n)?e[t]=u.isPlainObject(e[t])?u.widget.extend({},e[t],n):u.widget.extend({},n):e[t]=n);return e},u.widget.bridge=function(a,t){var s=t.prototype.widgetFullName||a;u.fn[a]=function(n){var e="string"==typeof n,i=o.call(arguments,1),r=this;return e?this.length||"instance"!==n?this.each(function(){var e,t=u.data(this,s);return"instance"===n?(r=t,!1):t?u.isFunction(t[n])&&"_"!==n.charAt(0)?(e=t[n].apply(t,i))!==t&&void 0!==e?(r=e&&e.jquery?r.pushStack(e.get()):e,!1):void 0:u.error("no such method '"+n+"' for "+a+" widget instance"):u.error("cannot call methods on "+a+" prior to initialization; attempted to call method '"+n+"'")}):r=void 0:(i.length&&(n=u.widget.extend.apply(null,[n].concat(i))),this.each(function(){var e=u.data(this,s);e?(e.option(n||{}),e._init&&e._init()):u.data(this,s,new t(n,this))})),r}},u.Widget=function(){},u.Widget._childConstructors=[],u.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{classes:{},disabled:!1,create:null},_createWidget:function(e,t){t=u(t||this.defaultElement||this)[0],this.element=u(t),this.uuid=n++,this.eventNamespace="."+this.widgetName+this.uuid,this.bindings=u(),this.hoverable=u(),this.focusable=u(),this.classesElementLookup={},t!==this&&(u.data(t,this.widgetFullName,this),this._on(!0,this.element,{remove:function(e){e.target===t&&this.destroy()}}),this.document=u(t.style?t.ownerDocument:t.document||t),this.window=u(this.document[0].defaultView||this.document[0].parentWindow)),this.options=u.widget.extend({},this.options,this._getCreateOptions(),e),this._create(),this.options.disabled&&this._setOptionDisabled(this.options.disabled),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:function(){return{}},_getCreateEventData:u.noop,_create:u.noop,_init:u.noop,destroy:function(){var n=this;this._destroy(),u.each(this.classesElementLookup,function(e,t){n._removeClass(t,e)}),this.element.off(this.eventNamespace).removeData(this.widgetFullName),this.widget().off(this.eventNamespace).removeAttr("aria-disabled"),this.bindings.off(this.eventNamespace)},_destroy:u.noop,widget:function(){return this.element},option:function(e,t){var n,i,r,a=e;if(0===arguments.length)return u.widget.extend({},this.options);if("string"==typeof e)if(a={},e=(n=e.split(".")).shift(),n.length){for(i=a[e]=u.widget.extend({},this.options[e]),r=0;r<n.length-1;r++)i[n[r]]=i[n[r]]||{},i=i[n[r]];if(e=n.pop(),1===arguments.length)return void 0===i[e]?null:i[e];i[e]=t}else{if(1===arguments.length)return void 0===this.options[e]?null:this.options[e];a[e]=t}return this._setOptions(a),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return"classes"===e&&this._setOptionClasses(t),this.options[e]=t,"disabled"===e&&this._setOptionDisabled(t),this},_setOptionClasses:function(e){var t,n,i;for(t in e)i=this.classesElementLookup[t],e[t]!==this.options.classes[t]&&i&&i.length&&(n=u(i.get()),this._removeClass(i,t),n.addClass(this._classes({element:n,keys:t,classes:e,add:!0})))},_setOptionDisabled:function(e){this._toggleClass(this.widget(),this.widgetFullName+"-disabled",null,!!e),e&&(this._removeClass(this.hoverable,null,"ui-state-hover"),this._removeClass(this.focusable,null,"ui-state-focus"))},enable:function(){return this._setOptions({disabled:!1})},disable:function(){return this._setOptions({disabled:!0})},_classes:function(r){var a=[],s=this;function e(e,t){for(var n,i=0;i<e.length;i++)n=s.classesElementLookup[e[i]]||u(),n=r.add?u(u.unique(n.get().concat(r.element.get()))):u(n.not(r.element).get()),s.classesElementLookup[e[i]]=n,a.push(e[i]),t&&r.classes[e[i]]&&a.push(r.classes[e[i]])}return r=u.extend({element:this.element,classes:this.options.classes||{}},r),this._on(r.element,{remove:"_untrackClassesElement"}),r.keys&&e(r.keys.match(/\S+/g)||[],!0),r.extra&&e(r.extra.match(/\S+/g)||[]),a.join(" ")},_untrackClassesElement:function(n){var i=this;u.each(i.classesElementLookup,function(e,t){-1!==u.inArray(n.target,t)&&(i.classesElementLookup[e]=u(t.not(n.target).get()))})},_removeClass:function(e,t,n){return this._toggleClass(e,t,n,!1)},_addClass:function(e,t,n){return this._toggleClass(e,t,n,!0)},_toggleClass:function(e,t,n,i){i="boolean"==typeof i?i:n;var r="string"==typeof e||null===e,a={extra:r?t:n,keys:r?e:t,element:r?this.element:e,add:i};return a.element.toggleClass(this._classes(a),i),this},_on:function(s,o,e){var l,p=this;"boolean"!=typeof s&&(e=o,o=s,s=!1),e?(o=l=u(o),this.bindings=this.bindings.add(o)):(e=o,o=this.element,l=this.widget()),u.each(e,function(e,t){function n(){if(s||!0!==p.options.disabled&&!u(this).hasClass("ui-state-disabled"))return("string"==typeof t?p[t]:t).apply(p,arguments)}"string"!=typeof t&&(n.guid=t.guid=t.guid||n.guid||u.guid++);var i=e.match(/^([\w:-]*)\s*(.*)$/),r=i[1]+p.eventNamespace,a=i[2];a?l.on(r,a,n):o.on(r,n)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.off(t).off(t),this.bindings=u(this.bindings.not(e).get()),this.focusable=u(this.focusable.not(e).get()),this.hoverable=u(this.hoverable.not(e).get())},_delay:function(e,t){var n=this;return setTimeout(function(){return("string"==typeof e?n[e]:e).apply(n,arguments)},t||0)},_hoverable:function(e){this.hoverable=this.hoverable.add(e),this._on(e,{mouseenter:function(e){this._addClass(u(e.currentTarget),null,"ui-state-hover")},mouseleave:function(e){this._removeClass(u(e.currentTarget),null,"ui-state-hover")}})},_focusable:function(e){this.focusable=this.focusable.add(e),this._on(e,{focusin:function(e){this._addClass(u(e.currentTarget),null,"ui-state-focus")},focusout:function(e){this._removeClass(u(e.currentTarget),null,"ui-state-focus")}})},_trigger:function(e,t,n){var i,r,a=this.options[e];if(n=n||{},(t=u.Event(t)).type=(e===this.widgetEventPrefix?e:this.widgetEventPrefix+e).toLowerCase(),t.target=this.element[0],r=t.originalEvent)for(i in r)i in t||(t[i]=r[i]);return this.element.trigger(t,n),!(u.isFunction(a)&&!1===a.apply(this.element[0],[t].concat(n))||t.isDefaultPrevented())}},u.each({show:"fadeIn",hide:"fadeOut"},function(a,s){u.Widget.prototype["_"+a]=function(t,e,n){var i;"string"==typeof e&&(e={effect:e});var r=e?!0!==e&&"number"!=typeof e&&e.effect||s:a;"number"==typeof(e=e||{})&&(e={duration:e}),i=!u.isEmptyObject(e),e.complete=n,e.delay&&t.delay(e.delay),i&&u.effects&&u.effects.effect[r]?t[a](e):r!==a&&t[r]?t[r](e.duration,e.easing,n):t.queue(function(e){u(this)[a](),n&&n.call(t[0]),e()})}}),u.widget},"function"==typeof define&&define.amd?define(["jquery","./version"],i):i(jQuery)},{}],19:[function(e,t,n){var i;i=function(a){var e;return a.widget("ui.button",{version:"1.12.1",defaultElement:"<button>",options:{classes:{"ui-button":"ui-corner-all"},disabled:null,icon:null,iconPosition:"beginning",label:null,showLabel:!0},_getCreateOptions:function(){var e,t=this._super()||{};return this.isInput=this.element.is("input"),null!=(e=this.element[0].disabled)&&(t.disabled=e),this.originalLabel=this.isInput?this.element.val():this.element.html(),this.originalLabel&&(t.label=this.originalLabel),t},_create:function(){!this.option.showLabel&!this.options.icon&&(this.options.showLabel=!0),null==this.options.disabled&&(this.options.disabled=this.element[0].disabled||!1),this.hasTitle=!!this.element.attr("title"),this.options.label&&this.options.label!==this.originalLabel&&(this.isInput?this.element.val(this.options.label):this.element.html(this.options.label)),this._addClass("ui-button","ui-widget"),this._setOption("disabled",this.options.disabled),this._enhance(),this.element.is("a")&&this._on({keyup:function(e){e.keyCode===a.ui.keyCode.SPACE&&(e.preventDefault(),this.element[0].click?this.element[0].click():this.element.trigger("click"))}})},_enhance:function(){this.element.is("button")||this.element.attr("role","button"),this.options.icon&&(this._updateIcon("icon",this.options.icon),this._updateTooltip())},_updateTooltip:function(){this.title=this.element.attr("title"),this.options.showLabel||this.title||this.element.attr("title",this.options.label)},_updateIcon:function(e,t){var n="iconPosition"!==e,i=n?this.options.iconPosition:t,r="top"===i||"bottom"===i;this.icon?n&&this._removeClass(this.icon,null,this.options.icon):(this.icon=a("<span>"),this._addClass(this.icon,"ui-button-icon","ui-icon"),this.options.showLabel||this._addClass("ui-button-icon-only")),n&&this._addClass(this.icon,null,t),this._attachIcon(i),r?(this._addClass(this.icon,null,"ui-widget-icon-block"),this.iconSpace&&this.iconSpace.remove()):(this.iconSpace||(this.iconSpace=a("<span> </span>"),this._addClass(this.iconSpace,"ui-button-icon-space")),this._removeClass(this.icon,null,"ui-wiget-icon-block"),this._attachIconSpace(i))},_destroy:function(){this.element.removeAttr("role"),this.icon&&this.icon.remove(),this.iconSpace&&this.iconSpace.remove(),this.hasTitle||this.element.removeAttr("title")},_attachIconSpace:function(e){this.icon[/^(?:end|bottom)/.test(e)?"before":"after"](this.iconSpace)},_attachIcon:function(e){this.element[/^(?:end|bottom)/.test(e)?"append":"prepend"](this.icon)},_setOptions:function(e){var t=void 0===e.showLabel?this.options.showLabel:e.showLabel,n=void 0===e.icon?this.options.icon:e.icon;t||n||(e.showLabel=!0),this._super(e)},_setOption:function(e,t){"icon"===e&&(t?this._updateIcon(e,t):this.icon&&(this.icon.remove(),this.iconSpace&&this.iconSpace.remove())),"iconPosition"===e&&this._updateIcon(e,t),"showLabel"===e&&(this._toggleClass("ui-button-icon-only",null,!t),this._updateTooltip()),"label"===e&&(this.isInput?this.element.val(t):(this.element.html(t),this.icon&&(this._attachIcon(this.options.iconPosition),this._attachIconSpace(this.options.iconPosition)))),this._super(e,t),"disabled"===e&&(this._toggleClass(null,"ui-state-disabled",t),(this.element[0].disabled=t)&&this.element.blur())},refresh:function(){var e=this.element.is("input, button")?this.element[0].disabled:this.element.hasClass("ui-button-disabled");e!==this.options.disabled&&this._setOptions({disabled:e}),this._updateTooltip()}}),!1!==a.uiBackCompat&&(a.widget("ui.button",a.ui.button,{options:{text:!0,icons:{primary:null,secondary:null}},_create:function(){this.options.showLabel&&!this.options.text&&(this.options.showLabel=this.options.text),!this.options.showLabel&&this.options.text&&(this.options.text=this.options.showLabel),this.options.icon||!this.options.icons.primary&&!this.options.icons.secondary?this.options.icon&&(this.options.icons.primary=this.options.icon):this.options.icons.primary?this.options.icon=this.options.icons.primary:(this.options.icon=this.options.icons.secondary,this.options.iconPosition="end"),this._super()},_setOption:function(e,t){"text"!==e?("showLabel"===e&&(this.options.text=t),"icon"===e&&(this.options.icons.primary=t),"icons"===e&&(t.primary?(this._super("icon",t.primary),this._super("iconPosition","beginning")):t.secondary&&(this._super("icon",t.secondary),this._super("iconPosition","end"))),this._superApply(arguments)):this._super("showLabel",t)}}),a.fn.button=(e=a.fn.button,function(){return!this.length||this.length&&"INPUT"!==this[0].tagName||this.length&&"INPUT"===this[0].tagName&&"checkbox"!==this.attr("type")&&"radio"!==this.attr("type")?e.apply(this,arguments):(a.ui.checkboxradio||a.error("Checkboxradio widget missing"),0===arguments.length?this.checkboxradio({icon:!1}):this.checkboxradio.apply(this,arguments))}),a.fn.buttonset=function(){return a.ui.controlgroup||a.error("Controlgroup widget missing"),"option"===arguments[0]&&"items"===arguments[1]&&arguments[2]?this.controlgroup.apply(this,[arguments[0],"items.button",arguments[2]]):"option"===arguments[0]&&"items"===arguments[1]?this.controlgroup.apply(this,[arguments[0],"items.button"]):("object"==typeof arguments[0]&&arguments[0].items&&(arguments[0].items={button:arguments[0].items}),this.controlgroup.apply(this,arguments))}),a.ui.button},"function"==typeof define&&define.amd?define(["jquery","./controlgroup","./checkboxradio","../keycode","../widget"],i):i(jQuery)},{}],20:[function(e,t,n){var i;i=function(B){var a;function e(){this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},B.extend(this._defaults,this.regional[""]),this.regional.en=B.extend(!0,{},this.regional[""]),this.regional["en-US"]=B.extend(!0,{},this.regional.en),this.dpDiv=n(B("<div id='"+this._mainDivId+"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))}function n(e){var t="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.on("mouseout",t,function(){B(this).removeClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&B(this).removeClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&B(this).removeClass("ui-datepicker-next-hover")}).on("mouseover",t,s)}function s(){B.datepicker._isDisabledDatepicker(a.inline?a.dpDiv.parent()[0]:a.input[0])||(B(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),B(this).addClass("ui-state-hover"),-1!==this.className.indexOf("ui-datepicker-prev")&&B(this).addClass("ui-datepicker-prev-hover"),-1!==this.className.indexOf("ui-datepicker-next")&&B(this).addClass("ui-datepicker-next-hover"))}function c(e,t){for(var n in B.extend(e,t),t)null==t[n]&&(e[n]=t[n]);return e}return B.extend(B.ui,{datepicker:{version:"1.12.1"}}),B.extend(e.prototype,{markerClassName:"hasDatepicker",maxRows:4,_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(e){return c(this._defaults,e||{}),this},_attachDatepicker:function(e,t){var n,i=e.nodeName.toLowerCase(),r="div"===i||"span"===i;e.id||(this.uuid+=1,e.id="dp"+this.uuid),(n=this._newInst(B(e),r)).settings=B.extend({},t||{}),"input"===i?this._connectDatepicker(e,n):r&&this._inlineDatepicker(e,n)},_newInst:function(e,t){return{id:e[0].id.replace(/([^A-Za-z0-9_\-])/g,"\\\\$1"),input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:t,dpDiv:t?n(B("<div class='"+this._inlineClass+" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")):this.dpDiv}},_connectDatepicker:function(e,t){var n=B(e);t.append=B([]),t.trigger=B([]),n.hasClass(this.markerClassName)||(this._attachments(n,t),n.addClass(this.markerClassName).on("keydown",this._doKeyDown).on("keypress",this._doKeyPress).on("keyup",this._doKeyUp),this._autoSize(t),B.data(e,"datepicker",t),t.settings.disabled&&this._disableDatepicker(e))},_attachments:function(e,t){var n,i,r,a=this._get(t,"appendText"),s=this._get(t,"isRTL");t.append&&t.append.remove(),a&&(t.append=B("<span class='"+this._appendClass+"'>"+a+"</span>"),e[s?"before":"after"](t.append)),e.off("focus",this._showDatepicker),t.trigger&&t.trigger.remove(),"focus"!==(n=this._get(t,"showOn"))&&"both"!==n||e.on("focus",this._showDatepicker),"button"!==n&&"both"!==n||(i=this._get(t,"buttonText"),r=this._get(t,"buttonImage"),t.trigger=B(this._get(t,"buttonImageOnly")?B("<img/>").addClass(this._triggerClass).attr({src:r,alt:i,title:i}):B("<button type='button'></button>").addClass(this._triggerClass).html(r?B("<img/>").attr({src:r,alt:i,title:i}):i)),e[s?"before":"after"](t.trigger),t.trigger.on("click",function(){return B.datepicker._datepickerShowing&&B.datepicker._lastInput===e[0]?B.datepicker._hideDatepicker():(B.datepicker._datepickerShowing&&B.datepicker._lastInput!==e[0]&&B.datepicker._hideDatepicker(),B.datepicker._showDatepicker(e[0])),!1}))},_autoSize:function(e){var t,n,i,r,a,s;this._get(e,"autoSize")&&!e.inline&&(a=new Date(2009,11,20),(s=this._get(e,"dateFormat")).match(/[DM]/)&&(t=function(e){for(r=i=n=0;r<e.length;r++)e[r].length>n&&(n=e[r].length,i=r);return i},a.setMonth(t(this._get(e,s.match(/MM/)?"monthNames":"monthNamesShort"))),a.setDate(t(this._get(e,s.match(/DD/)?"dayNames":"dayNamesShort"))+20-a.getDay())),e.input.attr("size",this._formatDate(e,a).length))},_inlineDatepicker:function(e,t){var n=B(e);n.hasClass(this.markerClassName)||(n.addClass(this.markerClassName).append(t.dpDiv),B.data(e,"datepicker",t),this._setDate(t,this._getDefaultDate(t),!0),this._updateDatepicker(t),this._updateAlternate(t),t.settings.disabled&&this._disableDatepicker(e),t.dpDiv.css("display","block"))},_dialogDatepicker:function(e,t,n,i,r){var a,s,o,l,p,u=this._dialogInst;return u||(this.uuid+=1,a="dp"+this.uuid,this._dialogInput=B("<input type='text' id='"+a+"' style='position: absolute; top: -100px; width: 0px;'/>"),this._dialogInput.on("keydown",this._doKeyDown),B("body").append(this._dialogInput),(u=this._dialogInst=this._newInst(this._dialogInput,!1)).settings={},B.data(this._dialogInput[0],"datepicker",u)),c(u.settings,i||{}),t=t&&t.constructor===Date?this._formatDate(u,t):t,this._dialogInput.val(t),this._pos=r?r.length?r:[r.pageX,r.pageY]:null,this._pos||(s=document.documentElement.clientWidth,o=document.documentElement.clientHeight,l=document.documentElement.scrollLeft||document.body.scrollLeft,p=document.documentElement.scrollTop||document.body.scrollTop,this._pos=[s/2-100+l,o/2-150+p]),this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),u.settings.onSelect=n,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),B.blockUI&&B.blockUI(this.dpDiv),B.data(this._dialogInput[0],"datepicker",u),this},_destroyDatepicker:function(e){var t,n=B(e),i=B.data(e,"datepicker");n.hasClass(this.markerClassName)&&(t=e.nodeName.toLowerCase(),B.removeData(e,"datepicker"),"input"===t?(i.append.remove(),i.trigger.remove(),n.removeClass(this.markerClassName).off("focus",this._showDatepicker).off("keydown",this._doKeyDown).off("keypress",this._doKeyPress).off("keyup",this._doKeyUp)):"div"!==t&&"span"!==t||n.removeClass(this.markerClassName).empty(),a===i&&(a=null))},_enableDatepicker:function(t){var e,n,i=B(t),r=B.data(t,"datepicker");i.hasClass(this.markerClassName)&&("input"===(e=t.nodeName.toLowerCase())?(t.disabled=!1,r.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""})):"div"!==e&&"span"!==e||((n=i.children("."+this._inlineClass)).children().removeClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)),this._disabledInputs=B.map(this._disabledInputs,function(e){return e===t?null:e}))},_disableDatepicker:function(t){var e,n,i=B(t),r=B.data(t,"datepicker");i.hasClass(this.markerClassName)&&("input"===(e=t.nodeName.toLowerCase())?(t.disabled=!0,r.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"})):"div"!==e&&"span"!==e||((n=i.children("."+this._inlineClass)).children().addClass("ui-state-disabled"),n.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)),this._disabledInputs=B.map(this._disabledInputs,function(e){return e===t?null:e}),this._disabledInputs[this._disabledInputs.length]=t)},_isDisabledDatepicker:function(e){if(!e)return!1;for(var t=0;t<this._disabledInputs.length;t++)if(this._disabledInputs[t]===e)return!0;return!1},_getInst:function(e){try{return B.data(e,"datepicker")}catch(e){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(e,t,n){var i,r,a,s,o=this._getInst(e);if(2===arguments.length&&"string"==typeof t)return"defaults"===t?B.extend({},B.datepicker._defaults):o?"all"===t?B.extend({},o.settings):this._get(o,t):null;i=t||{},"string"==typeof t&&((i={})[t]=n),o&&(this._curInst===o&&this._hideDatepicker(),r=this._getDateDatepicker(e,!0),a=this._getMinMaxDate(o,"min"),s=this._getMinMaxDate(o,"max"),c(o.settings,i),null!==a&&void 0!==i.dateFormat&&void 0===i.minDate&&(o.settings.minDate=this._formatDate(o,a)),null!==s&&void 0!==i.dateFormat&&void 0===i.maxDate&&(o.settings.maxDate=this._formatDate(o,s)),"disabled"in i&&(i.disabled?this._disableDatepicker(e):this._enableDatepicker(e)),this._attachments(B(e),o),this._autoSize(o),this._setDate(o,r),this._updateAlternate(o),this._updateDatepicker(o))},_changeDatepicker:function(e,t,n){this._optionDatepicker(e,t,n)},_refreshDatepicker:function(e){var t=this._getInst(e);t&&this._updateDatepicker(t)},_setDateDatepicker:function(e,t){var n=this._getInst(e);n&&(this._setDate(n,t),this._updateDatepicker(n),this._updateAlternate(n))},_getDateDatepicker:function(e,t){var n=this._getInst(e);return n&&!n.inline&&this._setDateFromField(n,t),n?this._getDate(n):null},_doKeyDown:function(e){var t,n,i,r=B.datepicker._getInst(e.target),a=!0,s=r.dpDiv.is(".ui-datepicker-rtl");if(r._keyEvent=!0,B.datepicker._datepickerShowing)switch(e.keyCode){case 9:B.datepicker._hideDatepicker(),a=!1;break;case 13:return(i=B("td."+B.datepicker._dayOverClass+":not(."+B.datepicker._currentClass+")",r.dpDiv))[0]&&B.datepicker._selectDay(e.target,r.selectedMonth,r.selectedYear,i[0]),(t=B.datepicker._get(r,"onSelect"))?(n=B.datepicker._formatDate(r),t.apply(r.input?r.input[0]:null,[n,r])):B.datepicker._hideDatepicker(),!1;case 27:B.datepicker._hideDatepicker();break;case 33:B.datepicker._adjustDate(e.target,e.ctrlKey?-B.datepicker._get(r,"stepBigMonths"):-B.datepicker._get(r,"stepMonths"),"M");break;case 34:B.datepicker._adjustDate(e.target,e.ctrlKey?+B.datepicker._get(r,"stepBigMonths"):+B.datepicker._get(r,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&B.datepicker._clearDate(e.target),a=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&B.datepicker._gotoToday(e.target),a=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&B.datepicker._adjustDate(e.target,s?1:-1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&B.datepicker._adjustDate(e.target,e.ctrlKey?-B.datepicker._get(r,"stepBigMonths"):-B.datepicker._get(r,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&B.datepicker._adjustDate(e.target,-7,"D"),a=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&B.datepicker._adjustDate(e.target,s?-1:1,"D"),a=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&B.datepicker._adjustDate(e.target,e.ctrlKey?+B.datepicker._get(r,"stepBigMonths"):+B.datepicker._get(r,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&B.datepicker._adjustDate(e.target,7,"D"),a=e.ctrlKey||e.metaKey;break;default:a=!1}else 36===e.keyCode&&e.ctrlKey?B.datepicker._showDatepicker(this):a=!1;a&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(e){var t,n,i=B.datepicker._getInst(e.target);if(B.datepicker._get(i,"constrainInput"))return t=B.datepicker._possibleChars(B.datepicker._get(i,"dateFormat")),n=String.fromCharCode(null==e.charCode?e.keyCode:e.charCode),e.ctrlKey||e.metaKey||n<" "||!t||-1<t.indexOf(n)},_doKeyUp:function(e){var t=B.datepicker._getInst(e.target);if(t.input.val()!==t.lastVal)try{B.datepicker.parseDate(B.datepicker._get(t,"dateFormat"),t.input?t.input.val():null,B.datepicker._getFormatConfig(t))&&(B.datepicker._setDateFromField(t),B.datepicker._updateAlternate(t),B.datepicker._updateDatepicker(t))}catch(e){}return!0},_showDatepicker:function(e){var t,n,i,r,a,s,o;"input"!==(e=e.target||e).nodeName.toLowerCase()&&(e=B("input",e.parentNode)[0]),B.datepicker._isDisabledDatepicker(e)||B.datepicker._lastInput===e||(o=B.datepicker._getInst(e),B.datepicker._curInst&&B.datepicker._curInst!==o&&(B.datepicker._curInst.dpDiv.stop(!0,!0),o&&B.datepicker._datepickerShowing&&B.datepicker._hideDatepicker(B.datepicker._curInst.input[0])),!1!==(n=(t=B.datepicker._get(o,"beforeShow"))?t.apply(e,[e,o]):{})&&(c(o.settings,n),o.lastVal=null,B.datepicker._lastInput=e,B.datepicker._setDateFromField(o),B.datepicker._inDialog&&(e.value=""),B.datepicker._pos||(B.datepicker._pos=B.datepicker._findPos(e),B.datepicker._pos[1]+=e.offsetHeight),i=!1,B(e).parents().each(function(){return!(i|="fixed"===B(this).css("position"))}),r={left:B.datepicker._pos[0],top:B.datepicker._pos[1]},B.datepicker._pos=null,o.dpDiv.empty(),o.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),B.datepicker._updateDatepicker(o),r=B.datepicker._checkOffset(o,r,i),o.dpDiv.css({position:B.datepicker._inDialog&&B.blockUI?"static":i?"fixed":"absolute",display:"none",left:r.left+"px",top:r.top+"px"}),o.inline||(a=B.datepicker._get(o,"showAnim"),s=B.datepicker._get(o,"duration"),o.dpDiv.css("z-index",function(e){for(var t,n;e.length&&e[0]!==document;){if(("absolute"===(t=e.css("position"))||"relative"===t||"fixed"===t)&&(n=parseInt(e.css("zIndex"),10),!isNaN(n)&&0!==n))return n;e=e.parent()}return 0}(B(e))+1),B.datepicker._datepickerShowing=!0,B.effects&&B.effects.effect[a]?o.dpDiv.show(a,B.datepicker._get(o,"showOptions"),s):o.dpDiv[a||"show"](a?s:null),B.datepicker._shouldFocusInput(o)&&o.input.trigger("focus"),B.datepicker._curInst=o)))},_updateDatepicker:function(e){this.maxRows=4,(a=e).dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e);var t,n=this._getNumberOfMonths(e),i=n[1],r=e.dpDiv.find("."+this._dayOverClass+" a");0<r.length&&s.apply(r.get(0)),e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),1<i&&e.dpDiv.addClass("ui-datepicker-multi-"+i).css("width",17*i+"em"),e.dpDiv[(1!==n[0]||1!==n[1]?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e===B.datepicker._curInst&&B.datepicker._datepickerShowing&&B.datepicker._shouldFocusInput(e)&&e.input.trigger("focus"),e.yearshtml&&(t=e.yearshtml,setTimeout(function(){t===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),t=e.yearshtml=null},0))},_shouldFocusInput:function(e){return e.input&&e.input.is(":visible")&&!e.input.is(":disabled")&&!e.input.is(":focus")},_checkOffset:function(e,t,n){var i=e.dpDiv.outerWidth(),r=e.dpDiv.outerHeight(),a=e.input?e.input.outerWidth():0,s=e.input?e.input.outerHeight():0,o=document.documentElement.clientWidth+(n?0:B(document).scrollLeft()),l=document.documentElement.clientHeight+(n?0:B(document).scrollTop());return t.left-=this._get(e,"isRTL")?i-a:0,t.left-=n&&t.left===e.input.offset().left?B(document).scrollLeft():0,t.top-=n&&t.top===e.input.offset().top+s?B(document).scrollTop():0,t.left-=Math.min(t.left,t.left+i>o&&i<o?Math.abs(t.left+i-o):0),t.top-=Math.min(t.top,t.top+r>l&&r<l?Math.abs(r+s):0),t},_findPos:function(e){for(var t,n=this._getInst(e),i=this._get(n,"isRTL");e&&("hidden"===e.type||1!==e.nodeType||B.expr.filters.hidden(e));)e=e[i?"previousSibling":"nextSibling"];return[(t=B(e).offset()).left,t.top]},_hideDatepicker:function(e){var t,n,i,r,a=this._curInst;!a||e&&a!==B.data(e,"datepicker")||this._datepickerShowing&&(t=this._get(a,"showAnim"),n=this._get(a,"duration"),i=function(){B.datepicker._tidyDialog(a)},B.effects&&(B.effects.effect[t]||B.effects[t])?a.dpDiv.hide(t,B.datepicker._get(a,"showOptions"),n,i):a.dpDiv["slideDown"===t?"slideUp":"fadeIn"===t?"fadeOut":"hide"](t?n:null,i),t||i(),this._datepickerShowing=!1,(r=this._get(a,"onClose"))&&r.apply(a.input?a.input[0]:null,[a.input?a.input.val():"",a]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),B.blockUI&&(B.unblockUI(),B("body").append(this.dpDiv))),this._inDialog=!1)},_tidyDialog:function(e){e.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar")},_checkExternalClick:function(e){var t,n;B.datepicker._curInst&&(t=B(e.target),n=B.datepicker._getInst(t[0]),(t[0].id===B.datepicker._mainDivId||0!==t.parents("#"+B.datepicker._mainDivId).length||t.hasClass(B.datepicker.markerClassName)||t.closest("."+B.datepicker._triggerClass).length||!B.datepicker._datepickerShowing||B.datepicker._inDialog&&B.blockUI)&&(!t.hasClass(B.datepicker.markerClassName)||B.datepicker._curInst===n)||B.datepicker._hideDatepicker())},_adjustDate:function(e,t,n){var i=B(e),r=this._getInst(i[0]);this._isDisabledDatepicker(i[0])||(this._adjustInstDate(r,t+("M"===n?this._get(r,"showCurrentAtPos"):0),n),this._updateDatepicker(r))},_gotoToday:function(e){var t,n=B(e),i=this._getInst(n[0]);this._get(i,"gotoCurrent")&&i.currentDay?(i.selectedDay=i.currentDay,i.drawMonth=i.selectedMonth=i.currentMonth,i.drawYear=i.selectedYear=i.currentYear):(t=new Date,i.selectedDay=t.getDate(),i.drawMonth=i.selectedMonth=t.getMonth(),i.drawYear=i.selectedYear=t.getFullYear()),this._notifyChange(i),this._adjustDate(n)},_selectMonthYear:function(e,t,n){var i=B(e),r=this._getInst(i[0]);r["selected"+("M"===n?"Month":"Year")]=r["draw"+("M"===n?"Month":"Year")]=parseInt(t.options[t.selectedIndex].value,10),this._notifyChange(r),this._adjustDate(i)},_selectDay:function(e,t,n,i){var r,a=B(e);B(i).hasClass(this._unselectableClass)||this._isDisabledDatepicker(a[0])||((r=this._getInst(a[0])).selectedDay=r.currentDay=B("a",i).html(),r.selectedMonth=r.currentMonth=t,r.selectedYear=r.currentYear=n,this._selectDate(e,this._formatDate(r,r.currentDay,r.currentMonth,r.currentYear)))},_clearDate:function(e){var t=B(e);this._selectDate(t,"")},_selectDate:function(e,t){var n,i=B(e),r=this._getInst(i[0]);t=null!=t?t:this._formatDate(r),r.input&&r.input.val(t),this._updateAlternate(r),(n=this._get(r,"onSelect"))?n.apply(r.input?r.input[0]:null,[t,r]):r.input&&r.input.trigger("change"),r.inline?this._updateDatepicker(r):(this._hideDatepicker(),this._lastInput=r.input[0],"object"!=typeof r.input[0]&&r.input.trigger("focus"),this._lastInput=null)},_updateAlternate:function(e){var t,n,i,r=this._get(e,"altField");r&&(t=this._get(e,"altFormat")||this._get(e,"dateFormat"),n=this._getDate(e),i=this.formatDate(t,n,this._getFormatConfig(e)),B(r).val(i))},noWeekends:function(e){var t=e.getDay();return[0<t&&t<6,""]},iso8601Week:function(e){var t,n=new Date(e.getTime());return n.setDate(n.getDate()+4-(n.getDay()||7)),t=n.getTime(),n.setMonth(0),n.setDate(1),Math.floor(Math.round((t-n)/864e5)/7)+1},parseDate:function(n,a,e){if(null==n||null==a)throw"Invalid arguments";if(""===(a="object"==typeof a?a.toString():a+""))return null;function s(e){var t=Q+1<n.length&&n.charAt(Q+1)===e;return t&&Q++,t}function t(e){var t=s(e),n="@"===e?14:"!"===e?20:"y"===e&&t?4:"o"===e?3:2,i=new RegExp("^\\d{"+("y"===e?n:1)+","+n+"}"),r=a.substring(u).match(i);if(!r)throw"Missing number at position "+u;return u+=r[0].length,parseInt(r[0],10)}function i(e,t,n){var i=-1,r=B.map(s(e)?n:t,function(e,t){return[[t,e]]}).sort(function(e,t){return-(e[1].length-t[1].length)});if(B.each(r,function(e,t){var n=t[1];if(a.substr(u,n.length).toLowerCase()===n.toLowerCase())return i=t[0],u+=n.length,!1}),-1!==i)return i+1;throw"Unknown name at position "+u}function r(){if(a.charAt(u)!==n.charAt(Q))throw"Unexpected literal at position "+u;u++}for(var o,l,p,u=0,c=(e?e.shortYearCutoff:null)||this._defaults.shortYearCutoff,h="string"!=typeof c?c:(new Date).getFullYear()%100+parseInt(c,10),A=(e?e.dayNamesShort:null)||this._defaults.dayNamesShort,d=(e?e.dayNames:null)||this._defaults.dayNames,m=(e?e.monthNamesShort:null)||this._defaults.monthNamesShort,f=(e?e.monthNames:null)||this._defaults.monthNames,g=-1,v=-1,b=-1,C=-1,y=!1,Q=0;Q<n.length;Q++)if(y)"'"!==n.charAt(Q)||s("'")?r():y=!1;else switch(n.charAt(Q)){case"d":b=t("d");break;case"D":i("D",A,d);break;case"o":C=t("o");break;case"m":v=t("m");break;case"M":v=i("M",m,f);break;case"y":g=t("y");break;case"@":g=(p=new Date(t("@"))).getFullYear(),v=p.getMonth()+1,b=p.getDate();break;case"!":g=(p=new Date((t("!")-this._ticksTo1970)/1e4)).getFullYear(),v=p.getMonth()+1,b=p.getDate();break;case"'":s("'")?r():y=!0;break;default:r()}if(u<a.length&&(l=a.substr(u),!/^\s+/.test(l)))throw"Extra/unparsed characters found in date: "+l;if(-1===g?g=(new Date).getFullYear():g<100&&(g+=(new Date).getFullYear()-(new Date).getFullYear()%100+(g<=h?0:-100)),-1<C)for(v=1,b=C;;){if(b<=(o=this._getDaysInMonth(g,v-1)))break;v++,b-=o}if((p=this._daylightSavingAdjust(new Date(g,v-1,b))).getFullYear()!==g||p.getMonth()+1!==v||p.getDate()!==b)throw"Invalid date";return p},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:24*(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925))*60*60*1e7,formatDate:function(n,e,t){if(!e)return"";function r(e){var t=s+1<n.length&&n.charAt(s+1)===e;return t&&s++,t}function i(e,t,n){var i=""+t;if(r(e))for(;i.length<n;)i="0"+i;return i}function a(e,t,n,i){return r(e)?i[t]:n[t]}var s,o=(t?t.dayNamesShort:null)||this._defaults.dayNamesShort,l=(t?t.dayNames:null)||this._defaults.dayNames,p=(t?t.monthNamesShort:null)||this._defaults.monthNamesShort,u=(t?t.monthNames:null)||this._defaults.monthNames,c="",h=!1;if(e)for(s=0;s<n.length;s++)if(h)"'"!==n.charAt(s)||r("'")?c+=n.charAt(s):h=!1;else switch(n.charAt(s)){case"d":c+=i("d",e.getDate(),2);break;case"D":c+=a("D",e.getDay(),o,l);break;case"o":c+=i("o",Math.round((new Date(e.getFullYear(),e.getMonth(),e.getDate()).getTime()-new Date(e.getFullYear(),0,0).getTime())/864e5),3);break;case"m":c+=i("m",e.getMonth()+1,2);break;case"M":c+=a("M",e.getMonth(),p,u);break;case"y":c+=r("y")?e.getFullYear():(e.getFullYear()%100<10?"0":"")+e.getFullYear()%100;break;case"@":c+=e.getTime();break;case"!":c+=1e4*e.getTime()+this._ticksTo1970;break;case"'":r("'")?c+="'":h=!0;break;default:c+=n.charAt(s)}return c},_possibleChars:function(n){function e(e){var t=r+1<n.length&&n.charAt(r+1)===e;return t&&r++,t}for(var t="",i=!1,r=0;r<n.length;r++)if(i)"'"!==n.charAt(r)||e("'")?t+=n.charAt(r):i=!1;else switch(n.charAt(r)){case"d":case"m":case"y":case"@":t+="0123456789";break;case"D":case"M":return null;case"'":e("'")?t+="'":i=!0;break;default:t+=n.charAt(r)}return t},_get:function(e,t){return void 0!==e.settings[t]?e.settings[t]:this._defaults[t]},_setDateFromField:function(e,t){if(e.input.val()!==e.lastVal){var n=this._get(e,"dateFormat"),i=e.lastVal=e.input?e.input.val():null,r=this._getDefaultDate(e),a=r,s=this._getFormatConfig(e);try{a=this.parseDate(n,i,s)||r}catch(e){i=t?"":i}e.selectedDay=a.getDate(),e.drawMonth=e.selectedMonth=a.getMonth(),e.drawYear=e.selectedYear=a.getFullYear(),e.currentDay=i?a.getDate():0,e.currentMonth=i?a.getMonth():0,e.currentYear=i?a.getFullYear():0,this._adjustInstDate(e)}},_getDefaultDate:function(e){return this._restrictMinMax(e,this._determineDate(e,this._get(e,"defaultDate"),new Date))},_determineDate:function(o,e,t){var n,i,r=null==e||""===e?t:"string"==typeof e?function(e){try{return B.datepicker.parseDate(B.datepicker._get(o,"dateFormat"),e,B.datepicker._getFormatConfig(o))}catch(e){}for(var t=(e.toLowerCase().match(/^c/)?B.datepicker._getDate(o):null)||new Date,n=t.getFullYear(),i=t.getMonth(),r=t.getDate(),a=/([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,s=a.exec(e);s;){switch(s[2]||"d"){case"d":case"D":r+=parseInt(s[1],10);break;case"w":case"W":r+=7*parseInt(s[1],10);break;case"m":case"M":i+=parseInt(s[1],10),r=Math.min(r,B.datepicker._getDaysInMonth(n,i));break;case"y":case"Y":n+=parseInt(s[1],10),r=Math.min(r,B.datepicker._getDaysInMonth(n,i))}s=a.exec(e)}return new Date(n,i,r)}(e):"number"==typeof e?isNaN(e)?t:(n=e,(i=new Date).setDate(i.getDate()+n),i):new Date(e.getTime());return(r=r&&"Invalid Date"===r.toString()?t:r)&&(r.setHours(0),r.setMinutes(0),r.setSeconds(0),r.setMilliseconds(0)),this._daylightSavingAdjust(r)},_daylightSavingAdjust:function(e){return e?(e.setHours(12<e.getHours()?e.getHours()+2:0),e):null},_setDate:function(e,t,n){var i=!t,r=e.selectedMonth,a=e.selectedYear,s=this._restrictMinMax(e,this._determineDate(e,t,new Date));e.selectedDay=e.currentDay=s.getDate(),e.drawMonth=e.selectedMonth=e.currentMonth=s.getMonth(),e.drawYear=e.selectedYear=e.currentYear=s.getFullYear(),r===e.selectedMonth&&a===e.selectedYear||n||this._notifyChange(e),this._adjustInstDate(e),e.input&&e.input.val(i?"":this._formatDate(e))},_getDate:function(e){return!e.currentYear||e.input&&""===e.input.val()?null:this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay))},_attachHandlers:function(e){var t=this._get(e,"stepMonths"),n="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map(function(){var e={prev:function(){B.datepicker._adjustDate(n,-t,"M")},next:function(){B.datepicker._adjustDate(n,+t,"M")},hide:function(){B.datepicker._hideDatepicker()},today:function(){B.datepicker._gotoToday(n)},selectDay:function(){return B.datepicker._selectDay(n,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return B.datepicker._selectMonthYear(n,this,"M"),!1},selectYear:function(){return B.datepicker._selectMonthYear(n,this,"Y"),!1}};B(this).on(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])})},_generateHTML:function(e){var t,n,i,r,a,s,o,l,p,u,c,h,A,d,m,f,g,v,b,C,y,Q,B,K,_,w,q,U,Y,W,D,k,G,F,x,O,S,E,P,T=new Date,M=this._daylightSavingAdjust(new Date(T.getFullYear(),T.getMonth(),T.getDate())),Z=this._get(e,"isRTL"),R=this._get(e,"showButtonPanel"),I=this._get(e,"hideIfNoPrevNext"),j=this._get(e,"navigationAsDateFormat"),N=this._getNumberOfMonths(e),H=this._get(e,"showCurrentAtPos"),V=this._get(e,"stepMonths"),L=1!==N[0]||1!==N[1],z=this._daylightSavingAdjust(e.currentDay?new Date(e.currentYear,e.currentMonth,e.currentDay):new Date(9999,9,9)),J=this._getMinMaxDate(e,"min"),$=this._getMinMaxDate(e,"max"),X=e.drawMonth-H,ee=e.drawYear;if(X<0&&(X+=12,ee--),$)for(t=this._daylightSavingAdjust(new Date($.getFullYear(),$.getMonth()-N[0]*N[1]+1,$.getDate())),t=J&&t<J?J:t;this._daylightSavingAdjust(new Date(ee,X,1))>t;)--X<0&&(X=11,ee--);for(e.drawMonth=X,e.drawYear=ee,n=this._get(e,"prevText"),n=j?this.formatDate(n,this._daylightSavingAdjust(new Date(ee,X-V,1)),this._getFormatConfig(e)):n,i=this._canAdjustMonth(e,-1,ee,X)?"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Z?"e":"w")+"'>"+n+"</span></a>":I?"":"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='"+n+"'><span class='ui-icon ui-icon-circle-triangle-"+(Z?"e":"w")+"'>"+n+"</span></a>",r=this._get(e,"nextText"),r=j?this.formatDate(r,this._daylightSavingAdjust(new Date(ee,X+V,1)),this._getFormatConfig(e)):r,a=this._canAdjustMonth(e,1,ee,X)?"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='"+r+"'><span class='ui-icon ui-icon-circle-triangle-"+(Z?"w":"e")+"'>"+r+"</span></a>":I?"":"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='"+r+"'><span class='ui-icon ui-icon-circle-triangle-"+(Z?"w":"e")+"'>"+r+"</span></a>",s=this._get(e,"currentText"),o=this._get(e,"gotoCurrent")&&e.currentDay?z:M,s=j?this.formatDate(s,o,this._getFormatConfig(e)):s,l=e.inline?"":"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>"+this._get(e,"closeText")+"</button>",p=R?"<div class='ui-datepicker-buttonpane ui-widget-content'>"+(Z?l:"")+(this._isInRange(e,o)?"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>"+s+"</button>":"")+(Z?"":l)+"</div>":"",u=parseInt(this._get(e,"firstDay"),10),u=isNaN(u)?0:u,c=this._get(e,"showWeek"),h=this._get(e,"dayNames"),A=this._get(e,"dayNamesMin"),d=this._get(e,"monthNames"),m=this._get(e,"monthNamesShort"),f=this._get(e,"beforeShowDay"),g=this._get(e,"showOtherMonths"),v=this._get(e,"selectOtherMonths"),b=this._getDefaultDate(e),C="",Q=0;Q<N[0];Q++){for(B="",this.maxRows=4,K=0;K<N[1];K++){if(_=this._daylightSavingAdjust(new Date(ee,X,e.selectedDay)),w=" ui-corner-all",q="",L){if(q+="<div class='ui-datepicker-group",1<N[1])switch(K){case 0:q+=" ui-datepicker-group-first",w=" ui-corner-"+(Z?"right":"left");break;case N[1]-1:q+=" ui-datepicker-group-last",w=" ui-corner-"+(Z?"left":"right");break;default:q+=" ui-datepicker-group-middle",w=""}q+="'>"}for(q+="<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix"+w+"'>"+(/all|left/.test(w)&&0===Q?Z?a:i:"")+(/all|right/.test(w)&&0===Q?Z?i:a:"")+this._generateMonthYearHeader(e,X,ee,J,$,0<Q||0<K,d,m)+"</div><table class='ui-datepicker-calendar'><thead><tr>",U=c?"<th class='ui-datepicker-week-col'>"+this._get(e,"weekHeader")+"</th>":"",y=0;y<7;y++)U+="<th scope='col'"+(5<=(y+u+6)%7?" class='ui-datepicker-week-end'":"")+"><span title='"+h[Y=(y+u)%7]+"'>"+A[Y]+"</span></th>";for(q+=U+"</tr></thead><tbody>",W=this._getDaysInMonth(ee,X),ee===e.selectedYear&&X===e.selectedMonth&&(e.selectedDay=Math.min(e.selectedDay,W)),D=(this._getFirstDayOfMonth(ee,X)-u+7)%7,k=Math.ceil((D+W)/7),G=L&&this.maxRows>k?this.maxRows:k,this.maxRows=G,F=this._daylightSavingAdjust(new Date(ee,X,1-D)),x=0;x<G;x++){for(q+="<tr>",O=c?"<td class='ui-datepicker-week-col'>"+this._get(e,"calculateWeek")(F)+"</td>":"",y=0;y<7;y++)S=f?f.apply(e.input?e.input[0]:null,[F]):[!0,""],P=(E=F.getMonth()!==X)&&!v||!S[0]||J&&F<J||$&&$<F,O+="<td class='"+(5<=(y+u+6)%7?" ui-datepicker-week-end":"")+(E?" ui-datepicker-other-month":"")+(F.getTime()===_.getTime()&&X===e.selectedMonth&&e._keyEvent||b.getTime()===F.getTime()&&b.getTime()===_.getTime()?" "+this._dayOverClass:"")+(P?" "+this._unselectableClass+" ui-state-disabled":"")+(E&&!g?"":" "+S[1]+(F.getTime()===z.getTime()?" "+this._currentClass:"")+(F.getTime()===M.getTime()?" ui-datepicker-today":""))+"'"+(E&&!g||!S[2]?"":" title='"+S[2].replace(/'/g,"&#39;")+"'")+(P?"":" data-handler='selectDay' data-event='click' data-month='"+F.getMonth()+"' data-year='"+F.getFullYear()+"'")+">"+(E&&!g?"&#xa0;":P?"<span class='ui-state-default'>"+F.getDate()+"</span>":"<a class='ui-state-default"+(F.getTime()===M.getTime()?" ui-state-highlight":"")+(F.getTime()===z.getTime()?" ui-state-active":"")+(E?" ui-priority-secondary":"")+"' href='#'>"+F.getDate()+"</a>")+"</td>",F.setDate(F.getDate()+1),F=this._daylightSavingAdjust(F);q+=O+"</tr>"}11<++X&&(X=0,ee++),B+=q+="</tbody></table>"+(L?"</div>"+(0<N[0]&&K===N[1]-1?"<div class='ui-datepicker-row-break'></div>":""):"")}C+=B}return C+=p,e._keyEvent=!1,C},_generateMonthYearHeader:function(e,t,n,i,r,a,s,o){var l,p,u,c,h,A,d,m,f=this._get(e,"changeMonth"),g=this._get(e,"changeYear"),v=this._get(e,"showMonthAfterYear"),b="<div class='ui-datepicker-title'>",C="";if(a||!f)C+="<span class='ui-datepicker-month'>"+s[t]+"</span>";else{for(l=i&&i.getFullYear()===n,p=r&&r.getFullYear()===n,C+="<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>",u=0;u<12;u++)(!l||u>=i.getMonth())&&(!p||u<=r.getMonth())&&(C+="<option value='"+u+"'"+(u===t?" selected='selected'":"")+">"+o[u]+"</option>");C+="</select>"}if(v||(b+=C+(!a&&f&&g?"":"&#xa0;")),!e.yearshtml)if(e.yearshtml="",a||!g)b+="<span class='ui-datepicker-year'>"+n+"</span>";else{for(c=this._get(e,"yearRange").split(":"),h=(new Date).getFullYear(),d=(A=function(e){var t=e.match(/c[+\-].*/)?n+parseInt(e.substring(1),10):e.match(/[+\-].*/)?h+parseInt(e,10):parseInt(e,10);return isNaN(t)?h:t})(c[0]),m=Math.max(d,A(c[1]||"")),d=i?Math.max(d,i.getFullYear()):d,m=r?Math.min(m,r.getFullYear()):m,e.yearshtml+="<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";d<=m;d++)e.yearshtml+="<option value='"+d+"'"+(d===n?" selected='selected'":"")+">"+d+"</option>";e.yearshtml+="</select>",b+=e.yearshtml,e.yearshtml=null}return b+=this._get(e,"yearSuffix"),v&&(b+=(!a&&f&&g?"":"&#xa0;")+C),b+="</div>"},_adjustInstDate:function(e,t,n){var i=e.selectedYear+("Y"===n?t:0),r=e.selectedMonth+("M"===n?t:0),a=Math.min(e.selectedDay,this._getDaysInMonth(i,r))+("D"===n?t:0),s=this._restrictMinMax(e,this._daylightSavingAdjust(new Date(i,r,a)));e.selectedDay=s.getDate(),e.drawMonth=e.selectedMonth=s.getMonth(),e.drawYear=e.selectedYear=s.getFullYear(),"M"!==n&&"Y"!==n||this._notifyChange(e)},_restrictMinMax:function(e,t){var n=this._getMinMaxDate(e,"min"),i=this._getMinMaxDate(e,"max"),r=n&&t<n?n:t;return i&&i<r?i:r},_notifyChange:function(e){var t=this._get(e,"onChangeMonthYear");t&&t.apply(e.input?e.input[0]:null,[e.selectedYear,e.selectedMonth+1,e])},_getNumberOfMonths:function(e){var t=this._get(e,"numberOfMonths");return null==t?[1,1]:"number"==typeof t?[1,t]:t},_getMinMaxDate:function(e,t){return this._determineDate(e,this._get(e,t+"Date"),null)},_getDaysInMonth:function(e,t){return 32-this._daylightSavingAdjust(new Date(e,t,32)).getDate()},_getFirstDayOfMonth:function(e,t){return new Date(e,t,1).getDay()},_canAdjustMonth:function(e,t,n,i){var r=this._getNumberOfMonths(e),a=this._daylightSavingAdjust(new Date(n,i+(t<0?t:r[0]*r[1]),1));return t<0&&a.setDate(this._getDaysInMonth(a.getFullYear(),a.getMonth())),this._isInRange(e,a)},_isInRange:function(e,t){var n,i,r=this._getMinMaxDate(e,"min"),a=this._getMinMaxDate(e,"max"),s=null,o=null,l=this._get(e,"yearRange");return l&&(n=l.split(":"),i=(new Date).getFullYear(),s=parseInt(n[0],10),o=parseInt(n[1],10),n[0].match(/[+\-].*/)&&(s+=i),n[1].match(/[+\-].*/)&&(o+=i)),(!r||t.getTime()>=r.getTime())&&(!a||t.getTime()<=a.getTime())&&(!s||t.getFullYear()>=s)&&(!o||t.getFullYear()<=o)},_getFormatConfig:function(e){var t=this._get(e,"shortYearCutoff");return{shortYearCutoff:t="string"!=typeof t?t:(new Date).getFullYear()%100+parseInt(t,10),dayNamesShort:this._get(e,"dayNamesShort"),dayNames:this._get(e,"dayNames"),monthNamesShort:this._get(e,"monthNamesShort"),monthNames:this._get(e,"monthNames")}},_formatDate:function(e,t,n,i){t||(e.currentDay=e.selectedDay,e.currentMonth=e.selectedMonth,e.currentYear=e.selectedYear);var r=t?"object"==typeof t?t:this._daylightSavingAdjust(new Date(i,n,t)):this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return this.formatDate(this._get(e,"dateFormat"),r,this._getFormatConfig(e))}}),B.fn.datepicker=function(e){if(!this.length)return this;B.datepicker.initialized||(B(document).on("mousedown",B.datepicker._checkExternalClick),B.datepicker.initialized=!0),0===B("#"+B.datepicker._mainDivId).length&&B("body").append(B.datepicker.dpDiv);var t=Array.prototype.slice.call(arguments,1);return"string"==typeof e&&("isDisabled"===e||"getDate"===e||"widget"===e)||"option"===e&&2===arguments.length&&"string"==typeof arguments[1]?B.datepicker["_"+e+"Datepicker"].apply(B.datepicker,[this[0]].concat(t)):this.each(function(){"string"==typeof e?B.datepicker["_"+e+"Datepicker"].apply(B.datepicker,[this].concat(t)):B.datepicker._attachDatepicker(this,e)})},B.datepicker=new e,B.datepicker.initialized=!1,B.datepicker.uuid=(new Date).getTime(),B.datepicker.version="1.12.1",B.datepicker},"function"==typeof define&&define.amd?define(["jquery","../version","../keycode"],i):i(jQuery)},{}],21:[function(e,t,n){var i;i=function(l){return l.widget("ui.dialog",{version:"1.12.1",options:{appendTo:"body",autoOpen:!0,buttons:[],classes:{"ui-dialog":"ui-corner-all","ui-dialog-titlebar":"ui-corner-all"},closeOnEscape:!0,closeText:"Close",draggable:!0,hide:null,height:"auto",maxHeight:null,maxWidth:null,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(e){var t=l(this).css(e).offset().top;t<0&&l(this).css("top",e.top-t)}},resizable:!0,show:null,title:null,width:300,beforeClose:null,close:null,drag:null,dragStart:null,dragStop:null,focus:null,open:null,resize:null,resizeStart:null,resizeStop:null},sizeRelatedOptions:{buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},resizableRelatedOptions:{maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0},_create:function(){this.originalCss={display:this.element[0].style.display,width:this.element[0].style.width,minHeight:this.element[0].style.minHeight,maxHeight:this.element[0].style.maxHeight,height:this.element[0].style.height},this.originalPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.originalTitle=this.element.attr("title"),null==this.options.title&&null!=this.originalTitle&&(this.options.title=this.originalTitle),this.options.disabled&&(this.options.disabled=!1),this._createWrapper(),this.element.show().removeAttr("title").appendTo(this.uiDialog),this._addClass("ui-dialog-content","ui-widget-content"),this._createTitlebar(),this._createButtonPane(),this.options.draggable&&l.fn.draggable&&this._makeDraggable(),this.options.resizable&&l.fn.resizable&&this._makeResizable(),this._isOpen=!1,this._trackFocus()},_init:function(){this.options.autoOpen&&this.open()},_appendTo:function(){var e=this.options.appendTo;return e&&(e.jquery||e.nodeType)?l(e):this.document.find(e||"body").eq(0)},_destroy:function(){var e,t=this.originalPosition;this._untrackInstance(),this._destroyOverlay(),this.element.removeUniqueId().css(this.originalCss).detach(),this.uiDialog.remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),(e=t.parent.children().eq(t.index)).length&&e[0]!==this.element[0]?e.before(this.element):t.parent.append(this.element)},widget:function(){return this.uiDialog},disable:l.noop,enable:l.noop,close:function(e){var t=this;this._isOpen&&!1!==this._trigger("beforeClose",e)&&(this._isOpen=!1,this._focusedElement=null,this._destroyOverlay(),this._untrackInstance(),this.opener.filter(":focusable").trigger("focus").length||l.ui.safeBlur(l.ui.safeActiveElement(this.document[0])),this._hide(this.uiDialog,this.options.hide,function(){t._trigger("close",e)}))},isOpen:function(){return this._isOpen},moveToTop:function(){this._moveToTop()},_moveToTop:function(e,t){var n=!1,i=this.uiDialog.siblings(".ui-front:visible").map(function(){return+l(this).css("z-index")}).get(),r=Math.max.apply(null,i);return r>=+this.uiDialog.css("z-index")&&(this.uiDialog.css("z-index",r+1),n=!0),n&&!t&&this._trigger("focus",e),n},open:function(){var e=this;this._isOpen?this._moveToTop()&&this._focusTabbable():(this._isOpen=!0,this.opener=l(l.ui.safeActiveElement(this.document[0])),this._size(),this._position(),this._createOverlay(),this._moveToTop(null,!0),this.overlay&&this.overlay.css("z-index",this.uiDialog.css("z-index")-1),this._show(this.uiDialog,this.options.show,function(){e._focusTabbable(),e._trigger("focus")}),this._makeFocusTarget(),this._trigger("open"))},_focusTabbable:function(){var e=this._focusedElement;(e=e||this.element.find("[autofocus]")).length||(e=this.element.find(":tabbable")),e.length||(e=this.uiDialogButtonPane.find(":tabbable")),e.length||(e=this.uiDialogTitlebarClose.filter(":tabbable")),e.length||(e=this.uiDialog),e.eq(0).trigger("focus")},_keepFocus:function(e){function t(){var e=l.ui.safeActiveElement(this.document[0]);this.uiDialog[0]===e||l.contains(this.uiDialog[0],e)||this._focusTabbable()}e.preventDefault(),t.call(this),this._delay(t)},_createWrapper:function(){this.uiDialog=l("<div>").hide().attr({tabIndex:-1,role:"dialog"}).appendTo(this._appendTo()),this._addClass(this.uiDialog,"ui-dialog","ui-widget ui-widget-content ui-front"),this._on(this.uiDialog,{keydown:function(e){if(this.options.closeOnEscape&&!e.isDefaultPrevented()&&e.keyCode&&e.keyCode===l.ui.keyCode.ESCAPE)return e.preventDefault(),void this.close(e);var t,n,i;e.keyCode!==l.ui.keyCode.TAB||e.isDefaultPrevented()||(t=this.uiDialog.find(":tabbable"),n=t.filter(":first"),i=t.filter(":last"),e.target!==i[0]&&e.target!==this.uiDialog[0]||e.shiftKey?e.target!==n[0]&&e.target!==this.uiDialog[0]||!e.shiftKey||(this._delay(function(){i.trigger("focus")}),e.preventDefault()):(this._delay(function(){n.trigger("focus")}),e.preventDefault()))},mousedown:function(e){this._moveToTop(e)&&this._focusTabbable()}}),this.element.find("[aria-describedby]").length||this.uiDialog.attr({"aria-describedby":this.element.uniqueId().attr("id")})},_createTitlebar:function(){var e;this.uiDialogTitlebar=l("<div>"),this._addClass(this.uiDialogTitlebar,"ui-dialog-titlebar","ui-widget-header ui-helper-clearfix"),this._on(this.uiDialogTitlebar,{mousedown:function(e){l(e.target).closest(".ui-dialog-titlebar-close")||this.uiDialog.trigger("focus")}}),this.uiDialogTitlebarClose=l("<button type='button'></button>").button({label:l("<a>").text(this.options.closeText).html(),icon:"ui-icon-closethick",showLabel:!1}).appendTo(this.uiDialogTitlebar),this._addClass(this.uiDialogTitlebarClose,"ui-dialog-titlebar-close"),this._on(this.uiDialogTitlebarClose,{click:function(e){e.preventDefault(),this.close(e)}}),e=l("<span>").uniqueId().prependTo(this.uiDialogTitlebar),this._addClass(e,"ui-dialog-title"),this._title(e),this.uiDialogTitlebar.prependTo(this.uiDialog),this.uiDialog.attr({"aria-labelledby":e.attr("id")})},_title:function(e){this.options.title?e.text(this.options.title):e.html("&#160;")},_createButtonPane:function(){this.uiDialogButtonPane=l("<div>"),this._addClass(this.uiDialogButtonPane,"ui-dialog-buttonpane","ui-widget-content ui-helper-clearfix"),this.uiButtonSet=l("<div>").appendTo(this.uiDialogButtonPane),this._addClass(this.uiButtonSet,"ui-dialog-buttonset"),this._createButtons()},_createButtons:function(){var r=this,e=this.options.buttons;this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),l.isEmptyObject(e)||l.isArray(e)&&!e.length?this._removeClass(this.uiDialog,"ui-dialog-buttons"):(l.each(e,function(e,t){var n,i;t=l.isFunction(t)?{click:t,text:e}:t,t=l.extend({type:"button"},t),n=t.click,i={icon:t.icon,iconPosition:t.iconPosition,showLabel:t.showLabel,icons:t.icons,text:t.text},delete t.click,delete t.icon,delete t.iconPosition,delete t.showLabel,delete t.icons,"boolean"==typeof t.text&&delete t.text,l("<button></button>",t).button(i).appendTo(r.uiButtonSet).on("click",function(){n.apply(r.element[0],arguments)})}),this._addClass(this.uiDialog,"ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog))},_makeDraggable:function(){var r=this,a=this.options;function s(e){return{position:e.position,offset:e.offset}}this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(e,t){r._addClass(l(this),"ui-dialog-dragging"),r._blockFrames(),r._trigger("dragStart",e,s(t))},drag:function(e,t){r._trigger("drag",e,s(t))},stop:function(e,t){var n=t.offset.left-r.document.scrollLeft(),i=t.offset.top-r.document.scrollTop();a.position={my:"left top",at:"left"+(0<=n?"+":"")+n+" top"+(0<=i?"+":"")+i,of:r.window},r._removeClass(l(this),"ui-dialog-dragging"),r._unblockFrames(),r._trigger("dragStop",e,s(t))}})},_makeResizable:function(){var a=this,s=this.options,e=s.resizable,t=this.uiDialog.css("position"),n="string"==typeof e?e:"n,e,s,w,se,sw,ne,nw";function o(e){return{originalPosition:e.originalPosition,originalSize:e.originalSize,position:e.position,size:e.size}}this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:s.maxWidth,maxHeight:s.maxHeight,minWidth:s.minWidth,minHeight:this._minHeight(),handles:n,start:function(e,t){a._addClass(l(this),"ui-dialog-resizing"),a._blockFrames(),a._trigger("resizeStart",e,o(t))},resize:function(e,t){a._trigger("resize",e,o(t))},stop:function(e,t){var n=a.uiDialog.offset(),i=n.left-a.document.scrollLeft(),r=n.top-a.document.scrollTop();s.height=a.uiDialog.height(),s.width=a.uiDialog.width(),s.position={my:"left top",at:"left"+(0<=i?"+":"")+i+" top"+(0<=r?"+":"")+r,of:a.window},a._removeClass(l(this),"ui-dialog-resizing"),a._unblockFrames(),a._trigger("resizeStop",e,o(t))}}).css("position",t)},_trackFocus:function(){this._on(this.widget(),{focusin:function(e){this._makeFocusTarget(),this._focusedElement=l(e.target)}})},_makeFocusTarget:function(){this._untrackInstance(),this._trackingInstances().unshift(this)},_untrackInstance:function(){var e=this._trackingInstances(),t=l.inArray(this,e);-1!==t&&e.splice(t,1)},_trackingInstances:function(){var e=this.document.data("ui-dialog-instances");return e||(e=[],this.document.data("ui-dialog-instances",e)),e},_minHeight:function(){var e=this.options;return"auto"===e.height?e.minHeight:Math.min(e.minHeight,e.height)},_position:function(){var e=this.uiDialog.is(":visible");e||this.uiDialog.show(),this.uiDialog.position(this.options.position),e||this.uiDialog.hide()},_setOptions:function(e){var n=this,i=!1,r={};l.each(e,function(e,t){n._setOption(e,t),e in n.sizeRelatedOptions&&(i=!0),e in n.resizableRelatedOptions&&(r[e]=t)}),i&&(this._size(),this._position()),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option",r)},_setOption:function(e,t){var n,i,r=this.uiDialog;"disabled"!==e&&(this._super(e,t),"appendTo"===e&&this.uiDialog.appendTo(this._appendTo()),"buttons"===e&&this._createButtons(),"closeText"===e&&this.uiDialogTitlebarClose.button({label:l("<a>").text(""+this.options.closeText).html()}),"draggable"===e&&((n=r.is(":data(ui-draggable)"))&&!t&&r.draggable("destroy"),!n&&t&&this._makeDraggable()),"position"===e&&this._position(),"resizable"===e&&((i=r.is(":data(ui-resizable)"))&&!t&&r.resizable("destroy"),i&&"string"==typeof t&&r.resizable("option","handles",t),i||!1===t||this._makeResizable()),"title"===e&&this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))},_size:function(){var e,t,n,i=this.options;this.element.show().css({width:"auto",minHeight:0,maxHeight:"none",height:0}),i.minWidth>i.width&&(i.width=i.minWidth),e=this.uiDialog.css({height:"auto",width:i.width}).outerHeight(),t=Math.max(0,i.minHeight-e),n="number"==typeof i.maxHeight?Math.max(0,i.maxHeight-e):"none","auto"===i.height?this.element.css({minHeight:t,maxHeight:n,height:"auto"}):this.element.height(Math.max(0,i.height-e)),this.uiDialog.is(":data(ui-resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())},_blockFrames:function(){this.iframeBlocks=this.document.find("iframe").map(function(){var e=l(this);return l("<div>").css({position:"absolute",width:e.outerWidth(),height:e.outerHeight()}).appendTo(e.parent()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_allowInteraction:function(e){return!!l(e.target).closest(".ui-dialog").length||!!l(e.target).closest(".ui-datepicker").length},_createOverlay:function(){var t;this.options.modal&&(t=!0,this._delay(function(){t=!1}),this.document.data("ui-dialog-overlays")||this._on(this.document,{focusin:function(e){t||this._allowInteraction(e)||(e.preventDefault(),this._trackingInstances()[0]._focusTabbable())}}),this.overlay=l("<div>").appendTo(this._appendTo()),this._addClass(this.overlay,null,"ui-widget-overlay ui-front"),this._on(this.overlay,{mousedown:"_keepFocus"}),this.document.data("ui-dialog-overlays",(this.document.data("ui-dialog-overlays")||0)+1))},_destroyOverlay:function(){var e;this.options.modal&&this.overlay&&((e=this.document.data("ui-dialog-overlays")-1)?this.document.data("ui-dialog-overlays",e):(this._off(this.document,"focusin"),this.document.removeData("ui-dialog-overlays")),this.overlay.remove(),this.overlay=null)}}),!1!==l.uiBackCompat&&l.widget("ui.dialog",l.ui.dialog,{options:{dialogClass:""},_createWrapper:function(){this._super(),this.uiDialog.addClass(this.options.dialogClass)},_setOption:function(e,t){"dialogClass"===e&&this.uiDialog.removeClass(this.options.dialogClass).addClass(t),this._superApply(arguments)}}),l.ui.dialog},"function"==typeof define&&define.amd?define(["jquery","./button","./draggable","./mouse","./resizable","../focusable","../keycode","../position","../safe-active-element","../safe-blur","../tabbable","../unique-id","../version","../widget"],i):i(jQuery)},{}],22:[function(e,t,n){var i;i=function(b){return b.widget("ui.draggable",b.ui.mouse,{version:"1.12.1",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1,drag:null,start:null,stop:null},_create:function(){"original"===this.options.helper&&this._setPositionRelative(),this.options.addClasses&&this._addClass("ui-draggable"),this._setHandleClassName(),this._mouseInit()},_setOption:function(e,t){this._super(e,t),"handle"===e&&(this._removeHandleClassName(),this._setHandleClassName())},_destroy:function(){(this.helper||this.element).is(".ui-draggable-dragging")?this.destroyOnClear=!0:(this._removeHandleClassName(),this._mouseDestroy())},_mouseCapture:function(e){var t=this.options;return!(this.helper||t.disabled||0<b(e.target).closest(".ui-resizable-handle").length)&&(this.handle=this._getHandle(e),!!this.handle&&(this._blurActiveElement(e),this._blockFrames(!0===t.iframeFix?"iframe":t.iframeFix),!0))},_blockFrames:function(e){this.iframeBlocks=this.document.find(e).map(function(){var e=b(this);return b("<div>").css("position","absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0]})},_unblockFrames:function(){this.iframeBlocks&&(this.iframeBlocks.remove(),delete this.iframeBlocks)},_blurActiveElement:function(e){var t=b.ui.safeActiveElement(this.document[0]);b(e.target).closest(t).length||b.ui.safeBlur(t)},_mouseStart:function(e){var t=this.options;return this.helper=this._createHelper(e),this._addClass(this.helper,"ui-draggable-dragging"),this._cacheHelperProportions(),b.ui.ddmanager&&(b.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(!0),this.offsetParent=this.helper.offsetParent(),this.hasFixedAncestor=0<this.helper.parents().filter(function(){return"fixed"===b(this).css("position")}).length,this.positionAbs=this.element.offset(),this._refreshOffsets(e),this.originalPosition=this.position=this._generatePosition(e,!1),this.originalPageX=e.pageX,this.originalPageY=e.pageY,t.cursorAt&&this._adjustOffsetFromHelper(t.cursorAt),this._setContainment(),!1===this._trigger("start",e)?(this._clear(),!1):(this._cacheHelperProportions(),b.ui.ddmanager&&!t.dropBehaviour&&b.ui.ddmanager.prepareOffsets(this,e),this._mouseDrag(e,!0),b.ui.ddmanager&&b.ui.ddmanager.dragStart(this,e),!0)},_refreshOffsets:function(e){this.offset={top:this.positionAbs.top-this.margins.top,left:this.positionAbs.left-this.margins.left,scroll:!1,parent:this._getParentOffset(),relative:this._getRelativeOffset()},this.offset.click={left:e.pageX-this.offset.left,top:e.pageY-this.offset.top}},_mouseDrag:function(e,t){if(this.hasFixedAncestor&&(this.offset.parent=this._getParentOffset()),this.position=this._generatePosition(e,!0),this.positionAbs=this._convertPositionTo("absolute"),!t){var n=this._uiHash();if(!1===this._trigger("drag",e,n))return this._mouseUp(new b.Event("mouseup",e)),!1;this.position=n.position}return this.helper[0].style.left=this.position.left+"px",this.helper[0].style.top=this.position.top+"px",b.ui.ddmanager&&b.ui.ddmanager.drag(this,e),!1},_mouseStop:function(e){var t=this,n=!1;return b.ui.ddmanager&&!this.options.dropBehaviour&&(n=b.ui.ddmanager.drop(this,e)),this.dropped&&(n=this.dropped,this.dropped=!1),"invalid"===this.options.revert&&!n||"valid"===this.options.revert&&n||!0===this.options.revert||b.isFunction(this.options.revert)&&this.options.revert.call(this.element,n)?b(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){!1!==t._trigger("stop",e)&&t._clear()}):!1!==this._trigger("stop",e)&&this._clear(),!1},_mouseUp:function(e){return this._unblockFrames(),b.ui.ddmanager&&b.ui.ddmanager.dragStop(this,e),this.handleElement.is(e.target)&&this.element.trigger("focus"),b.ui.mouse.prototype._mouseUp.call(this,e)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp(new b.Event("mouseup",{target:this.element[0]})):this._clear(),this},_getHandle:function(e){return!this.options.handle||!!b(e.target).closest(this.element.find(this.options.handle)).length},_setHandleClassName:function(){this.handleElement=this.options.handle?this.element.find(this.options.handle):this.element,this._addClass(this.handleElement,"ui-draggable-handle")},_removeHandleClassName:function(){this._removeClass(this.handleElement,"ui-draggable-handle")},_createHelper:function(e){var t=this.options,n=b.isFunction(t.helper),i=n?b(t.helper.apply(this.element[0],[e])):"clone"===t.helper?this.element.clone().removeAttr("id"):this.element;return i.parents("body").length||i.appendTo("parent"===t.appendTo?this.element[0].parentNode:t.appendTo),n&&i[0]===this.element[0]&&this._setPositionRelative(),i[0]===this.element[0]||/(fixed|absolute)/.test(i.css("position"))||i.css("position","absolute"),i},_setPositionRelative:function(){/^(?:r|a|f)/.test(this.element.css("position"))||(this.element[0].style.position="relative")},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),b.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_isRootNode:function(e){return/(html|body)/i.test(e.tagName)||e===this.document[0]},_getParentOffset:function(){var e=this.offsetParent.offset(),t=this.document[0];return"absolute"===this.cssPosition&&this.scrollParent[0]!==t&&b.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),this._isRootNode(this.offsetParent[0])&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var e=this.element.position(),t=this._isRootNode(this.scrollParent[0]);return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+(t?0:this.scrollParent.scrollTop()),left:e.left-(parseInt(this.helper.css("left"),10)||0)+(t?0:this.scrollParent.scrollLeft())}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,t,n,i=this.options,r=this.document[0];this.relativeContainer=null,i.containment?"window"!==i.containment?"document"!==i.containment?i.containment.constructor!==Array?("parent"===i.containment&&(i.containment=this.helper[0].parentNode),(n=(t=b(i.containment))[0])&&(e=/(scroll|auto)/.test(t.css("overflow")),this.containment=[(parseInt(t.css("borderLeftWidth"),10)||0)+(parseInt(t.css("paddingLeft"),10)||0),(parseInt(t.css("borderTopWidth"),10)||0)+(parseInt(t.css("paddingTop"),10)||0),(e?Math.max(n.scrollWidth,n.offsetWidth):n.offsetWidth)-(parseInt(t.css("borderRightWidth"),10)||0)-(parseInt(t.css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(e?Math.max(n.scrollHeight,n.offsetHeight):n.offsetHeight)-(parseInt(t.css("borderBottomWidth"),10)||0)-(parseInt(t.css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relativeContainer=t)):this.containment=i.containment:this.containment=[0,0,b(r).width()-this.helperProportions.width-this.margins.left,(b(r).height()||r.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=[b(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,b(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,b(window).scrollLeft()+b(window).width()-this.helperProportions.width-this.margins.left,b(window).scrollTop()+(b(window).height()||r.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]:this.containment=null},_convertPositionTo:function(e,t){t=t||this.position;var n="absolute"===e?1:-1,i=this._isRootNode(this.scrollParent[0]);return{top:t.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.offset.scroll.top:i?0:this.offset.scroll.top)*n,left:t.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.offset.scroll.left:i?0:this.offset.scroll.left)*n}},_generatePosition:function(e,t){var n,i,r,a,s=this.options,o=this._isRootNode(this.scrollParent[0]),l=e.pageX,p=e.pageY;return o&&this.offset.scroll||(this.offset.scroll={top:this.scrollParent.scrollTop(),left:this.scrollParent.scrollLeft()}),t&&(this.containment&&(n=this.relativeContainer?(i=this.relativeContainer.offset(),[this.containment[0]+i.left,this.containment[1]+i.top,this.containment[2]+i.left,this.containment[3]+i.top]):this.containment,e.pageX-this.offset.click.left<n[0]&&(l=n[0]+this.offset.click.left),e.pageY-this.offset.click.top<n[1]&&(p=n[1]+this.offset.click.top),e.pageX-this.offset.click.left>n[2]&&(l=n[2]+this.offset.click.left),e.pageY-this.offset.click.top>n[3]&&(p=n[3]+this.offset.click.top)),s.grid&&(r=s.grid[1]?this.originalPageY+Math.round((p-this.originalPageY)/s.grid[1])*s.grid[1]:this.originalPageY,p=!n||r-this.offset.click.top>=n[1]||r-this.offset.click.top>n[3]?r:r-this.offset.click.top>=n[1]?r-s.grid[1]:r+s.grid[1],a=s.grid[0]?this.originalPageX+Math.round((l-this.originalPageX)/s.grid[0])*s.grid[0]:this.originalPageX,l=!n||a-this.offset.click.left>=n[0]||a-this.offset.click.left>n[2]?a:a-this.offset.click.left>=n[0]?a-s.grid[0]:a+s.grid[0]),"y"===s.axis&&(l=this.originalPageX),"x"===s.axis&&(p=this.originalPageY)),{top:p-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.offset.scroll.top:o?0:this.offset.scroll.top),left:l-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.offset.scroll.left:o?0:this.offset.scroll.left)}},_clear:function(){this._removeClass(this.helper,"ui-draggable-dragging"),this.helper[0]===this.element[0]||this.cancelHelperRemoval||this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1,this.destroyOnClear&&this.destroy()},_trigger:function(e,t,n){return n=n||this._uiHash(),b.ui.plugin.call(this,e,[t,n,this],!0),/^(drag|start|stop)/.test(e)&&(this.positionAbs=this._convertPositionTo("absolute"),n.offset=this.positionAbs),b.Widget.prototype._trigger.call(this,e,t,n)},plugins:{},_uiHash:function(){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),b.ui.plugin.add("draggable","connectToSortable",{start:function(t,e,n){var i=b.extend({},e,{item:n.element});n.sortables=[],b(n.options.connectToSortable).each(function(){var e=b(this).sortable("instance");e&&!e.options.disabled&&(n.sortables.push(e),e.refreshPositions(),e._trigger("activate",t,i))})},stop:function(t,e,n){var i=b.extend({},e,{item:n.element});n.cancelHelperRemoval=!1,b.each(n.sortables,function(){var e=this;e.isOver?(e.isOver=0,n.cancelHelperRemoval=!0,e.cancelHelperRemoval=!1,e._storedCSS={position:e.placeholder.css("position"),top:e.placeholder.css("top"),left:e.placeholder.css("left")},e._mouseStop(t),e.options.helper=e.options._helper):(e.cancelHelperRemoval=!0,e._trigger("deactivate",t,i))})},drag:function(n,i,r){b.each(r.sortables,function(){var e=!1,t=this;t.positionAbs=r.positionAbs,t.helperProportions=r.helperProportions,t.offset.click=r.offset.click,t._intersectsWith(t.containerCache)&&(e=!0,b.each(r.sortables,function(){return this.positionAbs=r.positionAbs,this.helperProportions=r.helperProportions,this.offset.click=r.offset.click,this!==t&&this._intersectsWith(this.containerCache)&&b.contains(t.element[0],this.element[0])&&(e=!1),e})),e?(t.isOver||(t.isOver=1,r._parent=i.helper.parent(),t.currentItem=i.helper.appendTo(t.element).data("ui-sortable-item",!0),t.options._helper=t.options.helper,t.options.helper=function(){return i.helper[0]},n.target=t.currentItem[0],t._mouseCapture(n,!0),t._mouseStart(n,!0,!0),t.offset.click.top=r.offset.click.top,t.offset.click.left=r.offset.click.left,t.offset.parent.left-=r.offset.parent.left-t.offset.parent.left,t.offset.parent.top-=r.offset.parent.top-t.offset.parent.top,r._trigger("toSortable",n),r.dropped=t.element,b.each(r.sortables,function(){this.refreshPositions()}),r.currentItem=r.element,t.fromOutside=r),t.currentItem&&(t._mouseDrag(n),i.position=t.position)):t.isOver&&(t.isOver=0,t.cancelHelperRemoval=!0,t.options._revert=t.options.revert,t.options.revert=!1,t._trigger("out",n,t._uiHash(t)),t._mouseStop(n,!0),t.options.revert=t.options._revert,t.options.helper=t.options._helper,t.placeholder&&t.placeholder.remove(),i.helper.appendTo(r._parent),r._refreshOffsets(n),i.position=r._generatePosition(n,!0),r._trigger("fromSortable",n),r.dropped=!1,b.each(r.sortables,function(){this.refreshPositions()}))})}}),b.ui.plugin.add("draggable","cursor",{start:function(e,t,n){var i=b("body"),r=n.options;i.css("cursor")&&(r._cursor=i.css("cursor")),i.css("cursor",r.cursor)},stop:function(e,t,n){var i=n.options;i._cursor&&b("body").css("cursor",i._cursor)}}),b.ui.plugin.add("draggable","opacity",{start:function(e,t,n){var i=b(t.helper),r=n.options;i.css("opacity")&&(r._opacity=i.css("opacity")),i.css("opacity",r.opacity)},stop:function(e,t,n){var i=n.options;i._opacity&&b(t.helper).css("opacity",i._opacity)}}),b.ui.plugin.add("draggable","scroll",{start:function(e,t,n){n.scrollParentNotHidden||(n.scrollParentNotHidden=n.helper.scrollParent(!1)),n.scrollParentNotHidden[0]!==n.document[0]&&"HTML"!==n.scrollParentNotHidden[0].tagName&&(n.overflowOffset=n.scrollParentNotHidden.offset())},drag:function(e,t,n){var i=n.options,r=!1,a=n.scrollParentNotHidden[0],s=n.document[0];a!==s&&"HTML"!==a.tagName?(i.axis&&"x"===i.axis||(n.overflowOffset.top+a.offsetHeight-e.pageY<i.scrollSensitivity?a.scrollTop=r=a.scrollTop+i.scrollSpeed:e.pageY-n.overflowOffset.top<i.scrollSensitivity&&(a.scrollTop=r=a.scrollTop-i.scrollSpeed)),i.axis&&"y"===i.axis||(n.overflowOffset.left+a.offsetWidth-e.pageX<i.scrollSensitivity?a.scrollLeft=r=a.scrollLeft+i.scrollSpeed:e.pageX-n.overflowOffset.left<i.scrollSensitivity&&(a.scrollLeft=r=a.scrollLeft-i.scrollSpeed))):(i.axis&&"x"===i.axis||(e.pageY-b(s).scrollTop()<i.scrollSensitivity?r=b(s).scrollTop(b(s).scrollTop()-i.scrollSpeed):b(window).height()-(e.pageY-b(s).scrollTop())<i.scrollSensitivity&&(r=b(s).scrollTop(b(s).scrollTop()+i.scrollSpeed))),i.axis&&"y"===i.axis||(e.pageX-b(s).scrollLeft()<i.scrollSensitivity?r=b(s).scrollLeft(b(s).scrollLeft()-i.scrollSpeed):b(window).width()-(e.pageX-b(s).scrollLeft())<i.scrollSensitivity&&(r=b(s).scrollLeft(b(s).scrollLeft()+i.scrollSpeed)))),!1!==r&&b.ui.ddmanager&&!i.dropBehaviour&&b.ui.ddmanager.prepareOffsets(n,e)}}),b.ui.plugin.add("draggable","snap",{start:function(e,t,n){var i=n.options;n.snapElements=[],b(i.snap.constructor!==String?i.snap.items||":data(ui-draggable)":i.snap).each(function(){var e=b(this),t=e.offset();this!==n.element[0]&&n.snapElements.push({item:this,width:e.outerWidth(),height:e.outerHeight(),top:t.top,left:t.left})})},drag:function(e,t,n){for(var i,r,a,s,o,l,p,u,c,h=n.options,A=h.snapTolerance,d=t.offset.left,m=d+n.helperProportions.width,f=t.offset.top,g=f+n.helperProportions.height,v=n.snapElements.length-1;0<=v;v--)l=(o=n.snapElements[v].left-n.margins.left)+n.snapElements[v].width,u=(p=n.snapElements[v].top-n.margins.top)+n.snapElements[v].height,m<o-A||l+A<d||g<p-A||u+A<f||!b.contains(n.snapElements[v].item.ownerDocument,n.snapElements[v].item)?(n.snapElements[v].snapping&&n.options.snap.release&&n.options.snap.release.call(n.element,e,b.extend(n._uiHash(),{snapItem:n.snapElements[v].item})),n.snapElements[v].snapping=!1):("inner"!==h.snapMode&&(i=Math.abs(p-g)<=A,r=Math.abs(u-f)<=A,a=Math.abs(o-m)<=A,s=Math.abs(l-d)<=A,i&&(t.position.top=n._convertPositionTo("relative",{top:p-n.helperProportions.height,left:0}).top),r&&(t.position.top=n._convertPositionTo("relative",{top:u,left:0}).top),a&&(t.position.left=n._convertPositionTo("relative",{top:0,left:o-n.helperProportions.width}).left),s&&(t.position.left=n._convertPositionTo("relative",{top:0,left:l}).left)),c=i||r||a||s,"outer"!==h.snapMode&&(i=Math.abs(p-f)<=A,r=Math.abs(u-g)<=A,a=Math.abs(o-d)<=A,s=Math.abs(l-m)<=A,i&&(t.position.top=n._convertPositionTo("relative",{top:p,left:0}).top),r&&(t.position.top=n._convertPositionTo("relative",{top:u-n.helperProportions.height,left:0}).top),a&&(t.position.left=n._convertPositionTo("relative",{top:0,left:o}).left),s&&(t.position.left=n._convertPositionTo("relative",{top:0,left:l-n.helperProportions.width}).left)),!n.snapElements[v].snapping&&(i||r||a||s||c)&&n.options.snap.snap&&n.options.snap.snap.call(n.element,e,b.extend(n._uiHash(),{snapItem:n.snapElements[v].item})),n.snapElements[v].snapping=i||r||a||s||c)}}),b.ui.plugin.add("draggable","stack",{start:function(e,t,n){var i,r=n.options,a=b.makeArray(b(r.stack)).sort(function(e,t){return(parseInt(b(e).css("zIndex"),10)||0)-(parseInt(b(t).css("zIndex"),10)||0)});a.length&&(i=parseInt(b(a[0]).css("zIndex"),10)||0,b(a).each(function(e){b(this).css("zIndex",i+e)}),this.css("zIndex",i+a.length))}}),b.ui.plugin.add("draggable","zIndex",{start:function(e,t,n){var i=b(t.helper),r=n.options;i.css("zIndex")&&(r._zIndex=i.css("zIndex")),i.css("zIndex",r.zIndex)},stop:function(e,t,n){var i=n.options;i._zIndex&&b(t.helper).css("zIndex",i._zIndex)}}),b.ui.draggable},"function"==typeof define&&define.amd?define(["jquery","./mouse","../data","../plugin","../safe-active-element","../safe-blur","../scroll-parent","../version","../widget"],i):i(jQuery)},{}],23:[function(e,t,n){var i;i=function(r){var a=!1;return r(document).on("mouseup",function(){a=!1}),r.widget("ui.mouse",{version:"1.12.1",options:{cancel:"input, textarea, button, select, option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.on("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).on("click."+this.widgetName,function(e){if(!0===r.data(e.target,t.widgetName+".preventClickEvent"))return r.removeData(e.target,t.widgetName+".preventClickEvent"),e.stopImmediatePropagation(),!1}),this.started=!1},_mouseDestroy:function(){this.element.off("."+this.widgetName),this._mouseMoveDelegate&&this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(e){if(!a){this._mouseMoved=!1,this._mouseStarted&&this._mouseUp(e),this._mouseDownEvent=e;var t=this,n=1===e.which,i=!("string"!=typeof this.options.cancel||!e.target.nodeName)&&r(e.target).closest(this.options.cancel).length;return n&&!i&&this._mouseCapture(e)?(this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){t.mouseDelayMet=!0},this.options.delay)),this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(e),!this._mouseStarted)?(e.preventDefault(),!0):(!0===r.data(e.target,this.widgetName+".preventClickEvent")&&r.removeData(e.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return t._mouseMove(e)},this._mouseUpDelegate=function(e){return t._mouseUp(e)},this.document.on("mousemove."+this.widgetName,this._mouseMoveDelegate).on("mouseup."+this.widgetName,this._mouseUpDelegate),e.preventDefault(),a=!0)):!0}},_mouseMove:function(e){if(this._mouseMoved){if(r.ui.ie&&(!document.documentMode||document.documentMode<9)&&!e.button)return this._mouseUp(e);if(!e.which)if(e.originalEvent.altKey||e.originalEvent.ctrlKey||e.originalEvent.metaKey||e.originalEvent.shiftKey)this.ignoreMissingWhich=!0;else if(!this.ignoreMissingWhich)return this._mouseUp(e)}return(e.which||e.button)&&(this._mouseMoved=!0),this._mouseStarted?(this._mouseDrag(e),e.preventDefault()):(this._mouseDistanceMet(e)&&this._mouseDelayMet(e)&&(this._mouseStarted=!1!==this._mouseStart(this._mouseDownEvent,e),this._mouseStarted?this._mouseDrag(e):this._mouseUp(e)),!this._mouseStarted)},_mouseUp:function(e){this.document.off("mousemove."+this.widgetName,this._mouseMoveDelegate).off("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,e.target===this._mouseDownEvent.target&&r.data(e.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(e)),this._mouseDelayTimer&&(clearTimeout(this._mouseDelayTimer),delete this._mouseDelayTimer),this.ignoreMissingWhich=!1,a=!1,e.preventDefault()},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(){return this.mouseDelayMet},_mouseStart:function(){},_mouseDrag:function(){},_mouseStop:function(){},_mouseCapture:function(){return!0}})},"function"==typeof define&&define.amd?define(["jquery","../ie","../version","../widget"],i):i(jQuery)},{}],24:[function(e,t,n){var i;i=function(v){return v.widget("ui.resizable",v.ui.mouse,{version:"1.12.1",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,classes:{"ui-resizable-se":"ui-icon ui-icon-gripsmall-diagonal-se"},containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:90,resize:null,start:null,stop:null},_num:function(e){return parseFloat(e)||0},_isNumber:function(e){return!isNaN(parseFloat(e))},_hasScroll:function(e,t){if("hidden"===v(e).css("overflow"))return!1;var n,i=t&&"left"===t?"scrollLeft":"scrollTop";return 0<e[i]||(e[i]=1,n=0<e[i],e[i]=0,n)},_create:function(){var e,t=this.options,n=this;this._addClass("ui-resizable"),v.extend(this,{_aspectRatio:!!t.aspectRatio,aspectRatio:t.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:t.helper||t.ghost||t.animate?t.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)&&(this.element.wrap(v("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("ui-resizable",this.element.resizable("instance")),this.elementIsWrapper=!0,e={marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom"),marginLeft:this.originalElement.css("marginLeft")},this.element.css(e),this.originalElement.css("margin",0),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css(e),this._proportionallyResize()),this._setupHandles(),t.autoHide&&v(this.element).on("mouseenter",function(){t.disabled||(n._removeClass("ui-resizable-autohide"),n._handles.show())}).on("mouseleave",function(){t.disabled||n.resizing||(n._addClass("ui-resizable-autohide"),n._handles.hide())}),this._mouseInit()},_destroy:function(){this._mouseDestroy();function e(e){v(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove()}var t;return this.elementIsWrapper&&(e(this.element),t=this.element,this.originalElement.css({position:t.css("position"),width:t.outerWidth(),height:t.outerHeight(),top:t.css("top"),left:t.css("left")}).insertAfter(t),t.remove()),this.originalElement.css("resize",this.originalResizeStyle),e(this.originalElement),this},_setOption:function(e,t){switch(this._super(e,t),e){case"handles":this._removeHandles(),this._setupHandles()}},_setupHandles:function(){var e,t,n,i,r,a=this.options,s=this;if(this.handles=a.handles||(v(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se"),this._handles=v(),this.handles.constructor===String)for("all"===this.handles&&(this.handles="n,e,s,w,se,sw,ne,nw"),n=this.handles.split(","),this.handles={},t=0;t<n.length;t++)i="ui-resizable-"+(e=v.trim(n[t])),r=v("<div>"),this._addClass(r,"ui-resizable-handle "+i),r.css({zIndex:a.zIndex}),this.handles[e]=".ui-resizable-"+e,this.element.append(r);this._renderAxis=function(e){var t,n,i,r;for(t in e=e||this.element,this.handles)this.handles[t].constructor===String?this.handles[t]=this.element.children(this.handles[t]).first().show():(this.handles[t].jquery||this.handles[t].nodeType)&&(this.handles[t]=v(this.handles[t]),this._on(this.handles[t],{mousedown:s._mouseDown})),this.elementIsWrapper&&this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)&&(n=v(this.handles[t],this.element),r=/sw|ne|nw|se|n|s/.test(t)?n.outerHeight():n.outerWidth(),i=["padding",/ne|nw|n/.test(t)?"Top":/se|sw|s/.test(t)?"Bottom":/^e$/.test(t)?"Right":"Left"].join(""),e.css(i,r),this._proportionallyResize()),this._handles=this._handles.add(this.handles[t])},this._renderAxis(this.element),this._handles=this._handles.add(this.element.find(".ui-resizable-handle")),this._handles.disableSelection(),this._handles.on("mouseover",function(){s.resizing||(this.className&&(r=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)),s.axis=r&&r[1]?r[1]:"se")}),a.autoHide&&(this._handles.hide(),this._addClass("ui-resizable-autohide"))},_removeHandles:function(){this._handles.remove()},_mouseCapture:function(e){var t,n,i=!1;for(t in this.handles)(n=v(this.handles[t])[0])!==e.target&&!v.contains(n,e.target)||(i=!0);return!this.options.disabled&&i},_mouseStart:function(e){var t,n,i,r=this.options,a=this.element;return this.resizing=!0,this._renderProxy(),t=this._num(this.helper.css("left")),n=this._num(this.helper.css("top")),r.containment&&(t+=v(r.containment).scrollLeft()||0,n+=v(r.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:t,top:n},this.size=this._helper?{width:this.helper.width(),height:this.helper.height()}:{width:a.width(),height:a.height()},this.originalSize=this._helper?{width:a.outerWidth(),height:a.outerHeight()}:{width:a.width(),height:a.height()},this.sizeDiff={width:a.outerWidth()-a.width(),height:a.outerHeight()-a.height()},this.originalPosition={left:t,top:n},this.originalMousePosition={left:e.pageX,top:e.pageY},this.aspectRatio="number"==typeof r.aspectRatio?r.aspectRatio:this.originalSize.width/this.originalSize.height||1,i=v(".ui-resizable-"+this.axis).css("cursor"),v("body").css("cursor","auto"===i?this.axis+"-resize":i),this._addClass("ui-resizable-resizing"),this._propagate("start",e),!0},_mouseDrag:function(e){var t,n,i=this.originalMousePosition,r=this.axis,a=e.pageX-i.left||0,s=e.pageY-i.top||0,o=this._change[r];return this._updatePrevProperties(),o&&(t=o.apply(this,[e,a,s]),this._updateVirtualBoundaries(e.shiftKey),(this._aspectRatio||e.shiftKey)&&(t=this._updateRatio(t,e)),t=this._respectSize(t,e),this._updateCache(t),this._propagate("resize",e),n=this._applyChanges(),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),v.isEmptyObject(n)||(this._updatePrevProperties(),this._trigger("resize",e,this.ui()),this._applyChanges())),!1},_mouseStop:function(e){this.resizing=!1;var t,n,i,r,a,s,o,l=this.options,p=this;return this._helper&&(i=(n=(t=this._proportionallyResizeElements).length&&/textarea/i.test(t[0].nodeName))&&this._hasScroll(t[0],"left")?0:p.sizeDiff.height,r=n?0:p.sizeDiff.width,a={width:p.helper.width()-r,height:p.helper.height()-i},s=parseFloat(p.element.css("left"))+(p.position.left-p.originalPosition.left)||null,o=parseFloat(p.element.css("top"))+(p.position.top-p.originalPosition.top)||null,l.animate||this.element.css(v.extend(a,{top:o,left:s})),p.helper.height(p.size.height),p.helper.width(p.size.width),this._helper&&!l.animate&&this._proportionallyResize()),v("body").css("cursor","auto"),this._removeClass("ui-resizable-resizing"),this._propagate("stop",e),this._helper&&this.helper.remove(),!1},_updatePrevProperties:function(){this.prevPosition={top:this.position.top,left:this.position.left},this.prevSize={width:this.size.width,height:this.size.height}},_applyChanges:function(){var e={};return this.position.top!==this.prevPosition.top&&(e.top=this.position.top+"px"),this.position.left!==this.prevPosition.left&&(e.left=this.position.left+"px"),this.size.width!==this.prevSize.width&&(e.width=this.size.width+"px"),this.size.height!==this.prevSize.height&&(e.height=this.size.height+"px"),this.helper.css(e),e},_updateVirtualBoundaries:function(e){var t,n,i,r,a=this.options,s={minWidth:this._isNumber(a.minWidth)?a.minWidth:0,maxWidth:this._isNumber(a.maxWidth)?a.maxWidth:1/0,minHeight:this._isNumber(a.minHeight)?a.minHeight:0,maxHeight:this._isNumber(a.maxHeight)?a.maxHeight:1/0};(this._aspectRatio||e)&&(t=s.minHeight*this.aspectRatio,i=s.minWidth/this.aspectRatio,n=s.maxHeight*this.aspectRatio,r=s.maxWidth/this.aspectRatio,t>s.minWidth&&(s.minWidth=t),i>s.minHeight&&(s.minHeight=i),n<s.maxWidth&&(s.maxWidth=n),r<s.maxHeight&&(s.maxHeight=r)),this._vBoundaries=s},_updateCache:function(e){this.offset=this.helper.offset(),this._isNumber(e.left)&&(this.position.left=e.left),this._isNumber(e.top)&&(this.position.top=e.top),this._isNumber(e.height)&&(this.size.height=e.height),this._isNumber(e.width)&&(this.size.width=e.width)},_updateRatio:function(e){var t=this.position,n=this.size,i=this.axis;return this._isNumber(e.height)?e.width=e.height*this.aspectRatio:this._isNumber(e.width)&&(e.height=e.width/this.aspectRatio),"sw"===i&&(e.left=t.left+(n.width-e.width),e.top=null),"nw"===i&&(e.top=t.top+(n.height-e.height),e.left=t.left+(n.width-e.width)),e},_respectSize:function(e){var t=this._vBoundaries,n=this.axis,i=this._isNumber(e.width)&&t.maxWidth&&t.maxWidth<e.width,r=this._isNumber(e.height)&&t.maxHeight&&t.maxHeight<e.height,a=this._isNumber(e.width)&&t.minWidth&&t.minWidth>e.width,s=this._isNumber(e.height)&&t.minHeight&&t.minHeight>e.height,o=this.originalPosition.left+this.originalSize.width,l=this.originalPosition.top+this.originalSize.height,p=/sw|nw|w/.test(n),u=/nw|ne|n/.test(n);return a&&(e.width=t.minWidth),s&&(e.height=t.minHeight),i&&(e.width=t.maxWidth),r&&(e.height=t.maxHeight),a&&p&&(e.left=o-t.minWidth),i&&p&&(e.left=o-t.maxWidth),s&&u&&(e.top=l-t.minHeight),r&&u&&(e.top=l-t.maxHeight),e.width||e.height||e.left||!e.top?e.width||e.height||e.top||!e.left||(e.left=null):e.top=null,e},_getPaddingPlusBorderDimensions:function(e){for(var t=0,n=[],i=[e.css("borderTopWidth"),e.css("borderRightWidth"),e.css("borderBottomWidth"),e.css("borderLeftWidth")],r=[e.css("paddingTop"),e.css("paddingRight"),e.css("paddingBottom"),e.css("paddingLeft")];t<4;t++)n[t]=parseFloat(i[t])||0,n[t]+=parseFloat(r[t])||0;return{height:n[0]+n[2],width:n[1]+n[3]}},_proportionallyResize:function(){if(this._proportionallyResizeElements.length)for(var e,t=0,n=this.helper||this.element;t<this._proportionallyResizeElements.length;t++)e=this._proportionallyResizeElements[t],this.outerDimensions||(this.outerDimensions=this._getPaddingPlusBorderDimensions(e)),e.css({height:n.height()-this.outerDimensions.height||0,width:n.width()-this.outerDimensions.width||0})},_renderProxy:function(){var e=this.element,t=this.options;this.elementOffset=e.offset(),this._helper?(this.helper=this.helper||v("<div style='overflow:hidden;'></div>"),this._addClass(this.helper,this._helper),this.helper.css({width:this.element.outerWidth(),height:this.element.outerHeight(),position:"absolute",left:this.elementOffset.left+"px",top:this.elementOffset.top+"px",zIndex:++t.zIndex}),this.helper.appendTo("body").disableSelection()):this.helper=this.element},_change:{e:function(e,t){return{width:this.originalSize.width+t}},w:function(e,t){var n=this.originalSize;return{left:this.originalPosition.left+t,width:n.width-t}},n:function(e,t,n){var i=this.originalSize;return{top:this.originalPosition.top+n,height:i.height-n}},s:function(e,t,n){return{height:this.originalSize.height+n}},se:function(e,t,n){return v.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[e,t,n]))},sw:function(e,t,n){return v.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[e,t,n]))},ne:function(e,t,n){return v.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[e,t,n]))},nw:function(e,t,n){return v.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[e,t,n]))}},_propagate:function(e,t){v.ui.plugin.call(this,e,[t,this.ui()]),"resize"!==e&&this._trigger(e,t,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),v.ui.plugin.add("resizable","animate",{stop:function(t){var n=v(this).resizable("instance"),e=n.options,i=n._proportionallyResizeElements,r=i.length&&/textarea/i.test(i[0].nodeName),a=r&&n._hasScroll(i[0],"left")?0:n.sizeDiff.height,s=r?0:n.sizeDiff.width,o={width:n.size.width-s,height:n.size.height-a},l=parseFloat(n.element.css("left"))+(n.position.left-n.originalPosition.left)||null,p=parseFloat(n.element.css("top"))+(n.position.top-n.originalPosition.top)||null;n.element.animate(v.extend(o,p&&l?{top:p,left:l}:{}),{duration:e.animateDuration,easing:e.animateEasing,step:function(){var e={width:parseFloat(n.element.css("width")),height:parseFloat(n.element.css("height")),top:parseFloat(n.element.css("top")),left:parseFloat(n.element.css("left"))};i&&i.length&&v(i[0]).css({width:e.width,height:e.height}),n._updateCache(e),n._propagate("resize",t)}})}}),v.ui.plugin.add("resizable","containment",{start:function(){var n,i,e,t,r,a,s,o=v(this).resizable("instance"),l=o.options,p=o.element,u=l.containment,c=u instanceof v?u.get(0):/parent/.test(u)?p.parent().get(0):u;c&&(o.containerElement=v(c),/document/.test(u)||u===document?(o.containerOffset={left:0,top:0},o.containerPosition={left:0,top:0},o.parentData={element:v(document),left:0,top:0,width:v(document).width(),height:v(document).height()||document.body.parentNode.scrollHeight}):(n=v(c),i=[],v(["Top","Right","Left","Bottom"]).each(function(e,t){i[e]=o._num(n.css("padding"+t))}),o.containerOffset=n.offset(),o.containerPosition=n.position(),o.containerSize={height:n.innerHeight()-i[3],width:n.innerWidth()-i[1]},e=o.containerOffset,t=o.containerSize.height,r=o.containerSize.width,a=o._hasScroll(c,"left")?c.scrollWidth:r,s=o._hasScroll(c)?c.scrollHeight:t,o.parentData={element:c,left:e.left,top:e.top,width:a,height:s}))},resize:function(e){var t,n,i,r,a=v(this).resizable("instance"),s=a.options,o=a.containerOffset,l=a.position,p=a._aspectRatio||e.shiftKey,u={top:0,left:0},c=a.containerElement,h=!0;c[0]!==document&&/static/.test(c.css("position"))&&(u=o),l.left<(a._helper?o.left:0)&&(a.size.width=a.size.width+(a._helper?a.position.left-o.left:a.position.left-u.left),p&&(a.size.height=a.size.width/a.aspectRatio,h=!1),a.position.left=s.helper?o.left:0),l.top<(a._helper?o.top:0)&&(a.size.height=a.size.height+(a._helper?a.position.top-o.top:a.position.top),p&&(a.size.width=a.size.height*a.aspectRatio,h=!1),a.position.top=a._helper?o.top:0),i=a.containerElement.get(0)===a.element.parent().get(0),r=/relative|absolute/.test(a.containerElement.css("position")),i&&r?(a.offset.left=a.parentData.left+a.position.left,a.offset.top=a.parentData.top+a.position.top):(a.offset.left=a.element.offset().left,a.offset.top=a.element.offset().top),t=Math.abs(a.sizeDiff.width+(a._helper?a.offset.left-u.left:a.offset.left-o.left)),n=Math.abs(a.sizeDiff.height+(a._helper?a.offset.top-u.top:a.offset.top-o.top)),t+a.size.width>=a.parentData.width&&(a.size.width=a.parentData.width-t,p&&(a.size.height=a.size.width/a.aspectRatio,h=!1)),n+a.size.height>=a.parentData.height&&(a.size.height=a.parentData.height-n,p&&(a.size.width=a.size.height*a.aspectRatio,h=!1)),h||(a.position.left=a.prevPosition.left,a.position.top=a.prevPosition.top,a.size.width=a.prevSize.width,a.size.height=a.prevSize.height)},stop:function(){var e=v(this).resizable("instance"),t=e.options,n=e.containerOffset,i=e.containerPosition,r=e.containerElement,a=v(e.helper),s=a.offset(),o=a.outerWidth()-e.sizeDiff.width,l=a.outerHeight()-e.sizeDiff.height;e._helper&&!t.animate&&/relative/.test(r.css("position"))&&v(this).css({left:s.left-i.left-n.left,width:o,height:l}),e._helper&&!t.animate&&/static/.test(r.css("position"))&&v(this).css({left:s.left-i.left-n.left,width:o,height:l})}}),v.ui.plugin.add("resizable","alsoResize",{start:function(){var e=v(this).resizable("instance").options;v(e.alsoResize).each(function(){var e=v(this);e.data("ui-resizable-alsoresize",{width:parseFloat(e.width()),height:parseFloat(e.height()),left:parseFloat(e.css("left")),top:parseFloat(e.css("top"))})})},resize:function(e,n){var t=v(this).resizable("instance"),i=t.options,r=t.originalSize,a=t.originalPosition,s={height:t.size.height-r.height||0,width:t.size.width-r.width||0,top:t.position.top-a.top||0,left:t.position.left-a.left||0};v(i.alsoResize).each(function(){var e=v(this),i=v(this).data("ui-resizable-alsoresize"),r={},t=e.parents(n.originalElement[0]).length?["width","height"]:["width","height","top","left"];v.each(t,function(e,t){var n=(i[t]||0)+(s[t]||0);n&&0<=n&&(r[t]=n||null)}),e.css(r)})},stop:function(){v(this).removeData("ui-resizable-alsoresize")}}),v.ui.plugin.add("resizable","ghost",{start:function(){var e=v(this).resizable("instance"),t=e.size;e.ghost=e.originalElement.clone(),e.ghost.css({opacity:.25,display:"block",position:"relative",height:t.height,width:t.width,margin:0,left:0,top:0}),e._addClass(e.ghost,"ui-resizable-ghost"),!1!==v.uiBackCompat&&"string"==typeof e.options.ghost&&e.ghost.addClass(this.options.ghost),e.ghost.appendTo(e.helper)},resize:function(){var e=v(this).resizable("instance");e.ghost&&e.ghost.css({position:"relative",height:e.size.height,width:e.size.width})},stop:function(){var e=v(this).resizable("instance");e.ghost&&e.helper&&e.helper.get(0).removeChild(e.ghost.get(0))}}),v.ui.plugin.add("resizable","grid",{resize:function(){var e,t=v(this).resizable("instance"),n=t.options,i=t.size,r=t.originalSize,a=t.originalPosition,s=t.axis,o="number"==typeof n.grid?[n.grid,n.grid]:n.grid,l=o[0]||1,p=o[1]||1,u=Math.round((i.width-r.width)/l)*l,c=Math.round((i.height-r.height)/p)*p,h=r.width+u,A=r.height+c,d=n.maxWidth&&n.maxWidth<h,m=n.maxHeight&&n.maxHeight<A,f=n.minWidth&&n.minWidth>h,g=n.minHeight&&n.minHeight>A;n.grid=o,f&&(h+=l),g&&(A+=p),d&&(h-=l),m&&(A-=p),/^(se|s|e)$/.test(s)?(t.size.width=h,t.size.height=A):/^(ne)$/.test(s)?(t.size.width=h,t.size.height=A,t.position.top=a.top-c):/^(sw)$/.test(s)?(t.size.width=h,t.size.height=A,t.position.left=a.left-u):((A-p<=0||h-l<=0)&&(e=t._getPaddingPlusBorderDimensions(this)),0<A-p?(t.size.height=A,t.position.top=a.top-c):(A=p-e.height,t.size.height=A,t.position.top=a.top+r.height-A),0<h-l?(t.size.width=h,t.position.left=a.left-u):(h=l-e.width,t.size.width=h,t.position.left=a.left+r.width-h))}}),v.ui.resizable},"function"==typeof define&&define.amd?define(["jquery","./mouse","../disable-selection","../plugin","../version","../widget"],i):i(jQuery)},{}],25:[function(e,t,n){var i;i=function(A){return A.widget("ui.sortable",A.ui.mouse,{version:"1.12.1",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3,activate:null,beforeStop:null,change:null,deactivate:null,out:null,over:null,receive:null,remove:null,sort:null,start:null,stop:null,update:null},_isOverAxis:function(e,t,n){return t<=e&&e<t+n},_isFloating:function(e){return/left|right/.test(e.css("float"))||/inline|table-cell/.test(e.css("display"))},_create:function(){this.containerCache={},this._addClass("ui-sortable"),this.refresh(),this.offset=this.element.offset(),this._mouseInit(),this._setHandleClassName(),this.ready=!0},_setOption:function(e,t){this._super(e,t),"handle"===e&&this._setHandleClassName()},_setHandleClassName:function(){var e=this;this._removeClass(this.element.find(".ui-sortable-handle"),"ui-sortable-handle"),A.each(this.items,function(){e._addClass(this.instance.options.handle?this.item.find(this.instance.options.handle):this.item,"ui-sortable-handle")})},_destroy:function(){this._mouseDestroy();for(var e=this.items.length-1;0<=e;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_mouseCapture:function(e,t){var n=null,i=!1,r=this;return!this.reverting&&(!this.options.disabled&&"static"!==this.options.type&&(this._refreshItems(e),A(e.target).parents().each(function(){if(A.data(this,r.widgetName+"-item")===r)return n=A(this),!1}),A.data(e.target,r.widgetName+"-item")===r&&(n=A(e.target)),!!n&&(!(this.options.handle&&!t&&(A(this.options.handle,n).find("*").addBack().each(function(){this===e.target&&(i=!0)}),!i))&&(this.currentItem=n,this._removeCurrentsFromItems(),!0))))},_mouseStart:function(e,t,n){var i,r,a=this.options;if((this.currentContainer=this).refreshPositions(),this.helper=this._createHelper(e),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},A.extend(this.offset,{click:{left:e.pageX-this.offset.left,top:e.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(e),this.originalPageX=e.pageX,this.originalPageY=e.pageY,a.cursorAt&&this._adjustOffsetFromHelper(a.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!==this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),a.containment&&this._setContainment(),a.cursor&&"auto"!==a.cursor&&(r=this.document.find("body"),this.storedCursor=r.css("cursor"),r.css("cursor",a.cursor),this.storedStylesheet=A("<style>*{ cursor: "+a.cursor+" !important; }</style>").appendTo(r)),a.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",a.opacity)),a.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",a.zIndex)),this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",e,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions(),!n)for(i=this.containers.length-1;0<=i;i--)this.containers[i]._trigger("activate",e,this._uiHash(this));return A.ui.ddmanager&&(A.ui.ddmanager.current=this),A.ui.ddmanager&&!a.dropBehaviour&&A.ui.ddmanager.prepareOffsets(this,e),this.dragging=!0,this._addClass(this.helper,"ui-sortable-helper"),this._mouseDrag(e),!0},_mouseDrag:function(e){var t,n,i,r,a=this.options,s=!1;for(this.position=this._generatePosition(e),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs),this.options.scroll&&(this.scrollParent[0]!==this.document[0]&&"HTML"!==this.scrollParent[0].tagName?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-e.pageY<a.scrollSensitivity?this.scrollParent[0].scrollTop=s=this.scrollParent[0].scrollTop+a.scrollSpeed:e.pageY-this.overflowOffset.top<a.scrollSensitivity&&(this.scrollParent[0].scrollTop=s=this.scrollParent[0].scrollTop-a.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-e.pageX<a.scrollSensitivity?this.scrollParent[0].scrollLeft=s=this.scrollParent[0].scrollLeft+a.scrollSpeed:e.pageX-this.overflowOffset.left<a.scrollSensitivity&&(this.scrollParent[0].scrollLeft=s=this.scrollParent[0].scrollLeft-a.scrollSpeed)):(e.pageY-this.document.scrollTop()<a.scrollSensitivity?s=this.document.scrollTop(this.document.scrollTop()-a.scrollSpeed):this.window.height()-(e.pageY-this.document.scrollTop())<a.scrollSensitivity&&(s=this.document.scrollTop(this.document.scrollTop()+a.scrollSpeed)),e.pageX-this.document.scrollLeft()<a.scrollSensitivity?s=this.document.scrollLeft(this.document.scrollLeft()-a.scrollSpeed):this.window.width()-(e.pageX-this.document.scrollLeft())<a.scrollSensitivity&&(s=this.document.scrollLeft(this.document.scrollLeft()+a.scrollSpeed))),!1!==s&&A.ui.ddmanager&&!a.dropBehaviour&&A.ui.ddmanager.prepareOffsets(this,e)),this.positionAbs=this._convertPositionTo("absolute"),this.options.axis&&"y"===this.options.axis||(this.helper[0].style.left=this.position.left+"px"),this.options.axis&&"x"===this.options.axis||(this.helper[0].style.top=this.position.top+"px"),t=this.items.length-1;0<=t;t--)if(i=(n=this.items[t]).item[0],(r=this._intersectsWithPointer(n))&&n.instance===this.currentContainer&&!(i===this.currentItem[0]||this.placeholder[1===r?"next":"prev"]()[0]===i||A.contains(this.placeholder[0],i)||"semi-dynamic"===this.options.type&&A.contains(this.element[0],i))){if(this.direction=1===r?"down":"up","pointer"!==this.options.tolerance&&!this._intersectsWithSides(n))break;this._rearrange(e,n),this._trigger("change",e,this._uiHash());break}return this._contactContainers(e),A.ui.ddmanager&&A.ui.ddmanager.drag(this,e),this._trigger("sort",e,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(e,t){var n,i,r,a;if(e)return A.ui.ddmanager&&!this.options.dropBehaviour&&A.ui.ddmanager.drop(this,e),this.options.revert?(i=(n=this).placeholder.offset(),a={},(r=this.options.axis)&&"x"!==r||(a.left=i.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollLeft)),r&&"y"!==r||(a.top=i.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]===this.document[0].body?0:this.offsetParent[0].scrollTop)),this.reverting=!0,A(this.helper).animate(a,parseInt(this.options.revert,10)||500,function(){n._clear(e)})):this._clear(e,t),!1},cancel:function(){if(this.dragging){this._mouseUp(new A.Event("mouseup",{target:null})),"original"===this.options.helper?(this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")):this.currentItem.show();for(var e=this.containers.length-1;0<=e;e--)this.containers[e]._trigger("deactivate",null,this._uiHash(this)),this.containers[e].containerCache.over&&(this.containers[e]._trigger("out",null,this._uiHash(this)),this.containers[e].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),"original"!==this.options.helper&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),A.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?A(this.domPosition.prev).after(this.currentItem):A(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var e=this._getItemsAsjQuery(t&&t.connected),n=[];return t=t||{},A(e).each(function(){var e=(A(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[\-=_](.+)/);e&&n.push((t.key||e[1]+"[]")+"="+(t.key&&t.expression?e[1]:e[2]))}),!n.length&&t.key&&n.push(t.key+"="),n.join("&")},toArray:function(e){var t=this._getItemsAsjQuery(e&&e.connected),n=[];return e=e||{},t.each(function(){n.push(A(e.item||this).attr(e.attribute||"id")||"")}),n},_intersectsWith:function(e){var t=this.positionAbs.left,n=t+this.helperProportions.width,i=this.positionAbs.top,r=i+this.helperProportions.height,a=e.left,s=a+e.width,o=e.top,l=o+e.height,p=this.offset.click.top,u=this.offset.click.left,c="x"===this.options.axis||o<i+p&&i+p<l,h="y"===this.options.axis||a<t+u&&t+u<s,A=c&&h;return"pointer"===this.options.tolerance||this.options.forcePointerForContainers||"pointer"!==this.options.tolerance&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?A:a<t+this.helperProportions.width/2&&n-this.helperProportions.width/2<s&&o<i+this.helperProportions.height/2&&r-this.helperProportions.height/2<l},_intersectsWithPointer:function(e){var t,n,i="x"===this.options.axis||this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top,e.height),r="y"===this.options.axis||this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left,e.width);return!(!i||!r)&&(t=this._getDragVerticalDirection(),n=this._getDragHorizontalDirection(),this.floating?"right"===n||"down"===t?2:1:t&&("down"===t?2:1))},_intersectsWithSides:function(e){var t=this._isOverAxis(this.positionAbs.top+this.offset.click.top,e.top+e.height/2,e.height),n=this._isOverAxis(this.positionAbs.left+this.offset.click.left,e.left+e.width/2,e.width),i=this._getDragVerticalDirection(),r=this._getDragHorizontalDirection();return this.floating&&r?"right"===r&&n||"left"===r&&!n:i&&("down"===i&&t||"up"===i&&!t)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return 0!=e&&(0<e?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return 0!=e&&(0<e?"right":"left")},refresh:function(e){return this._refreshItems(e),this._setHandleClassName(),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor===String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(e){var t,n,i,r,a=[],s=[],o=this._connectWith();if(o&&e)for(t=o.length-1;0<=t;t--)for(n=(i=A(o[t],this.document[0])).length-1;0<=n;n--)(r=A.data(i[n],this.widgetFullName))&&r!==this&&!r.options.disabled&&s.push([A.isFunction(r.options.items)?r.options.items.call(r.element):A(r.options.items,r.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),r]);function l(){a.push(this)}for(s.push([A.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):A(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]),t=s.length-1;0<=t;t--)s[t][0].each(l);return A(a)},_removeCurrentsFromItems:function(){var n=this.currentItem.find(":data("+this.widgetName+"-item)");this.items=A.grep(this.items,function(e){for(var t=0;t<n.length;t++)if(n[t]===e.item[0])return!1;return!0})},_refreshItems:function(e){this.items=[],this.containers=[this];var t,n,i,r,a,s,o,l,p=this.items,u=[[A.isFunction(this.options.items)?this.options.items.call(this.element[0],e,{item:this.currentItem}):A(this.options.items,this.element),this]],c=this._connectWith();if(c&&this.ready)for(t=c.length-1;0<=t;t--)for(n=(i=A(c[t],this.document[0])).length-1;0<=n;n--)(r=A.data(i[n],this.widgetFullName))&&r!==this&&!r.options.disabled&&(u.push([A.isFunction(r.options.items)?r.options.items.call(r.element[0],e,{item:this.currentItem}):A(r.options.items,r.element),r]),this.containers.push(r));for(t=u.length-1;0<=t;t--)for(a=u[t][1],n=0,l=(s=u[t][0]).length;n<l;n++)(o=A(s[n])).data(this.widgetName+"-item",a),p.push({item:o,instance:a,width:0,height:0,left:0,top:0})},refreshPositions:function(e){var t,n,i,r;for(this.floating=!!this.items.length&&("x"===this.options.axis||this._isFloating(this.items[0].item)),this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset()),t=this.items.length-1;0<=t;t--)(n=this.items[t]).instance!==this.currentContainer&&this.currentContainer&&n.item[0]!==this.currentItem[0]||(i=this.options.toleranceElement?A(this.options.toleranceElement,n.item):n.item,e||(n.width=i.outerWidth(),n.height=i.outerHeight()),r=i.offset(),n.left=r.left,n.top=r.top);if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(t=this.containers.length-1;0<=t;t--)r=this.containers[t].element.offset(),this.containers[t].containerCache.left=r.left,this.containers[t].containerCache.top=r.top,this.containers[t].containerCache.width=this.containers[t].element.outerWidth(),this.containers[t].containerCache.height=this.containers[t].element.outerHeight();return this},_createPlaceholder:function(n){var i,r=(n=n||this).options;r.placeholder&&r.placeholder.constructor!==String||(i=r.placeholder,r.placeholder={element:function(){var e=n.currentItem[0].nodeName.toLowerCase(),t=A("<"+e+">",n.document[0]);return n._addClass(t,"ui-sortable-placeholder",i||n.currentItem[0].className)._removeClass(t,"ui-sortable-helper"),"tbody"===e?n._createTrPlaceholder(n.currentItem.find("tr").eq(0),A("<tr>",n.document[0]).appendTo(t)):"tr"===e?n._createTrPlaceholder(n.currentItem,t):"img"===e&&t.attr("src",n.currentItem.attr("src")),i||t.css("visibility","hidden"),t},update:function(e,t){i&&!r.forcePlaceholderSize||(t.height()||t.height(n.currentItem.innerHeight()-parseInt(n.currentItem.css("paddingTop")||0,10)-parseInt(n.currentItem.css("paddingBottom")||0,10)),t.width()||t.width(n.currentItem.innerWidth()-parseInt(n.currentItem.css("paddingLeft")||0,10)-parseInt(n.currentItem.css("paddingRight")||0,10)))}}),n.placeholder=A(r.placeholder.element.call(n.element,n.currentItem)),n.currentItem.after(n.placeholder),r.placeholder.update(n,n.placeholder)},_createTrPlaceholder:function(e,t){var n=this;e.children().each(function(){A("<td>&#160;</td>",n.document[0]).attr("colspan",A(this).attr("colspan")||1).appendTo(t)})},_contactContainers:function(e){for(var t,n,i,r,a,s,o,l,p,u=null,c=null,h=this.containers.length-1;0<=h;h--)if(!A.contains(this.currentItem[0],this.containers[h].element[0]))if(this._intersectsWith(this.containers[h].containerCache)){if(u&&A.contains(this.containers[h].element[0],u.element[0]))continue;u=this.containers[h],c=h}else this.containers[h].containerCache.over&&(this.containers[h]._trigger("out",e,this._uiHash(this)),this.containers[h].containerCache.over=0);if(u)if(1===this.containers.length)this.containers[c].containerCache.over||(this.containers[c]._trigger("over",e,this._uiHash(this)),this.containers[c].containerCache.over=1);else{for(n=1e4,i=null,r=(l=u.floating||this._isFloating(this.currentItem))?"left":"top",a=l?"width":"height",p=l?"pageX":"pageY",t=this.items.length-1;0<=t;t--)A.contains(this.containers[c].element[0],this.items[t].item[0])&&this.items[t].item[0]!==this.currentItem[0]&&(s=this.items[t].item.offset()[r],o=!1,e[p]-s>this.items[t][a]/2&&(o=!0),Math.abs(e[p]-s)<n&&(n=Math.abs(e[p]-s),i=this.items[t],this.direction=o?"up":"down"));if(!i&&!this.options.dropOnEmpty)return;if(this.currentContainer===this.containers[c])return void(this.currentContainer.containerCache.over||(this.containers[c]._trigger("over",e,this._uiHash()),this.currentContainer.containerCache.over=1));i?this._rearrange(e,i,null,!0):this._rearrange(e,null,this.containers[c].element,!0),this._trigger("change",e,this._uiHash()),this.containers[c]._trigger("change",e,this._uiHash(this)),this.currentContainer=this.containers[c],this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[c]._trigger("over",e,this._uiHash(this)),this.containers[c].containerCache.over=1}},_createHelper:function(e){var t=this.options,n=A.isFunction(t.helper)?A(t.helper.apply(this.element[0],[e,this.currentItem])):"clone"===t.helper?this.currentItem.clone():this.currentItem;return n.parents("body").length||A("parent"!==t.appendTo?t.appendTo:this.currentItem[0].parentNode)[0].appendChild(n[0]),n[0]===this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),n[0].style.width&&!t.forceHelperSize||n.width(this.currentItem.width()),n[0].style.height&&!t.forceHelperSize||n.height(this.currentItem.height()),n},_adjustOffsetFromHelper:function(e){"string"==typeof e&&(e=e.split(" ")),A.isArray(e)&&(e={left:+e[0],top:+e[1]||0}),"left"in e&&(this.offset.click.left=e.left+this.margins.left),"right"in e&&(this.offset.click.left=this.helperProportions.width-e.right+this.margins.left),"top"in e&&(this.offset.click.top=e.top+this.margins.top),"bottom"in e&&(this.offset.click.top=this.helperProportions.height-e.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var e=this.offsetParent.offset();return"absolute"===this.cssPosition&&this.scrollParent[0]!==this.document[0]&&A.contains(this.scrollParent[0],this.offsetParent[0])&&(e.left+=this.scrollParent.scrollLeft(),e.top+=this.scrollParent.scrollTop()),(this.offsetParent[0]===this.document[0].body||this.offsetParent[0].tagName&&"html"===this.offsetParent[0].tagName.toLowerCase()&&A.ui.ie)&&(e={top:0,left:0}),{top:e.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:e.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if("relative"!==this.cssPosition)return{top:0,left:0};var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var e,t,n,i=this.options;"parent"===i.containment&&(i.containment=this.helper[0].parentNode),"document"!==i.containment&&"window"!==i.containment||(this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,"document"===i.containment?this.document.width():this.window.width()-this.helperProportions.width-this.margins.left,("document"===i.containment?this.document.height()||document.body.parentNode.scrollHeight:this.window.height()||this.document[0].body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top]),/^(document|window|parent)$/.test(i.containment)||(e=A(i.containment)[0],t=A(i.containment).offset(),n="hidden"!==A(e).css("overflow"),this.containment=[t.left+(parseInt(A(e).css("borderLeftWidth"),10)||0)+(parseInt(A(e).css("paddingLeft"),10)||0)-this.margins.left,t.top+(parseInt(A(e).css("borderTopWidth"),10)||0)+(parseInt(A(e).css("paddingTop"),10)||0)-this.margins.top,t.left+(n?Math.max(e.scrollWidth,e.offsetWidth):e.offsetWidth)-(parseInt(A(e).css("borderLeftWidth"),10)||0)-(parseInt(A(e).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,t.top+(n?Math.max(e.scrollHeight,e.offsetHeight):e.offsetHeight)-(parseInt(A(e).css("borderTopWidth"),10)||0)-(parseInt(A(e).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top])},_convertPositionTo:function(e,t){t=t||this.position;var n="absolute"===e?1:-1,i="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&A.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,r=/(html|body)/i.test(i[0].tagName);return{top:t.top+this.offset.relative.top*n+this.offset.parent.top*n-("fixed"===this.cssPosition?-this.scrollParent.scrollTop():r?0:i.scrollTop())*n,left:t.left+this.offset.relative.left*n+this.offset.parent.left*n-("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():r?0:i.scrollLeft())*n}},_generatePosition:function(e){var t,n,i=this.options,r=e.pageX,a=e.pageY,s="absolute"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&A.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(s[0].tagName);return"relative"!==this.cssPosition||this.scrollParent[0]!==this.document[0]&&this.scrollParent[0]!==this.offsetParent[0]||(this.offset.relative=this._getRelativeOffset()),this.originalPosition&&(this.containment&&(e.pageX-this.offset.click.left<this.containment[0]&&(r=this.containment[0]+this.offset.click.left),e.pageY-this.offset.click.top<this.containment[1]&&(a=this.containment[1]+this.offset.click.top),e.pageX-this.offset.click.left>this.containment[2]&&(r=this.containment[2]+this.offset.click.left),e.pageY-this.offset.click.top>this.containment[3]&&(a=this.containment[3]+this.offset.click.top)),i.grid&&(t=this.originalPageY+Math.round((a-this.originalPageY)/i.grid[1])*i.grid[1],a=!this.containment||t-this.offset.click.top>=this.containment[1]&&t-this.offset.click.top<=this.containment[3]?t:t-this.offset.click.top>=this.containment[1]?t-i.grid[1]:t+i.grid[1],n=this.originalPageX+Math.round((r-this.originalPageX)/i.grid[0])*i.grid[0],r=!this.containment||n-this.offset.click.left>=this.containment[0]&&n-this.offset.click.left<=this.containment[2]?n:n-this.offset.click.left>=this.containment[0]?n-i.grid[0]:n+i.grid[0])),{top:a-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+("fixed"===this.cssPosition?-this.scrollParent.scrollTop():o?0:s.scrollTop()),left:r-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+("fixed"===this.cssPosition?-this.scrollParent.scrollLeft():o?0:s.scrollLeft())}},_rearrange:function(e,t,n,i){n?n[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],"down"===this.direction?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var r=this.counter;this._delay(function(){r===this.counter&&this.refreshPositions(!i)})},_clear:function(e,t){this.reverting=!1;var n,i=[];if(!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null,this.helper[0]===this.currentItem[0]){for(n in this._storedCSS)"auto"!==this._storedCSS[n]&&"static"!==this._storedCSS[n]||(this._storedCSS[n]="");this.currentItem.css(this._storedCSS),this._removeClass(this.currentItem,"ui-sortable-helper")}else this.currentItem.show();function r(t,n,i){return function(e){i._trigger(t,e,n._uiHash(n))}}for(this.fromOutside&&!t&&i.push(function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))}),!this.fromOutside&&this.domPosition.prev===this.currentItem.prev().not(".ui-sortable-helper")[0]&&this.domPosition.parent===this.currentItem.parent()[0]||t||i.push(function(e){this._trigger("update",e,this._uiHash())}),this!==this.currentContainer&&(t||(i.push(function(e){this._trigger("remove",e,this._uiHash())}),i.push(function(t){return function(e){t._trigger("receive",e,this._uiHash(this))}}.call(this,this.currentContainer)),i.push(function(t){return function(e){t._trigger("update",e,this._uiHash(this))}}.call(this,this.currentContainer)))),n=this.containers.length-1;0<=n;n--)t||i.push(r("deactivate",this,this.containers[n])),this.containers[n].containerCache.over&&(i.push(r("out",this,this.containers[n])),this.containers[n].containerCache.over=0);if(this.storedCursor&&(this.document.find("body").css("cursor",this.storedCursor),this.storedStylesheet.remove()),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex","auto"===this._storedZIndex?"":this._storedZIndex),this.dragging=!1,t||this._trigger("beforeStop",e,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.cancelHelperRemoval||(this.helper[0]!==this.currentItem[0]&&this.helper.remove(),this.helper=null),!t){for(n=0;n<i.length;n++)i[n].call(this,e);this._trigger("stop",e,this._uiHash())}return this.fromOutside=!1,!this.cancelHelperRemoval},_trigger:function(){!1===A.Widget.prototype._trigger.apply(this,arguments)&&this.cancel()},_uiHash:function(e){var t=e||this;return{helper:t.helper,placeholder:t.placeholder||A([]),position:t.position,originalPosition:t.originalPosition,offset:t.positionAbs,item:t.currentItem,sender:e?e.element:null}}})},"function"==typeof define&&define.amd?define(["jquery","./mouse","../data","../ie","../scroll-parent","../version","../widget"],i):i(jQuery)},{}],26:[function(e,t,n){var i;i=function(p){return p.widget("ui.tooltip",{version:"1.12.1",options:{classes:{"ui-tooltip":"ui-corner-all ui-widget-shadow"},content:function(){var e=p(this).attr("title")||"";return p("<a>").text(e).html()},hide:!0,items:"[title]:not([disabled])",position:{my:"left top+15",at:"left bottom",collision:"flipfit flip"},show:!0,track:!1,close:null,open:null},_addDescribedBy:function(e,t){var n=(e.attr("aria-describedby")||"").split(/\s+/);n.push(t),e.data("ui-tooltip-id",t).attr("aria-describedby",p.trim(n.join(" ")))},_removeDescribedBy:function(e){var t=e.data("ui-tooltip-id"),n=(e.attr("aria-describedby")||"").split(/\s+/),i=p.inArray(t,n);-1!==i&&n.splice(i,1),e.removeData("ui-tooltip-id"),(n=p.trim(n.join(" ")))?e.attr("aria-describedby",n):e.removeAttr("aria-describedby")},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={},this.parents={},this.liveRegion=p("<div>").attr({role:"log","aria-live":"assertive","aria-relevant":"additions"}).appendTo(this.document[0].body),this._addClass(this.liveRegion,null,"ui-helper-hidden-accessible"),this.disabledTitles=p([])},_setOption:function(e,t){var n=this;this._super(e,t),"content"===e&&p.each(this.tooltips,function(e,t){n._updateContent(t.element)})},_setOptionDisabled:function(e){this[e?"_disable":"_enable"]()},_disable:function(){var i=this;p.each(this.tooltips,function(e,t){var n=p.Event("blur");n.target=n.currentTarget=t.element[0],i.close(n,!0)}),this.disabledTitles=this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function(){var e=p(this);if(e.is("[title]"))return e.data("ui-tooltip-title",e.attr("title")).removeAttr("title")}))},_enable:function(){this.disabledTitles.each(function(){var e=p(this);e.data("ui-tooltip-title")&&e.attr("title",e.data("ui-tooltip-title"))}),this.disabledTitles=p([])},open:function(e){var n=this,t=p(e?e.target:this.element).closest(this.options.items);t.length&&!t.data("ui-tooltip-id")&&(t.attr("title")&&t.data("ui-tooltip-title",t.attr("title")),t.data("ui-tooltip-open",!0),e&&"mouseover"===e.type&&t.parents().each(function(){var e,t=p(this);t.data("ui-tooltip-open")&&((e=p.Event("blur")).target=e.currentTarget=this,n.close(e,!0)),t.attr("title")&&(t.uniqueId(),n.parents[this.id]={element:this,title:t.attr("title")},t.attr("title",""))}),this._registerCloseHandlers(e,t),this._updateContent(t,e))},_updateContent:function(t,n){var e,i=this.options.content,r=this,a=n?n.type:null;if("string"==typeof i||i.nodeType||i.jquery)return this._open(n,t,i);(e=i.call(t[0],function(e){r._delay(function(){t.data("ui-tooltip-open")&&(n&&(n.type=a),this._open(n,t,e))})}))&&this._open(n,t,e)},_open:function(e,t,n){var i,r,a,s,o=p.extend({},this.options.position);function l(e){o.of=e,r.is(":hidden")||r.position(o)}n&&((i=this._find(t))?i.tooltip.find(".ui-tooltip-content").html(n):(t.is("[title]")&&(e&&"mouseover"===e.type?t.attr("title",""):t.removeAttr("title")),i=this._tooltip(t),r=i.tooltip,this._addDescribedBy(t,r.attr("id")),r.find(".ui-tooltip-content").html(n),this.liveRegion.children().hide(),(s=p("<div>").html(r.find(".ui-tooltip-content").html())).removeAttr("name").find("[name]").removeAttr("name"),s.removeAttr("id").find("[id]").removeAttr("id"),s.appendTo(this.liveRegion),this.options.track&&e&&/^mouse/.test(e.type)?(this._on(this.document,{mousemove:l}),l(e)):r.position(p.extend({of:t},this.options.position)),r.hide(),this._show(r,this.options.show),this.options.track&&this.options.show&&this.options.show.delay&&(a=this.delayedShow=setInterval(function(){r.is(":visible")&&(l(o.of),clearInterval(a))},p.fx.interval)),this._trigger("open",e,{tooltip:r})))},_registerCloseHandlers:function(e,n){var t={keyup:function(e){var t;e.keyCode===p.ui.keyCode.ESCAPE&&((t=p.Event(e)).currentTarget=n[0],this.close(t,!0))}};n[0]!==this.element[0]&&(t.remove=function(){this._removeTooltip(this._find(n).tooltip)}),e&&"mouseover"!==e.type||(t.mouseleave="close"),e&&"focusin"!==e.type||(t.focusout="close"),this._on(!0,n,t)},close:function(e){var t,n=this,i=p(e?e.currentTarget:this.element),r=this._find(i);r?(t=r.tooltip,r.closing||(clearInterval(this.delayedShow),i.data("ui-tooltip-title")&&!i.attr("title")&&i.attr("title",i.data("ui-tooltip-title")),this._removeDescribedBy(i),r.hiding=!0,t.stop(!0),this._hide(t,this.options.hide,function(){n._removeTooltip(p(this))}),i.removeData("ui-tooltip-open"),this._off(i,"mouseleave focusout keyup"),i[0]!==this.element[0]&&this._off(i,"remove"),this._off(this.document,"mousemove"),e&&"mouseleave"===e.type&&p.each(this.parents,function(e,t){p(t.element).attr("title",t.title),delete n.parents[e]}),r.closing=!0,this._trigger("close",e,{tooltip:t}),r.hiding||(r.closing=!1))):i.removeData("ui-tooltip-open")},_tooltip:function(e){var t=p("<div>").attr("role","tooltip"),n=p("<div>").appendTo(t),i=t.uniqueId().attr("id");return this._addClass(n,"ui-tooltip-content"),this._addClass(t,"ui-tooltip","ui-widget ui-widget-content"),t.appendTo(this._appendTo(e)),this.tooltips[i]={element:e,tooltip:t}},_find:function(e){var t=e.data("ui-tooltip-id");return t?this.tooltips[t]:null},_removeTooltip:function(e){e.remove(),delete this.tooltips[e.attr("id")]},_appendTo:function(e){var t=e.closest(".ui-front, dialog");return t.length||(t=this.document[0].body),t},_destroy:function(){var r=this;p.each(this.tooltips,function(e,t){var n=p.Event("blur"),i=t.element;n.target=n.currentTarget=i[0],r.close(n,!0),p("#"+e).remove(),i.data("ui-tooltip-title")&&(i.attr("title")||i.attr("title",i.data("ui-tooltip-title")),i.removeData("ui-tooltip-title"))}),this.liveRegion.remove()}}),!1!==p.uiBackCompat&&p.widget("ui.tooltip",p.ui.tooltip,{options:{tooltipClass:null},_tooltip:function(){var e=this._superApply(arguments);return this.options.tooltipClass&&e.tooltip.addClass(this.options.tooltipClass),e}}),p.ui.tooltip},"function"==typeof define&&define.amd?define(["jquery","../keycode","../position","../unique-id","../version","../widget"],i):i(jQuery)},{}],27:[function(e,t,n){var i;i=function(u){u.extend(u.fn,{validate:function(e){if(this.length){var i=u.data(this[0],"validator");return i?i:(this.attr("novalidate","novalidate"),i=new u.validator(e,this[0]),u.data(this[0],"validator",i),i.settings.onsubmit&&(this.on("click.validate",":submit",function(e){i.submitButton=e.currentTarget,u(this).hasClass("cancel")&&(i.cancelSubmit=!0),void 0!==u(this).attr("formnovalidate")&&(i.cancelSubmit=!0)}),this.on("submit.validate",function(n){function e(){var e,t;return i.submitButton&&(i.settings.submitHandler||i.formSubmitted)&&(e=u("<input type='hidden'/>").attr("name",i.submitButton.name).val(u(i.submitButton).val()).appendTo(i.currentForm)),!(i.settings.submitHandler&&!i.settings.debug)||(t=i.settings.submitHandler.call(i,i.currentForm,n),e&&e.remove(),void 0!==t&&t)}return i.settings.debug&&n.preventDefault(),i.cancelSubmit?(i.cancelSubmit=!1,e()):i.form()?i.pendingRequest?!(i.formSubmitted=!0):e():(i.focusInvalid(),!1)})),i)}e&&e.debug&&window.console&&console.warn("Nothing selected, can't validate, returning nothing.")},valid:function(){var e,t,n;return u(this[0]).is("form")?e=this.validate().form():(n=[],e=!0,t=u(this[0].form).validate(),this.each(function(){(e=t.element(this)&&e)||(n=n.concat(t.errorList))}),t.errorList=n),e},rules:function(e,t){var n,i,r,a,s,o,l=this[0],p=void 0!==this.attr("contenteditable")&&"false"!==this.attr("contenteditable");if(null!=l&&(!l.form&&p&&(l.form=this.closest("form")[0],l.name=this.attr("name")),null!=l.form)){if(e)switch(i=(n=u.data(l.form,"validator").settings).rules,r=u.validator.staticRules(l),e){case"add":u.extend(r,u.validator.normalizeRule(t)),delete r.messages,i[l.name]=r,t.messages&&(n.messages[l.name]=u.extend(n.messages[l.name],t.messages));break;case"remove":return t?(o={},u.each(t.split(/\s/),function(e,t){o[t]=r[t],delete r[t]}),o):(delete i[l.name],r)}return(a=u.validator.normalizeRules(u.extend({},u.validator.classRules(l),u.validator.attributeRules(l),u.validator.dataRules(l),u.validator.staticRules(l)),l)).required&&(s=a.required,delete a.required,a=u.extend({required:s},a)),a.remote&&(s=a.remote,delete a.remote,a=u.extend(a,{remote:s})),a}}});function n(e){return e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}var i;u.extend(u.expr.pseudos||u.expr[":"],{blank:function(e){return!n(""+u(e).val())},filled:function(e){var t=u(e).val();return null!==t&&!!n(""+t)},unchecked:function(e){return!u(e).prop("checked")}}),u.validator=function(e,t){this.settings=u.extend(!0,{},u.validator.defaults,e),this.currentForm=t,this.init()},u.validator.format=function(n,e){return 1===arguments.length?function(){var e=u.makeArray(arguments);return e.unshift(n),u.validator.format.apply(this,e)}:(void 0===e||(2<arguments.length&&e.constructor!==Array&&(e=u.makeArray(arguments).slice(1)),e.constructor!==Array&&(e=[e]),u.each(e,function(e,t){n=n.replace(new RegExp("\\{"+e+"\\}","g"),function(){return t})})),n)},u.extend(u.validator,{defaults:{messages:{},groups:{},rules:{},errorClass:"error",pendingClass:"pending",validClass:"valid",errorElement:"label",focusCleanup:!1,focusInvalid:!0,errorContainer:u([]),errorLabelContainer:u([]),onsubmit:!0,ignore:":hidden",ignoreTitle:!1,onfocusin:function(e){this.lastActive=e,this.settings.focusCleanup&&(this.settings.unhighlight&&this.settings.unhighlight.call(this,e,this.settings.errorClass,this.settings.validClass),this.hideThese(this.errorsFor(e)))},onfocusout:function(e){this.checkable(e)||!(e.name in this.submitted)&&this.optional(e)||this.element(e)},onkeyup:function(e,t){9===t.which&&""===this.elementValue(e)||-1!==u.inArray(t.keyCode,[16,17,18,20,35,36,37,38,39,40,45,144,225])||(e.name in this.submitted||e.name in this.invalid)&&this.element(e)},onclick:function(e){e.name in this.submitted?this.element(e):e.parentNode.name in this.submitted&&this.element(e.parentNode)},highlight:function(e,t,n){"radio"===e.type?this.findByName(e.name).addClass(t).removeClass(n):u(e).addClass(t).removeClass(n)},unhighlight:function(e,t,n){"radio"===e.type?this.findByName(e.name).removeClass(t).addClass(n):u(e).removeClass(t).addClass(n)}},setDefaults:function(e){u.extend(u.validator.defaults,e)},messages:{required:"This field is required.",remote:"Please fix this field.",email:"Please enter a valid email address.",url:"Please enter a valid URL.",date:"Please enter a valid date.",dateISO:"Please enter a valid date (ISO).",number:"Please enter a valid number.",digits:"Please enter only digits.",equalTo:"Please enter the same value again.",maxlength:u.validator.format("Please enter no more than {0} characters."),minlength:u.validator.format("Please enter at least {0} characters."),rangelength:u.validator.format("Please enter a value between {0} and {1} characters long."),range:u.validator.format("Please enter a value between {0} and {1}."),max:u.validator.format("Please enter a value less than or equal to {0}."),min:u.validator.format("Please enter a value greater than or equal to {0}."),step:u.validator.format("Please enter a multiple of {0}.")},autoCreateRanges:!1,prototype:{init:function(){this.labelContainer=u(this.settings.errorLabelContainer),this.errorContext=this.labelContainer.length&&this.labelContainer||u(this.currentForm),this.containers=u(this.settings.errorContainer).add(this.settings.errorLabelContainer),this.submitted={},this.valueCache={},this.pendingRequest=0,this.pending={},this.invalid={},this.reset();var n,a=this.currentForm,i=this.groups={};function e(e){var t,n,i,r=void 0!==u(this).attr("contenteditable")&&"false"!==u(this).attr("contenteditable");!this.form&&r&&(this.form=u(this).closest("form")[0],this.name=u(this).attr("name")),a===this.form&&(t=u.data(this.form,"validator"),n="on"+e.type.replace(/^validate/,""),(i=t.settings)[n]&&!u(this).is(i.ignore)&&i[n].call(t,this,e))}u.each(this.settings.groups,function(n,e){"string"==typeof e&&(e=e.split(/\s/)),u.each(e,function(e,t){i[t]=n})}),n=this.settings.rules,u.each(n,function(e,t){n[e]=u.validator.normalizeRule(t)}),u(this.currentForm).on("focusin.validate focusout.validate keyup.validate",":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable], [type='button']",e).on("click.validate","select, option, [type='radio'], [type='checkbox']",e),this.settings.invalidHandler&&u(this.currentForm).on("invalid-form.validate",this.settings.invalidHandler)},form:function(){return this.checkForm(),u.extend(this.submitted,this.errorMap),this.invalid=u.extend({},this.errorMap),this.valid()||u(this.currentForm).triggerHandler("invalid-form",[this]),this.showErrors(),this.valid()},checkForm:function(){this.prepareForm();for(var e=0,t=this.currentElements=this.elements();t[e];e++)this.check(t[e]);return this.valid()},element:function(e){var t,n,i=this.clean(e),r=this.validationTargetFor(i),a=this,s=!0;return void 0===r?delete this.invalid[i.name]:(this.prepareElement(r),this.currentElements=u(r),(n=this.groups[r.name])&&u.each(this.groups,function(e,t){t===n&&e!==r.name&&(i=a.validationTargetFor(a.clean(a.findByName(e))))&&i.name in a.invalid&&(a.currentElements.push(i),s=a.check(i)&&s)}),t=!1!==this.check(r),s=s&&t,this.invalid[r.name]=!t,this.numberOfInvalids()||(this.toHide=this.toHide.add(this.containers)),this.showErrors(),u(e).attr("aria-invalid",!t)),s},showErrors:function(t){var n;t&&(n=this,u.extend(this.errorMap,t),this.errorList=u.map(this.errorMap,function(e,t){return{message:e,element:n.findByName(t)[0]}}),this.successList=u.grep(this.successList,function(e){return!(e.name in t)})),this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors()},resetForm:function(){u.fn.resetForm&&u(this.currentForm).resetForm(),this.invalid={},this.submitted={},this.prepareForm(),this.hideErrors();var e=this.elements().removeData("previousValue").removeAttr("aria-invalid");this.resetElements(e)},resetElements:function(e){var t;if(this.settings.unhighlight)for(t=0;e[t];t++)this.settings.unhighlight.call(this,e[t],this.settings.errorClass,""),this.findByName(e[t].name).removeClass(this.settings.validClass);else e.removeClass(this.settings.errorClass).removeClass(this.settings.validClass)},numberOfInvalids:function(){return this.objectLength(this.invalid)},objectLength:function(e){var t,n=0;for(t in e)void 0!==e[t]&&null!==e[t]&&!1!==e[t]&&n++;return n},hideErrors:function(){this.hideThese(this.toHide)},hideThese:function(e){e.not(this.containers).text(""),this.addWrapper(e).hide()},valid:function(){return 0===this.size()},size:function(){return this.errorList.length},focusInvalid:function(){if(this.settings.focusInvalid)try{u(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").trigger("focus").trigger("focusin")}catch(e){}},findLastActive:function(){var t=this.lastActive;return t&&1===u.grep(this.errorList,function(e){return e.element.name===t.name}).length&&t},elements:function(){var n=this,i={};return u(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function(){var e=this.name||u(this).attr("name"),t=void 0!==u(this).attr("contenteditable")&&"false"!==u(this).attr("contenteditable");return!e&&n.settings.debug&&window.console&&console.error("%o has no name assigned",this),t&&(this.form=u(this).closest("form")[0],this.name=e),this.form===n.currentForm&&(!(e in i||!n.objectLength(u(this).rules()))&&(i[e]=!0))})},clean:function(e){return u(e)[0]},errors:function(){var e=this.settings.errorClass.split(" ").join(".");return u(this.settings.errorElement+"."+e,this.errorContext)},resetInternals:function(){this.successList=[],this.errorList=[],this.errorMap={},this.toShow=u([]),this.toHide=u([])},reset:function(){this.resetInternals(),this.currentElements=u([])},prepareForm:function(){this.reset(),this.toHide=this.errors().add(this.containers)},prepareElement:function(e){this.reset(),this.toHide=this.errorsFor(e)},elementValue:function(e){var t,n,i=u(e),r=e.type,a=void 0!==i.attr("contenteditable")&&"false"!==i.attr("contenteditable");return"radio"===r||"checkbox"===r?this.findByName(e.name).filter(":checked").val():"number"===r&&void 0!==e.validity?e.validity.badInput?"NaN":i.val():(t=a?i.text():i.val(),"file"===r?"C:\\fakepath\\"===t.substr(0,12)?t.substr(12):0<=(n=t.lastIndexOf("/"))||0<=(n=t.lastIndexOf("\\"))?t.substr(n+1):t:"string"==typeof t?t.replace(/\r/g,""):t)},check:function(t){t=this.validationTargetFor(this.clean(t));var e,n,i,r,a=u(t).rules(),s=u.map(a,function(e,t){return t}).length,o=!1,l=this.elementValue(t);for(n in"function"==typeof a.normalizer?r=a.normalizer:"function"==typeof this.settings.normalizer&&(r=this.settings.normalizer),r&&(l=r.call(t,l),delete a.normalizer),a){i={method:n,parameters:a[n]};try{if("dependency-mismatch"===(e=u.validator.methods[n].call(this,l,t,i.parameters))&&1===s){o=!0;continue}if(o=!1,"pending"===e)return void(this.toHide=this.toHide.not(this.errorsFor(t)));if(!e)return this.formatAndAdd(t,i),!1}catch(e){throw this.settings.debug&&window.console&&console.log("Exception occurred when checking element "+t.id+", check the '"+i.method+"' method.",e),e instanceof TypeError&&(e.message+=".  Exception occurred when checking element "+t.id+", check the '"+i.method+"' method."),e}}if(!o)return this.objectLength(a)&&this.successList.push(t),!0},customDataMessage:function(e,t){return u(e).data("msg"+t.charAt(0).toUpperCase()+t.substring(1).toLowerCase())||u(e).data("msg")},customMessage:function(e,t){var n=this.settings.messages[e];return n&&(n.constructor===String?n:n[t])},findDefined:function(){for(var e=0;e<arguments.length;e++)if(void 0!==arguments[e])return arguments[e]},defaultMessage:function(e,t){"string"==typeof t&&(t={method:t});var n=this.findDefined(this.customMessage(e.name,t.method),this.customDataMessage(e,t.method),!this.settings.ignoreTitle&&e.title||void 0,u.validator.messages[t.method],"<strong>Warning: No message defined for "+e.name+"</strong>"),i=/\$?\{(\d+)\}/g;return"function"==typeof n?n=n.call(this,t.parameters,e):i.test(n)&&(n=u.validator.format(n.replace(i,"{$1}"),t.parameters)),n},formatAndAdd:function(e,t){var n=this.defaultMessage(e,t);this.errorList.push({message:n,element:e,method:t.method}),this.errorMap[e.name]=n,this.submitted[e.name]=n},addWrapper:function(e){return this.settings.wrapper&&(e=e.add(e.parent(this.settings.wrapper))),e},defaultShowErrors:function(){for(var e,t,n=0;this.errorList[n];n++)t=this.errorList[n],this.settings.highlight&&this.settings.highlight.call(this,t.element,this.settings.errorClass,this.settings.validClass),this.showLabel(t.element,t.message);if(this.errorList.length&&(this.toShow=this.toShow.add(this.containers)),this.settings.success)for(n=0;this.successList[n];n++)this.showLabel(this.successList[n]);if(this.settings.unhighlight)for(n=0,e=this.validElements();e[n];n++)this.settings.unhighlight.call(this,e[n],this.settings.errorClass,this.settings.validClass);this.toHide=this.toHide.not(this.toShow),this.hideErrors(),this.addWrapper(this.toShow).show()},validElements:function(){return this.currentElements.not(this.invalidElements())},invalidElements:function(){return u(this.errorList).map(function(){return this.element})},showLabel:function(e,t){var n,i,r,a,s=this.errorsFor(e),o=this.idOrName(e),l=u(e).attr("aria-describedby");s.length?(s.removeClass(this.settings.validClass).addClass(this.settings.errorClass),s.html(t)):(n=s=u("<"+this.settings.errorElement+">").attr("id",o+"-error").addClass(this.settings.errorClass).html(t||""),this.settings.wrapper&&(n=s.hide().show().wrap("<"+this.settings.wrapper+"/>").parent()),this.labelContainer.length?this.labelContainer.append(n):this.settings.errorPlacement?this.settings.errorPlacement.call(this,n,u(e)):n.insertAfter(e),s.is("label")?s.attr("for",o):0===s.parents("label[for='"+this.escapeCssMeta(o)+"']").length&&(r=s.attr("id"),l?l.match(new RegExp("\\b"+this.escapeCssMeta(r)+"\\b"))||(l+=" "+r):l=r,u(e).attr("aria-describedby",l),(i=this.groups[e.name])&&(a=this,u.each(a.groups,function(e,t){t===i&&u("[name='"+a.escapeCssMeta(e)+"']",a.currentForm).attr("aria-describedby",s.attr("id"))})))),!t&&this.settings.success&&(s.text(""),"string"==typeof this.settings.success?s.addClass(this.settings.success):this.settings.success(s,e)),this.toShow=this.toShow.add(s)},errorsFor:function(e){var t=this.escapeCssMeta(this.idOrName(e)),n=u(e).attr("aria-describedby"),i="label[for='"+t+"'], label[for='"+t+"'] *";return n&&(i=i+", #"+this.escapeCssMeta(n).replace(/\s+/g,", #")),this.errors().filter(i)},escapeCssMeta:function(e){return e.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g,"\\$1")},idOrName:function(e){return this.groups[e.name]||!this.checkable(e)&&e.id||e.name},validationTargetFor:function(e){return this.checkable(e)&&(e=this.findByName(e.name)),u(e).not(this.settings.ignore)[0]},checkable:function(e){return/radio|checkbox/i.test(e.type)},findByName:function(e){return u(this.currentForm).find("[name='"+this.escapeCssMeta(e)+"']")},getLength:function(e,t){switch(t.nodeName.toLowerCase()){case"select":return u("option:selected",t).length;case"input":if(this.checkable(t))return this.findByName(t.name).filter(":checked").length}return e.length},depend:function(e,t){return!this.dependTypes[typeof e]||this.dependTypes[typeof e](e,t)},dependTypes:{boolean:function(e){return e},string:function(e,t){return!!u(e,t.form).length},function:function(e,t){return e(t)}},optional:function(e){var t=this.elementValue(e);return!u.validator.methods.required.call(this,t,e)&&"dependency-mismatch"},startRequest:function(e){this.pending[e.name]||(this.pendingRequest++,u(e).addClass(this.settings.pendingClass),this.pending[e.name]=!0)},stopRequest:function(e,t){this.pendingRequest--,this.pendingRequest<0&&(this.pendingRequest=0),delete this.pending[e.name],u(e).removeClass(this.settings.pendingClass),t&&0===this.pendingRequest&&this.formSubmitted&&this.form()?(u(this.currentForm).submit(),this.submitButton&&u("input:hidden[name='"+this.submitButton.name+"']",this.currentForm).remove(),this.formSubmitted=!1):!t&&0===this.pendingRequest&&this.formSubmitted&&(u(this.currentForm).triggerHandler("invalid-form",[this]),this.formSubmitted=!1)},previousValue:function(e,t){return t="string"==typeof t&&t||"remote",u.data(e,"previousValue")||u.data(e,"previousValue",{old:null,valid:!0,message:this.defaultMessage(e,{method:t})})},destroy:function(){this.resetForm(),u(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur")}},classRuleSettings:{required:{required:!0},email:{email:!0},url:{url:!0},date:{date:!0},dateISO:{dateISO:!0},number:{number:!0},digits:{digits:!0},creditcard:{creditcard:!0}},addClassRules:function(e,t){e.constructor===String?this.classRuleSettings[e]=t:u.extend(this.classRuleSettings,e)},classRules:function(e){var t={},n=u(e).attr("class");return n&&u.each(n.split(" "),function(){this in u.validator.classRuleSettings&&u.extend(t,u.validator.classRuleSettings[this])}),t},normalizeAttributeRule:function(e,t,n,i){/min|max|step/.test(n)&&(null===t||/number|range|text/.test(t))&&(i=Number(i),isNaN(i)&&(i=void 0)),i||0===i?e[n]=i:t===n&&"range"!==t&&(e[n]=!0)},attributeRules:function(e){var t,n,i={},r=u(e),a=e.getAttribute("type");for(t in u.validator.methods)n="required"===t?(""===(n=e.getAttribute(t))&&(n=!0),!!n):r.attr(t),this.normalizeAttributeRule(i,a,t,n);return i.maxlength&&/-1|2147483647|524288/.test(i.maxlength)&&delete i.maxlength,i},dataRules:function(e){var t,n,i={},r=u(e),a=e.getAttribute("type");for(t in u.validator.methods)""===(n=r.data("rule"+t.charAt(0).toUpperCase()+t.substring(1).toLowerCase()))&&(n=!0),this.normalizeAttributeRule(i,a,t,n);return i},staticRules:function(e){var t={},n=u.data(e.form,"validator");return n.settings.rules&&(t=u.validator.normalizeRule(n.settings.rules[e.name])||{}),t},normalizeRules:function(i,r){return u.each(i,function(e,t){if(!1!==t){if(t.param||t.depends){var n=!0;switch(typeof t.depends){case"string":n=!!u(t.depends,r.form).length;break;case"function":n=t.depends.call(r,r)}n?i[e]=void 0===t.param||t.param:(u.data(r.form,"validator").resetElements(u(r)),delete i[e])}}else delete i[e]}),u.each(i,function(e,t){i[e]="function"==typeof t&&"normalizer"!==e?t(r):t}),u.each(["minlength","maxlength"],function(){i[this]&&(i[this]=Number(i[this]))}),u.each(["rangelength","range"],function(){var e;i[this]&&(Array.isArray(i[this])?i[this]=[Number(i[this][0]),Number(i[this][1])]:"string"==typeof i[this]&&(e=i[this].replace(/[\[\]]/g,"").split(/[\s,]+/),i[this]=[Number(e[0]),Number(e[1])]))}),u.validator.autoCreateRanges&&(null!=i.min&&null!=i.max&&(i.range=[i.min,i.max],delete i.min,delete i.max),null!=i.minlength&&null!=i.maxlength&&(i.rangelength=[i.minlength,i.maxlength],delete i.minlength,delete i.maxlength)),i},normalizeRule:function(e){var t;return"string"==typeof e&&(t={},u.each(e.split(/\s/),function(){t[this]=!0}),e=t),e},addMethod:function(e,t,n){u.validator.methods[e]=t,u.validator.messages[e]=void 0!==n?n:u.validator.messages[e],t.length<3&&u.validator.addClassRules(e,u.validator.normalizeRule(e))},methods:{required:function(e,t,n){if(!this.depend(n,t))return"dependency-mismatch";if("select"!==t.nodeName.toLowerCase())return this.checkable(t)?0<this.getLength(e,t):null!=e&&0<e.length;var i=u(t).val();return i&&0<i.length},email:function(e,t){return this.optional(t)||/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(e)},url:function(e,t){return this.optional(t)||/^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(e)},date:(i=!1,function(e,t){return i||(i=!0,this.settings.debug&&window.console&&console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\nPlease don't use it, since it relies on the Date constructor, which\nbehaves very differently across browsers and locales. Use `dateISO`\ninstead or one of the locale specific methods in `localizations/`\nand `additional-methods.js`.")),this.optional(t)||!/Invalid|NaN/.test(new Date(e).toString())}),dateISO:function(e,t){return this.optional(t)||/^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(e)},number:function(e,t){return this.optional(t)||/^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(e)},digits:function(e,t){return this.optional(t)||/^\d+$/.test(e)},minlength:function(e,t,n){var i=Array.isArray(e)?e.length:this.getLength(e,t);return this.optional(t)||n<=i},maxlength:function(e,t,n){var i=Array.isArray(e)?e.length:this.getLength(e,t);return this.optional(t)||i<=n},rangelength:function(e,t,n){var i=Array.isArray(e)?e.length:this.getLength(e,t);return this.optional(t)||i>=n[0]&&i<=n[1]},min:function(e,t,n){return this.optional(t)||n<=e},max:function(e,t,n){return this.optional(t)||e<=n},range:function(e,t,n){return this.optional(t)||e>=n[0]&&e<=n[1]},step:function(e,t,n){function i(e){var t=(""+e).match(/(?:\.(\d+))?$/);return t&&t[1]?t[1].length:0}function r(e){return Math.round(e*Math.pow(10,a))}var a,s=u(t).attr("type"),o="Step attribute on input type "+s+" is not supported.",l=new RegExp("\\b"+s+"\\b"),p=!0;if(s&&!l.test(["text","number","range"].join()))throw new Error(o);return a=i(n),(i(e)>a||r(e)%r(n)!=0)&&(p=!1),this.optional(t)||p},equalTo:function(e,t,n){var i=u(n);return this.settings.onfocusout&&i.not(".validate-equalTo-blur").length&&i.addClass("validate-equalTo-blur").on("blur.validate-equalTo",function(){u(t).valid()}),e===i.val()},remote:function(a,s,e,o){if(this.optional(s))return"dependency-mismatch";o="string"==typeof o&&o||"remote";var l,t,n,p=this.previousValue(s,o);return this.settings.messages[s.name]||(this.settings.messages[s.name]={}),p.originalMessage=p.originalMessage||this.settings.messages[s.name][o],this.settings.messages[s.name][o]=p.message,e="string"==typeof e?{url:e}:e,n=u.param(u.extend({data:a},e.data)),p.old===n?p.valid:(p.old=n,(l=this).startRequest(s),(t={})[s.name]=a,u.ajax(u.extend(!0,{mode:"abort",port:"validate"+s.name,dataType:"json",data:t,context:l.currentForm,success:function(e){var t,n,i,r=!0===e||"true"===e;l.settings.messages[s.name][o]=p.originalMessage,r?(i=l.formSubmitted,l.resetInternals(),l.toHide=l.errorsFor(s),l.formSubmitted=i,l.successList.push(s),l.invalid[s.name]=!1,l.showErrors()):(t={},n=e||l.defaultMessage(s,{method:o,parameters:a}),t[s.name]=p.message=n,l.invalid[s.name]=!0,l.showErrors(t)),p.valid=r,l.stopRequest(s,r)}},e)),"pending")}}});var r,a={};return u.ajaxPrefilter?u.ajaxPrefilter(function(e,t,n){var i=e.port;"abort"===e.mode&&(a[i]&&a[i].abort(),a[i]=n)}):(r=u.ajax,u.ajax=function(e){var t=("mode"in e?e:u.ajaxSettings).mode,n=("port"in e?e:u.ajaxSettings).port;return"abort"===t?(a[n]&&a[n].abort(),a[n]=r.apply(this,arguments),a[n]):r.apply(this,arguments)}),u},"function"==typeof define&&define.amd?define(["jquery"],i):"object"==typeof t&&t.exports?t.exports=i(e("jquery")):i(jQuery)},{jquery:29}],28:[function(e,t,n){var i;i=function(d){var i=/\+/g;function m(e){return g.raw?e:encodeURIComponent(e)}function f(e,t){var n=g.raw?e:function(e){0===e.indexOf('"')&&(e=e.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return e=decodeURIComponent(e.replace(i," ")),g.json?JSON.parse(e):e}catch(e){}}(e);return d.isFunction(t)?t(n):n}var g=d.cookie=function(e,t,n){var i,r,a;if(void 0!==t&&!d.isFunction(t))return"number"==typeof(n=d.extend({},g.defaults,n)).expires&&(i=n.expires,(r=n.expires=new Date).setTime(+r+864e5*i)),document.cookie=[m(e),"=",(a=t,m(g.json?JSON.stringify(a):String(a))),n.expires?"; expires="+n.expires.toUTCString():"",n.path?"; path="+n.path:"",n.domain?"; domain="+n.domain:"",n.secure?"; secure":""].join("");for(var s,o=e?void 0:{},l=document.cookie?document.cookie.split("; "):[],p=0,u=l.length;p<u;p++){var c=l[p].split("="),h=(s=c.shift(),g.raw?s:decodeURIComponent(s)),A=c.join("=");if(e&&e===h){o=f(A,t);break}e||void 0===(A=f(A))||(o[h]=A)}return o};g.defaults={},d.removeCookie=function(e,t){return void 0!==d.cookie(e)&&(d.cookie(e,"",d.extend({},t,{expires:-1})),!d.cookie(e))}},"function"==typeof define&&define.amd?define(["jquery"],i):i("object"==typeof n?e("jquery"):jQuery)},{jquery:29}],29:[function(e,n,t){!function(e,t){"use strict";"object"==typeof n&&"object"==typeof n.exports?n.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(B,e){"use strict";function m(e){return null!=e&&e===e.window}var t=[],i=Object.getPrototypeOf,o=t.slice,f=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,r=t.indexOf,n={},a=n.toString,g=n.hasOwnProperty,s=g.toString,p=s.call(Object),v={},b=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},K=B.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function C(e,t,n){var i,r,a=(n=n||K).createElement("script");if(a.text=e,t)for(i in u)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&a.setAttribute(i,r);n.head.appendChild(a).parentNode.removeChild(a)}function y(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?n[a.call(e)]||"object":typeof e}var _=function(e,t){return new _.fn.init(e,t)};function c(e){var t=!!e&&"length"in e&&e.length,n=y(e);return!b(e)&&!m(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}_.fn=_.prototype={jquery:"3.6.0",constructor:_,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=_.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return _.each(this,e)},map:function(n){return this.pushStack(_.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(_.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(_.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},_.extend=_.fn.extend=function(){var e,t,n,i,r,a,s=arguments[0]||{},o=1,l=arguments.length,p=!1;for("boolean"==typeof s&&(p=s,s=arguments[o]||{},o++),"object"==typeof s||b(s)||(s={}),o===l&&(s=this,o--);o<l;o++)if(null!=(e=arguments[o]))for(t in e)i=e[t],"__proto__"!==t&&s!==i&&(p&&i&&(_.isPlainObject(i)||(r=Array.isArray(i)))?(n=s[t],a=r&&!Array.isArray(n)?[]:r||_.isPlainObject(n)?n:{},r=!1,s[t]=_.extend(p,a,i)):void 0!==i&&(s[t]=i));return s},_.extend({expando:"jQuery"+("3.6.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==a.call(e))&&(!(t=i(e))||"function"==typeof(n=g.call(t,"constructor")&&t.constructor)&&s.call(n)===p)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){C(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(c(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(c(Object(e))?_.merge(n,"string"==typeof e?[e]:e):l.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:r.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,a=e.length,s=!n;r<a;r++)!t(e[r],r)!=s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,a=0,s=[];if(c(e))for(i=e.length;a<i;a++)null!=(r=t(e[a],a,n))&&s.push(r);else for(a in e)null!=(r=t(e[a],a,n))&&s.push(r);return f(s)},guid:1,support:v}),"function"==typeof Symbol&&(_.fn[Symbol.iterator]=t[Symbol.iterator]),_.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){n["[object "+t+"]"]=t.toLowerCase()});var h=function(n){function c(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(65536+n):String.fromCharCode(n>>10|55296,1023&n|56320))}function r(){Q()}var e,A,C,a,s,d,h,m,y,l,p,Q,B,o,K,f,u,g,v,_="sizzle"+ +new Date,b=n.document,w=0,i=0,q=le(),U=le(),Y=le(),W=le(),D=function(e,t){return e===t&&(p=!0),0},k={}.hasOwnProperty,t=[],G=t.pop,F=t.push,x=t.push,O=t.slice,S=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},E="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",P="[\\x20\\t\\r\\n\\f]",T="(?:\\\\[\\da-fA-F]{1,6}"+P+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",M="\\["+P+"*("+T+")(?:"+P+"*([*^$|!~]?=)"+P+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+T+"))|)"+P+"*\\]",Z=":("+T+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",R=new RegExp(P+"+","g"),I=new RegExp("^"+P+"+|((?:^|[^\\\\])(?:\\\\.)*)"+P+"+$","g"),j=new RegExp("^"+P+"*,"+P+"*"),N=new RegExp("^"+P+"*([>+~]|"+P+")"+P+"*"),H=new RegExp(P+"|>"),V=new RegExp(Z),L=new RegExp("^"+T+"$"),z={ID:new RegExp("^#("+T+")"),CLASS:new RegExp("^\\.("+T+")"),TAG:new RegExp("^("+T+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+Z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+P+"*(even|odd|(([+-]|)(\\d*)n|)"+P+"*(?:([+-]|)"+P+"*(\\d+)|))"+P+"*\\)|)","i"),bool:new RegExp("^(?:"+E+")$","i"),needsContext:new RegExp("^"+P+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+P+"*((?:-\\d)?\\d*)"+P+"*\\)|)(?=[^-]|$)","i")},J=/HTML$/i,$=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,ie=new RegExp("\\\\[\\da-fA-F]{1,6}"+P+"?|\\\\([^\\r\\n\\f])","g"),re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},se=ve(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{x.apply(t=O.call(b.childNodes),b.childNodes),t[b.childNodes.length].nodeType}catch(e){x={apply:t.length?function(e,t){F.apply(e,O.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(t,e,n,i){var r,a,s,o,l,p,u,c=e&&e.ownerDocument,h=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==h&&9!==h&&11!==h)return n;if(!i&&(Q(e),e=e||B,K)){if(11!==h&&(l=te.exec(t)))if(r=l[1]){if(9===h){if(!(s=e.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(c&&(s=c.getElementById(r))&&v(e,s)&&s.id===r)return n.push(s),n}else{if(l[2])return x.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&A.getElementsByClassName&&e.getElementsByClassName)return x.apply(n,e.getElementsByClassName(r)),n}if(A.qsa&&!W[t+" "]&&(!f||!f.test(t))&&(1!==h||"object"!==e.nodeName.toLowerCase())){if(u=t,c=e,1===h&&(H.test(t)||N.test(t))){for((c=ne.test(t)&&me(e.parentNode)||e)===e&&A.scope||((o=e.getAttribute("id"))?o=o.replace(re,ae):e.setAttribute("id",o=_)),a=(p=d(t)).length;a--;)p[a]=(o?"#"+o:":scope")+" "+ge(p[a]);u=p.join(",")}try{return x.apply(n,c.querySelectorAll(u)),n}catch(e){W(t,!0)}finally{o===_&&e.removeAttribute("id")}}}return m(t.replace(I,"$1"),e,n,i)}function le(){var n=[];function i(e,t){return n.push(e+" ")>C.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function pe(e){return e[_]=!0,e}function ue(e){var t=B.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),i=n.length;i--;)C.attrHandle[n[i]]=t}function he(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function Ae(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&se(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function de(s){return pe(function(a){return a=+a,pe(function(e,t){for(var n,i=s([],e.length,a),r=i.length;r--;)e[n=i[r]]&&(e[n]=!(t[n]=e[n]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in A=oe.support={},s=oe.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!J.test(t||n&&n.nodeName||"HTML")},Q=oe.setDocument=function(e){var t,n,i=e?e.ownerDocument||e:b;return i!=B&&9===i.nodeType&&i.documentElement&&(o=(B=i).documentElement,K=!s(B),b!=B&&(n=B.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",r,!1):n.attachEvent&&n.attachEvent("onunload",r)),A.scope=ue(function(e){return o.appendChild(e).appendChild(B.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),A.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),A.getElementsByTagName=ue(function(e){return e.appendChild(B.createComment("")),!e.getElementsByTagName("*").length}),A.getElementsByClassName=ee.test(B.getElementsByClassName),A.getById=ue(function(e){return o.appendChild(e).id=_,!B.getElementsByName||!B.getElementsByName(_).length}),A.getById?(C.filter.ID=function(e){var t=e.replace(ie,c);return function(e){return e.getAttribute("id")===t}},C.find.ID=function(e,t){if(void 0!==t.getElementById&&K){var n=t.getElementById(e);return n?[n]:[]}}):(C.filter.ID=function(e){var n=e.replace(ie,c);return function(e){var t=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},C.find.ID=function(e,t){if(void 0!==t.getElementById&&K){var n,i,r,a=t.getElementById(e);if(a){if((n=a.getAttributeNode("id"))&&n.value===e)return[a];for(r=t.getElementsByName(e),i=0;a=r[i++];)if((n=a.getAttributeNode("id"))&&n.value===e)return[a]}return[]}}),C.find.TAG=A.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):A.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,a=t.getElementsByTagName(e);if("*"!==e)return a;for(;n=a[r++];)1===n.nodeType&&i.push(n);return i},C.find.CLASS=A.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&K)return t.getElementsByClassName(e)},u=[],f=[],(A.qsa=ee.test(B.querySelectorAll))&&(ue(function(e){var t;o.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&f.push("[*^$]="+P+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||f.push("\\["+P+"*(?:value|"+E+")"),e.querySelectorAll("[id~="+_+"-]").length||f.push("~="),(t=B.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||f.push("\\["+P+"*name"+P+"*="+P+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||f.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||f.push(".#.+[+~]"),e.querySelectorAll("\\\f"),f.push("[\\r\\n\\f]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=B.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&f.push("name"+P+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&f.push(":enabled",":disabled"),o.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&f.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),f.push(",.*:")})),(A.matchesSelector=ee.test(g=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ue(function(e){A.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),u.push("!=",Z)}),f=f.length&&new RegExp(f.join("|")),u=u.length&&new RegExp(u.join("|")),t=ee.test(o.compareDocumentPosition),v=t||ee.test(o.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return p=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!A.sortDetached&&t.compareDocumentPosition(e)===n?e==B||e.ownerDocument==b&&v(b,e)?-1:t==B||t.ownerDocument==b&&v(b,t)?1:l?S(l,e)-S(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return p=!0,0;var n,i=0,r=e.parentNode,a=t.parentNode,s=[e],o=[t];if(!r||!a)return e==B?-1:t==B?1:r?-1:a?1:l?S(l,e)-S(l,t):0;if(r===a)return he(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;s[i]===o[i];)i++;return i?he(s[i],o[i]):s[i]==b?-1:o[i]==b?1:0}),B},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(Q(e),A.matchesSelector&&K&&!W[t+" "]&&(!u||!u.test(t))&&(!f||!f.test(t)))try{var n=g.call(e,t);if(n||A.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){W(t,!0)}return 0<oe(t,B,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!=B&&Q(e),v(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=B&&Q(e);var n=C.attrHandle[t.toLowerCase()],i=n&&k.call(C.attrHandle,t.toLowerCase())?n(e,t,!K):void 0;return void 0!==i?i:A.attributes||!K?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},oe.escape=function(e){return(e+"").replace(re,ae)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,n=[],i=0,r=0;if(p=!A.detectDuplicates,l=!A.sortStable&&e.slice(0),e.sort(D),p){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)e.splice(n[i],1)}return l=null,e},a=oe.getText=function(e){var t,n="",i=0,r=e.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===r||4===r)return e.nodeValue}else for(;t=e[i++];)n+=a(t);return n},(C=oe.selectors={cacheLength:50,createPseudo:pe,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,c),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,c),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=d(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,c).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=q[e+" "];return t||(t=new RegExp("(^|"+P+")"+e+"("+P+"|$)"))&&q(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,i,r){return function(e){var t=oe.attr(e,n);return null==t?"!="===i:!i||(t+="","="===i?t===r:"!="===i?t!==r:"^="===i?r&&0===t.indexOf(r):"*="===i?r&&-1<t.indexOf(r):"$="===i?r&&t.slice(-r.length)===r:"~="===i?-1<(" "+t.replace(R," ")+" ").indexOf(r):"|="===i&&(t===r||t.slice(0,r.length+1)===r+"-"))}},CHILD:function(d,e,t,m,f){var g="nth"!==d.slice(0,3),v="last"!==d.slice(-4),b="of-type"===e;return 1===m&&0===f?function(e){return!!e.parentNode}:function(e,t,n){var i,r,a,s,o,l,p=g!=v?"nextSibling":"previousSibling",u=e.parentNode,c=b&&e.nodeName.toLowerCase(),h=!n&&!b,A=!1;if(u){if(g){for(;p;){for(s=e;s=s[p];)if(b?s.nodeName.toLowerCase()===c:1===s.nodeType)return!1;l=p="only"===d&&!l&&"nextSibling"}return!0}if(l=[v?u.firstChild:u.lastChild],v&&h){for(A=(o=(i=(r=(a=(s=u)[_]||(s[_]={}))[s.uniqueID]||(a[s.uniqueID]={}))[d]||[])[0]===w&&i[1])&&i[2],s=o&&u.childNodes[o];s=++o&&s&&s[p]||(A=o=0)||l.pop();)if(1===s.nodeType&&++A&&s===e){r[d]=[w,o,A];break}}else if(h&&(A=o=(i=(r=(a=(s=e)[_]||(s[_]={}))[s.uniqueID]||(a[s.uniqueID]={}))[d]||[])[0]===w&&i[1]),!1===A)for(;(s=++o&&s&&s[p]||(A=o=0)||l.pop())&&((b?s.nodeName.toLowerCase()!==c:1!==s.nodeType)||!++A||(h&&((r=(a=s[_]||(s[_]={}))[s.uniqueID]||(a[s.uniqueID]={}))[d]=[w,A]),s!==e)););return(A-=f)===m||A%m==0&&0<=A/m}}},PSEUDO:function(e,a){var t,s=C.pseudos[e]||C.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return s[_]?s(a):1<s.length?(t=[e,e,"",a],C.setFilters.hasOwnProperty(e.toLowerCase())?pe(function(e,t){for(var n,i=s(e,a),r=i.length;r--;)e[n=S(e,i[r])]=!(t[n]=i[r])}):function(e){return s(e,0,t)}):s}},pseudos:{not:pe(function(e){var i=[],r=[],o=h(e.replace(I,"$1"));return o[_]?pe(function(e,t,n,i){for(var r,a=o(e,null,i,[]),s=e.length;s--;)(r=a[s])&&(e[s]=!(t[s]=r))}):function(e,t,n){return i[0]=e,o(i,null,n,r),i[0]=null,!r.pop()}}),has:pe(function(t){return function(e){return 0<oe(t,e).length}}),contains:pe(function(t){return t=t.replace(ie,c),function(e){return-1<(e.textContent||a(e)).indexOf(t)}}),lang:pe(function(n){return L.test(n||"")||oe.error("unsupported lang: "+n),n=n.replace(ie,c).toLowerCase(),function(e){var t;do{if(t=K?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===o},focus:function(e){return e===B.activeElement&&(!B.hasFocus||B.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:Ae(!1),disabled:Ae(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return $.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:de(function(){return[0]}),last:de(function(e,t){return[t-1]}),eq:de(function(e,t,n){return[n<0?n+t:n]}),even:de(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:de(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:de(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:de(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=C.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})C.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function fe(){}function ge(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ve(o,e,t){var l=e.dir,p=e.next,u=p||l,c=t&&"parentNode"===u,h=i++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||c)return o(e,t,n);return!1}:function(e,t,n){var i,r,a,s=[w,h];if(n){for(;e=e[l];)if((1===e.nodeType||c)&&o(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||c)if(r=(a=e[_]||(e[_]={}))[e.uniqueID]||(a[e.uniqueID]={}),p&&p===e.nodeName.toLowerCase())e=e[l]||e;else{if((i=r[u])&&i[0]===w&&i[1]===h)return s[2]=i[2];if((r[u]=s)[2]=o(e,t,n))return!0}return!1}}function be(r){return 1<r.length?function(e,t,n){for(var i=r.length;i--;)if(!r[i](e,t,n))return!1;return!0}:r[0]}function Ce(e,t,n,i,r){for(var a,s=[],o=0,l=e.length,p=null!=t;o<l;o++)(a=e[o])&&(n&&!n(a,i,r)||(s.push(a),p&&t.push(o)));return s}function ye(A,d,m,f,g,e){return f&&!f[_]&&(f=ye(f)),g&&!g[_]&&(g=ye(g,e)),pe(function(e,t,n,i){var r,a,s,o=[],l=[],p=t.length,u=e||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(d||"*",n.nodeType?[n]:n,[]),c=!A||!e&&d?u:Ce(u,o,A,n,i),h=m?g||(e?A:p||f)?[]:t:c;if(m&&m(c,h,n,i),f)for(r=Ce(h,l),f(r,[],n,i),a=r.length;a--;)(s=r[a])&&(h[l[a]]=!(c[l[a]]=s));if(e){if(g||A){if(g){for(r=[],a=h.length;a--;)(s=h[a])&&r.push(c[a]=s);g(null,h=[],r,i)}for(a=h.length;a--;)(s=h[a])&&-1<(r=g?S(e,s):o[a])&&(e[r]=!(t[r]=s))}}else h=Ce(h===t?h.splice(p,h.length):h),g?g(null,t,h,i):x.apply(t,h)})}function Qe(f,g){function e(e,t,n,i,r){var a,s,o,l=0,p="0",u=e&&[],c=[],h=y,A=e||b&&C.find.TAG("*",r),d=w+=null==h?1:Math.random()||.1,m=A.length;for(r&&(y=t==B||t||r);p!==m&&null!=(a=A[p]);p++){if(b&&a){for(s=0,t||a.ownerDocument==B||(Q(a),n=!K);o=f[s++];)if(o(a,t||B,n)){i.push(a);break}r&&(w=d)}v&&((a=!o&&a)&&l--,e&&u.push(a))}if(l+=p,v&&p!==l){for(s=0;o=g[s++];)o(u,c,t,n);if(e){if(0<l)for(;p--;)u[p]||c[p]||(c[p]=G.call(i));c=Ce(c)}x.apply(i,c),r&&!e&&0<c.length&&1<l+g.length&&oe.uniqueSort(i)}return r&&(w=d,y=h),u}var v=0<g.length,b=0<f.length;return v?pe(e):e}return fe.prototype=C.filters=C.pseudos,C.setFilters=new fe,d=oe.tokenize=function(e,t){var n,i,r,a,s,o,l,p=U[e+" "];if(p)return t?0:p.slice(0);for(s=e,o=[],l=C.preFilter;s;){for(a in n&&!(i=j.exec(s))||(i&&(s=s.slice(i[0].length)||s),o.push(r=[])),n=!1,(i=N.exec(s))&&(n=i.shift(),r.push({value:n,type:i[0].replace(I," ")}),s=s.slice(n.length)),C.filter)!(i=z[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),r.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):U(e,o).slice(0)},h=oe.compile=function(e,t){var n,i=[],r=[],a=Y[e+" "];if(!a){for(n=(t=t||d(e)).length;n--;)(a=function e(t){for(var r,n,i,a=t.length,s=C.relative[t[0].type],o=s||C.relative[" "],l=s?1:0,p=ve(function(e){return e===r},o,!0),u=ve(function(e){return-1<S(r,e)},o,!0),c=[function(e,t,n){var i=!s&&(n||t!==y)||((r=t).nodeType?p:u)(e,t,n);return r=null,i}];l<a;l++)if(n=C.relative[t[l].type])c=[ve(be(c),n)];else{if((n=C.filter[t[l].type].apply(null,t[l].matches))[_]){for(i=++l;i<a&&!C.relative[t[i].type];i++);return ye(1<l&&be(c),1<l&&ge(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(I,"$1"),n,l<i&&e(t.slice(l,i)),i<a&&e(t=t.slice(i)),i<a&&ge(t))}c.push(n)}return be(c)}(t[n]))[_]?i.push(a):r.push(a);(a=Y(e,Qe(r,i))).selector=e}return a},m=oe.select=function(e,t,n,i){var r,a,s,o,l,p="function"==typeof e&&e,u=!i&&d(e=p.selector||e);if(n=n||[],1===u.length){if(2<(a=u[0]=u[0].slice(0)).length&&"ID"===(s=a[0]).type&&9===t.nodeType&&K&&C.relative[a[1].type]){if(!(t=(C.find.ID(s.matches[0].replace(ie,c),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(a.shift().value.length)}for(r=z.needsContext.test(e)?0:a.length;r--&&(s=a[r],!C.relative[o=s.type]);)if((l=C.find[o])&&(i=l(s.matches[0].replace(ie,c),ne.test(a[0].type)&&me(t.parentNode)||t))){if(a.splice(r,1),!(e=i.length&&ge(a)))return x.apply(n,i),n;break}}return(p||h(e,u))(i,t,!K,n,!t||ne.test(e)&&me(t.parentNode)||t),n},A.sortStable=_.split("").sort(D).join("")===_,A.detectDuplicates=!!p,Q(),A.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(B.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||ce("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),A.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||ce("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||ce(E,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),oe}(B);_.find=h,_.expr=h.selectors,_.expr[":"]=_.expr.pseudos,_.uniqueSort=_.unique=h.uniqueSort,_.text=h.getText,_.isXMLDoc=h.isXML,_.contains=h.contains,_.escapeSelector=h.escape;function A(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&_(e).is(n))break;i.push(e)}return i}function d(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var Q=_.expr.match.needsContext;function w(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var q=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function U(e,n,i){return b(n)?_.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?_.grep(e,function(e){return e===n!==i}):"string"!=typeof n?_.grep(e,function(e){return-1<r.call(n,e)!==i}):_.filter(n,e,i)}_.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?_.find.matchesSelector(i,e)?[i]:[]:_.find.matches(e,_.grep(t,function(e){return 1===e.nodeType}))},_.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(_(e).filter(function(){for(t=0;t<i;t++)if(_.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)_.find(e,r[t],n);return 1<i?_.uniqueSort(n):n},filter:function(e){return this.pushStack(U(this,e||[],!1))},not:function(e){return this.pushStack(U(this,e||[],!0))},is:function(e){return!!U(this,"string"==typeof e&&Q.test(e)?_(e):e||[],!1).length}});var Y,W=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(_.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||Y,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):b(e)?void 0!==n.ready?n.ready(e):e(_):_.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:W.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof _?t[0]:t,_.merge(this,_.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:K,!0)),q.test(i[1])&&_.isPlainObject(t))for(i in t)b(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=K.getElementById(i[2]))&&(this[0]=r,this.length=1),this}).prototype=_.fn,Y=_(K);var D=/^(?:parents|prev(?:Until|All))/,k={children:!0,contents:!0,next:!0,prev:!0};function G(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}_.fn.extend({has:function(e){var t=_(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(_.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,a=[],s="string"!=typeof e&&_(e);if(!Q.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&_.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(1<a.length?_.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?r.call(_(e),this[0]):r.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(_.uniqueSort(_.merge(this.get(),_(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),_.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return A(e,"parentNode")},parentsUntil:function(e,t,n){return A(e,"parentNode",n)},next:function(e){return G(e,"nextSibling")},prev:function(e){return G(e,"previousSibling")},nextAll:function(e){return A(e,"nextSibling")},prevAll:function(e){return A(e,"previousSibling")},nextUntil:function(e,t,n){return A(e,"nextSibling",n)},prevUntil:function(e,t,n){return A(e,"previousSibling",n)},siblings:function(e){return d((e.parentNode||{}).firstChild,e)},children:function(e){return d(e.firstChild)},contents:function(e){return null!=e.contentDocument&&i(e.contentDocument)?e.contentDocument:(w(e,"template")&&(e=e.content||e),_.merge([],e.childNodes))}},function(i,r){_.fn[i]=function(e,t){var n=_.map(this,r,e);return"Until"!==i.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=_.filter(t,n)),1<this.length&&(k[i]||_.uniqueSort(n),D.test(i)&&n.reverse()),this.pushStack(n)}});var F=/[^\x20\t\r\n\f]+/g;function x(e){return e}function O(e){throw e}function S(e,t,n,i){var r;try{e&&b(r=e.promise)?r.call(e).done(t).fail(n):e&&b(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}_.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},_.each(e.match(F)||[],function(e,t){n[t]=!0}),n):_.extend({},i);function r(){for(o=o||i.once,s=a=!0;p.length;u=-1)for(t=p.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&i.stopOnFalse&&(u=l.length,t=!1);i.memory||(t=!1),a=!1,o&&(l=t?[]:"")}var a,t,s,o,l=[],p=[],u=-1,c={add:function(){return l&&(t&&!a&&(u=l.length-1,p.push(t)),function n(e){_.each(e,function(e,t){b(t)?i.unique&&c.has(t)||l.push(t):t&&t.length&&"string"!==y(t)&&n(t)})}(arguments),t&&!a&&r()),this},remove:function(){return _.each(arguments,function(e,t){for(var n;-1<(n=_.inArray(t,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<_.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return o=p=[],l=t="",this},disabled:function(){return!l},lock:function(){return o=p=[],t||a||(l=t=""),this},locked:function(){return!!o},fireWith:function(e,t){return o||(t=[e,(t=t||[]).slice?t.slice():t],p.push(t),a||r()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!s}};return c},_.extend({Deferred:function(e){var a=[["notify","progress",_.Callbacks("memory"),_.Callbacks("memory"),2],["resolve","done",_.Callbacks("once memory"),_.Callbacks("once memory"),0,"resolved"],["reject","fail",_.Callbacks("once memory"),_.Callbacks("once memory"),1,"rejected"]],r="pending",s={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var r=arguments;return _.Deferred(function(i){_.each(a,function(e,t){var n=b(r[t[4]])&&r[t[4]];o[t[1]](function(){var e=n&&n.apply(this,arguments);e&&b(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),r=null}).promise()},then:function(t,n,i){var l=0;function p(r,a,s,o){return function(){function e(){var e,t;if(!(r<l)){if((e=s.apply(n,i))===a.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,b(t)?o?t.call(e,p(l,a,x,o),p(l,a,O,o)):(l++,t.call(e,p(l,a,x,o),p(l,a,O,o),p(l,a,x,a.notifyWith))):(s!==x&&(n=void 0,i=[e]),(o||a.resolveWith)(n,i))}}var n=this,i=arguments,t=o?e:function(){try{e()}catch(e){_.Deferred.exceptionHook&&_.Deferred.exceptionHook(e,t.stackTrace),l<=r+1&&(s!==O&&(n=void 0,i=[e]),a.rejectWith(n,i))}};r?t():(_.Deferred.getStackHook&&(t.stackTrace=_.Deferred.getStackHook()),B.setTimeout(t))}}return _.Deferred(function(e){a[0][3].add(p(0,e,b(i)?i:x,e.notifyWith)),a[1][3].add(p(0,e,b(t)?t:x)),a[2][3].add(p(0,e,b(n)?n:O))}).promise()},promise:function(e){return null!=e?_.extend(e,s):s}},o={};return _.each(a,function(e,t){var n=t[2],i=t[5];s[t[1]]=n.add,i&&n.add(function(){r=i},a[3-e][2].disable,a[3-e][3].disable,a[0][2].lock,a[0][3].lock),n.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=n.fireWith}),s.promise(o),e&&e.call(o,o),o},when:function(e){function t(t){return function(e){r[t]=this,a[t]=1<arguments.length?o.call(arguments):e,--n||s.resolveWith(r,a)}}var n=arguments.length,i=n,r=Array(i),a=o.call(arguments),s=_.Deferred();if(n<=1&&(S(e,s.done(t(i)).resolve,s.reject,!n),"pending"===s.state()||b(a[i]&&a[i].then)))return s.then();for(;i--;)S(a[i],t(i),s.reject);return s.promise()}});var E=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;_.Deferred.exceptionHook=function(e,t){B.console&&B.console.warn&&e&&E.test(e.name)&&B.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},_.readyException=function(e){B.setTimeout(function(){throw e})};var P=_.Deferred();function T(){K.removeEventListener("DOMContentLoaded",T),B.removeEventListener("load",T),_.ready()}_.fn.ready=function(e){return P.then(e).catch(function(e){_.readyException(e)}),this},_.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--_.readyWait:_.isReady)||(_.isReady=!0)!==e&&0<--_.readyWait||P.resolveWith(K,[_])}}),_.ready.then=P.then,"complete"===K.readyState||"loading"!==K.readyState&&!K.documentElement.doScroll?B.setTimeout(_.ready):(K.addEventListener("DOMContentLoaded",T),B.addEventListener("load",T));var M=function(e,t,n,i,r,a,s){var o=0,l=e.length,p=null==n;if("object"===y(n))for(o in r=!0,n)M(e,t,o,n[o],!0,a,s);else if(void 0!==i&&(r=!0,b(i)||(s=!0),p&&(t=s?(t.call(e,i),null):(p=t,function(e,t,n){return p.call(_(e),n)})),t))for(;o<l;o++)t(e[o],n,s?i:i.call(e[o],o,t(e[o],n)));return r?e:p?t.call(e):l?t(e[0],n):a},Z=/^-ms-/,R=/-([a-z])/g;function I(e,t){return t.toUpperCase()}function j(e){return e.replace(Z,"ms-").replace(R,I)}function N(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function H(){this.expando=_.expando+H.uid++}H.uid=1,H.prototype={cache:function(e){var t=e[this.expando];return t||(t={},N(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[j(t)]=n;else for(i in t)r[j(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][j(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(j):(t=j(t))in i?[t]:t.match(F)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!_.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!_.isEmptyObject(t)}};var V=new H,L=new H,z=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function $(e,t,n){var i,r;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(J,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:z.test(r)?JSON.parse(r):r)}catch(e){}L.set(e,t,n)}else n=void 0;return n}_.extend({hasData:function(e){return L.hasData(e)||V.hasData(e)},data:function(e,t,n){return L.access(e,t,n)},removeData:function(e,t){L.remove(e,t)},_data:function(e,t,n){return V.access(e,t,n)},_removeData:function(e,t){V.remove(e,t)}}),_.fn.extend({data:function(n,e){var t,i,r,a=this[0],s=a&&a.attributes;if(void 0!==n)return"object"==typeof n?this.each(function(){L.set(this,n)}):M(this,function(e){var t;return a&&void 0===e?void 0!==(t=L.get(a,n))||void 0!==(t=$(a,n))?t:void 0:void this.each(function(){L.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(r=L.get(a),1===a.nodeType&&!V.get(a,"hasDataAttrs"))){for(t=s.length;t--;)s[t]&&0===(i=s[t].name).indexOf("data-")&&(i=j(i.slice(5)),$(a,i,r[i]));V.set(a,"hasDataAttrs",!0)}return r},removeData:function(e){return this.each(function(){L.remove(this,e)})}}),_.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=V.get(e,t),n&&(!i||Array.isArray(n)?i=V.access(e,t,_.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=_.queue(e,t),i=n.length,r=n.shift(),a=_._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete a.stop,r.call(e,function(){_.dequeue(e,t)},a)),!i&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return V.get(e,n)||V.access(e,n,{empty:_.Callbacks("once memory").add(function(){V.remove(e,[t+"queue",n])})})}}),_.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?_.queue(this[0],t):void 0===n?this:this.each(function(){var e=_.queue(this,t,n);_._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&_.dequeue(this,t)})},dequeue:function(e){return this.each(function(){_.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--r||a.resolveWith(s,[s])}var i,r=1,a=_.Deferred(),s=this,o=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(i=V.get(s[o],e+"queueHooks"))&&i.empty&&(r++,i.empty.add(n));return n(),a.promise(t)}});var X=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ee=new RegExp("^(?:([+-])=|)("+X+")([a-z%]*)$","i"),te=["Top","Right","Bottom","Left"],ne=K.documentElement,ie=function(e){return _.contains(e.ownerDocument,e)},re={composed:!0};ne.getRootNode&&(ie=function(e){return _.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ie(e)&&"none"===_.css(e,"display")};function se(e,t,n,i){var r,a,s=20,o=i?function(){return i.cur()}:function(){return _.css(e,t,"")},l=o(),p=n&&n[3]||(_.cssNumber[t]?"":"px"),u=e.nodeType&&(_.cssNumber[t]||"px"!==p&&+l)&&ee.exec(_.css(e,t));if(u&&u[3]!==p){for(l/=2,p=p||u[3],u=+l||1;s--;)_.style(e,t,u+p),(1-a)*(1-(a=o()/l||.5))<=0&&(s=0),u/=a;u*=2,_.style(e,t,u+p),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=p,i.start=u,i.end=r)),r}var oe={};function le(e,t){for(var n,i,r,a,s,o,l,p=[],u=0,c=e.length;u<c;u++)(i=e[u]).style&&(n=i.style.display,t?("none"===n&&(p[u]=V.get(i,"display")||null,p[u]||(i.style.display="")),""===i.style.display&&ae(i)&&(p[u]=(l=o=s=a=void 0,s=(r=i).ownerDocument,o=r.nodeName,(l=oe[o])||(a=s.body.appendChild(s.createElement(o)),l=_.css(a,"display"),a.parentNode.removeChild(a),"none"===l&&(l="block"),oe[o]=l)))):"none"!==n&&(p[u]="none",V.set(i,"display",n)));for(u=0;u<c;u++)null!=p[u]&&(e[u].style.display=p[u]);return e}_.fn.extend({show:function(){return le(this,!0)},hide:function(){return le(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?_(this).show():_(this).hide()})}});var pe,ue,ce=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Ae=/^$|^module$|\/(?:java|ecma)script/i;pe=K.createDocumentFragment().appendChild(K.createElement("div")),(ue=K.createElement("input")).setAttribute("type","radio"),ue.setAttribute("checked","checked"),ue.setAttribute("name","t"),pe.appendChild(ue),v.checkClone=pe.cloneNode(!0).cloneNode(!0).lastChild.checked,pe.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!pe.cloneNode(!0).lastChild.defaultValue,pe.innerHTML="<option></option>",v.option=!!pe.lastChild;var de={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function me(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&w(e,t)?_.merge([e],n):n}function fe(e,t){for(var n=0,i=e.length;n<i;n++)V.set(e[n],"globalEval",!t||V.get(t[n],"globalEval"))}de.tbody=de.tfoot=de.colgroup=de.caption=de.thead,de.th=de.td,v.option||(de.optgroup=de.option=[1,"<select multiple='multiple'>","</select>"]);var ge=/<|&#?\w+;/;function ve(e,t,n,i,r){for(var a,s,o,l,p,u,c=t.createDocumentFragment(),h=[],A=0,d=e.length;A<d;A++)if((a=e[A])||0===a)if("object"===y(a))_.merge(h,a.nodeType?[a]:a);else if(ge.test(a)){for(s=s||c.appendChild(t.createElement("div")),o=(he.exec(a)||["",""])[1].toLowerCase(),l=de[o]||de._default,s.innerHTML=l[1]+_.htmlPrefilter(a)+l[2],u=l[0];u--;)s=s.lastChild;_.merge(h,s.childNodes),(s=c.firstChild).textContent=""}else h.push(t.createTextNode(a));for(c.textContent="",A=0;a=h[A++];)if(i&&-1<_.inArray(a,i))r&&r.push(a);else if(p=ie(a),s=me(c.appendChild(a),"script"),p&&fe(s),n)for(u=0;a=s[u++];)Ae.test(a.type||"")&&n.push(a);return c}var be=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function ye(){return!1}function Qe(e,t){return e===function(){try{return K.activeElement}catch(e){}}()==("focus"===t)}function Be(e,t,n,i,r,a){var s,o;if("object"==typeof t){for(o in"string"!=typeof n&&(i=i||n,n=void 0),t)Be(e,o,n,i,t[o],a);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=ye;else if(!r)return e;return 1===a&&(s=r,(r=function(e){return _().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=_.guid++)),e.each(function(){_.event.add(this,t,r,i,n)})}function Ke(e,r,a){a?(V.set(e,r,!1),_.event.add(e,r,{namespace:!1,handler:function(e){var t,n,i=V.get(this,r);if(1&e.isTrigger&&this[r]){if(i.length)(_.event.special[r]||{}).delegateType&&e.stopPropagation();else if(i=o.call(arguments),V.set(this,r,i),t=a(this,r),this[r](),i!==(n=V.get(this,r))||t?V.set(this,r,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n&&n.value}else i.length&&(V.set(this,r,{value:_.event.trigger(_.extend(i[0],_.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===V.get(e,r)&&_.event.add(e,r,Ce)}_.event={global:{},add:function(t,e,n,i,r){var a,s,o,l,p,u,c,h,A,d,m,f=V.get(t);if(N(t))for(n.handler&&(n=(a=n).handler,r=a.selector),r&&_.find.matchesSelector(ne,r),n.guid||(n.guid=_.guid++),(l=f.events)||(l=f.events=Object.create(null)),(s=f.handle)||(s=f.handle=function(e){return void 0!==_&&_.event.triggered!==e.type?_.event.dispatch.apply(t,arguments):void 0}),p=(e=(e||"").match(F)||[""]).length;p--;)A=m=(o=be.exec(e[p])||[])[1],d=(o[2]||"").split(".").sort(),A&&(c=_.event.special[A]||{},A=(r?c.delegateType:c.bindType)||A,c=_.event.special[A]||{},u=_.extend({type:A,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&_.expr.match.needsContext.test(r),namespace:d.join(".")},a),(h=l[A])||((h=l[A]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(t,i,d,s)||t.addEventListener&&t.addEventListener(A,s)),c.add&&(c.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?h.splice(h.delegateCount++,0,u):h.push(u),_.event.global[A]=!0)},remove:function(e,t,n,i,r){var a,s,o,l,p,u,c,h,A,d,m,f=V.hasData(e)&&V.get(e);if(f&&(l=f.events)){for(p=(t=(t||"").match(F)||[""]).length;p--;)if(A=m=(o=be.exec(t[p])||[])[1],d=(o[2]||"").split(".").sort(),A){for(c=_.event.special[A]||{},h=l[A=(i?c.delegateType:c.bindType)||A]||[],o=o[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=a=h.length;a--;)u=h[a],!r&&m!==u.origType||n&&n.guid!==u.guid||o&&!o.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(h.splice(a,1),u.selector&&h.delegateCount--,c.remove&&c.remove.call(e,u));s&&!h.length&&(c.teardown&&!1!==c.teardown.call(e,d,f.handle)||_.removeEvent(e,A,f.handle),delete l[A])}else for(A in l)_.event.remove(e,A+t[p],n,i,!0);_.isEmptyObject(l)&&V.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,a,s,o=new Array(arguments.length),l=_.event.fix(e),p=(V.get(this,"events")||Object.create(null))[l.type]||[],u=_.event.special[l.type]||{};for(o[0]=l,t=1;t<arguments.length;t++)o[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(s=_.event.handlers.call(this,l,p),t=0;(r=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(a=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(i=((_.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,o))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,a,s,o=[],l=t.delegateCount,p=e.target;if(l&&p.nodeType&&!("click"===e.type&&1<=e.button))for(;p!==this;p=p.parentNode||this)if(1===p.nodeType&&("click"!==e.type||!0!==p.disabled)){for(a=[],s={},n=0;n<l;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?-1<_(r,this).index(p):_.find(r,this,null,[p]).length),s[r]&&a.push(i);a.length&&o.push({elem:p,handlers:a})}return p=this,l<t.length&&o.push({elem:p,handlers:t.slice(l)}),o},addProp:function(t,e){Object.defineProperty(_.Event.prototype,t,{enumerable:!0,configurable:!0,get:b(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[_.expando]?e:new _.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ce.test(t.type)&&t.click&&w(t,"input")&&Ke(t,"click",Ce),!1},trigger:function(e){var t=this||e;return ce.test(t.type)&&t.click&&w(t,"input")&&Ke(t,"click"),!0},_default:function(e){var t=e.target;return ce.test(t.type)&&t.click&&w(t,"input")&&V.get(t,"click")||w(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},_.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},_.Event=function(e,t){if(!(this instanceof _.Event))return new _.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:ye,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&_.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[_.expando]=!0},_.Event.prototype={constructor:_.Event,isDefaultPrevented:ye,isPropagationStopped:ye,isImmediatePropagationStopped:ye,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},_.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},_.event.addProp),_.each({focus:"focusin",blur:"focusout"},function(e,t){_.event.special[e]={setup:function(){return Ke(this,e,Qe),!1},trigger:function(){return Ke(this,e),!0},_default:function(){return!0},delegateType:t}}),_.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,r){_.event.special[e]={delegateType:r,bindType:r,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||_.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=r),t}}}),_.fn.extend({on:function(e,t,n,i){return Be(this,e,t,n,i)},one:function(e,t,n,i){return Be(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,_(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ye),this.each(function(){_.event.remove(this,e,n,t)});for(r in e)this.off(r,t,e[r]);return this}});var _e=/<script|<style|<link/i,we=/checked\s*(?:[^=]|=\s*.checked.)/i,qe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ue(e,t){return w(e,"table")&&w(11!==t.nodeType?t:t.firstChild,"tr")&&_(e).children("tbody")[0]||e}function Ye(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function We(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function De(e,t){var n,i,r,a,s,o;if(1===t.nodeType){if(V.hasData(e)&&(o=V.get(e).events))for(r in V.remove(t,"handle events"),o)for(n=0,i=o[r].length;n<i;n++)_.event.add(t,r,o[r][n]);L.hasData(e)&&(a=L.access(e),s=_.extend({},a),L.set(t,s))}}function ke(n,i,r,a){i=f(i);var e,t,s,o,l,p,u=0,c=n.length,h=c-1,A=i[0],d=b(A);if(d||1<c&&"string"==typeof A&&!v.checkClone&&we.test(A))return n.each(function(e){var t=n.eq(e);d&&(i[0]=A.call(this,e,t.html())),ke(t,i,r,a)});if(c&&(t=(e=ve(i,n[0].ownerDocument,!1,n,a)).firstChild,1===e.childNodes.length&&(e=t),t||a)){for(o=(s=_.map(me(e,"script"),Ye)).length;u<c;u++)l=e,u!==h&&(l=_.clone(l,!0,!0),o&&_.merge(s,me(l,"script"))),r.call(n[u],l,u);if(o)for(p=s[s.length-1].ownerDocument,_.map(s,We),u=0;u<o;u++)l=s[u],Ae.test(l.type||"")&&!V.access(l,"globalEval")&&_.contains(p,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?_._evalUrl&&!l.noModule&&_._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},p):C(l.textContent.replace(qe,""),l,p))}return n}function Ge(e,t,n){for(var i,r=t?_.filter(t,e):e,a=0;null!=(i=r[a]);a++)n||1!==i.nodeType||_.cleanData(me(i)),i.parentNode&&(n&&ie(i)&&fe(me(i,"script")),i.parentNode.removeChild(i));return e}_.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,a,s,o,l,p,u=e.cloneNode(!0),c=ie(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||_.isXMLDoc(e)))for(s=me(u),i=0,r=(a=me(e)).length;i<r;i++)o=a[i],l=s[i],p=void 0,"input"===(p=l.nodeName.toLowerCase())&&ce.test(o.type)?l.checked=o.checked:"input"!==p&&"textarea"!==p||(l.defaultValue=o.defaultValue);if(t)if(n)for(a=a||me(e),s=s||me(u),i=0,r=a.length;i<r;i++)De(a[i],s[i]);else De(e,u);return 0<(s=me(u,"script")).length&&fe(s,!c&&me(e,"script")),u},cleanData:function(e){for(var t,n,i,r=_.event.special,a=0;void 0!==(n=e[a]);a++)if(N(n)){if(t=n[V.expando]){if(t.events)for(i in t.events)r[i]?_.event.remove(n,i):_.removeEvent(n,i,t.handle);n[V.expando]=void 0}n[L.expando]&&(n[L.expando]=void 0)}}}),_.fn.extend({detach:function(e){return Ge(this,e,!0)},remove:function(e){return Ge(this,e)},text:function(e){return M(this,function(e){return void 0===e?_.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return ke(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ue(this,e).appendChild(e)})},prepend:function(){return ke(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Ue(this,e)).insertBefore(e,t.firstChild)})},before:function(){return ke(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return ke(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(_.cleanData(me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return _.clone(this,e,t)})},html:function(e){return M(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!_e.test(e)&&!de[(he.exec(e)||["",""])[1].toLowerCase()]){e=_.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(_.cleanData(me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return ke(this,arguments,function(e){var t=this.parentNode;_.inArray(this,n)<0&&(_.cleanData(me(this)),t&&t.replaceChild(e,this))},n)}}),_.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,s){_.fn[e]=function(e){for(var t,n=[],i=_(e),r=i.length-1,a=0;a<=r;a++)t=a===r?this:this.clone(!0),_(i[a])[s](t),l.apply(n,t.get());return this.pushStack(n)}});function Fe(e,t,n){var i,r,a={};for(r in t)a[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=a[r];return i}var xe,Oe,Se,Ee,Pe,Te,Me,Ze,Re=new RegExp("^("+X+")(?!px)[a-z%]+$","i"),Ie=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=B),t.getComputedStyle(e)},je=new RegExp(te.join("|"),"i");function Ne(){var e;Ze&&(Me.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Ze.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(Me).appendChild(Ze),e=B.getComputedStyle(Ze),xe="1%"!==e.top,Te=12===He(e.marginLeft),Ze.style.right="60%",Ee=36===He(e.right),Oe=36===He(e.width),Ze.style.position="absolute",Se=12===He(Ze.offsetWidth/3),ne.removeChild(Me),Ze=null)}function He(e){return Math.round(parseFloat(e))}function Ve(e,t,n){var i,r,a,s,o=e.style;return(n=n||Ie(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ie(e)||(s=_.style(e,t)),!v.pixelBoxStyles()&&Re.test(s)&&je.test(t)&&(i=o.width,r=o.minWidth,a=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=i,o.minWidth=r,o.maxWidth=a)),void 0!==s?s+"":s}function Le(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}Me=K.createElement("div"),(Ze=K.createElement("div")).style&&(Ze.style.backgroundClip="content-box",Ze.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===Ze.style.backgroundClip,_.extend(v,{boxSizingReliable:function(){return Ne(),Oe},pixelBoxStyles:function(){return Ne(),Ee},pixelPosition:function(){return Ne(),xe},reliableMarginLeft:function(){return Ne(),Te},scrollboxSize:function(){return Ne(),Se},reliableTrDimensions:function(){var e,t,n,i;return null==Pe&&(e=K.createElement("table"),t=K.createElement("tr"),n=K.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ne.appendChild(e).appendChild(t).appendChild(n),i=B.getComputedStyle(t),Pe=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===t.offsetHeight,ne.removeChild(e)),Pe}}));var ze=["Webkit","Moz","ms"],Je=K.createElement("div").style,$e={};function Xe(e){var t=_.cssProps[e]||$e[e];return t||(e in Je?e:$e[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=ze.length;n--;)if((e=ze[n]+t)in Je)return e}(e)||e)}var et=/^(none|table(?!-c[ea]).+)/,tt=/^--/,nt={position:"absolute",visibility:"hidden",display:"block"},it={letterSpacing:"0",fontWeight:"400"};function rt(e,t,n){var i=ee.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function at(e,t,n,i,r,a){var s="width"===t?1:0,o=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=_.css(e,n+te[s],!0,r)),i?("content"===n&&(l-=_.css(e,"padding"+te[s],!0,r)),"margin"!==n&&(l-=_.css(e,"border"+te[s]+"Width",!0,r))):(l+=_.css(e,"padding"+te[s],!0,r),"padding"!==n?l+=_.css(e,"border"+te[s]+"Width",!0,r):o+=_.css(e,"border"+te[s]+"Width",!0,r));return!i&&0<=a&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-o-.5))||0),l}function st(e,t,n){var i=Ie(e),r=(!v.boxSizingReliable()||n)&&"border-box"===_.css(e,"boxSizing",!1,i),a=r,s=Ve(e,t,i),o="offset"+t[0].toUpperCase()+t.slice(1);if(Re.test(s)){if(!n)return s;s="auto"}return(!v.boxSizingReliable()&&r||!v.reliableTrDimensions()&&w(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===_.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===_.css(e,"boxSizing",!1,i),(a=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+at(e,t,n||(r?"border":"content"),a,i,s)+"px"}function ot(e,t,n,i,r){return new ot.prototype.init(e,t,n,i,r)}_.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ve(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,a,s,o=j(t),l=tt.test(t),p=e.style;if(l||(t=Xe(o)),s=_.cssHooks[t]||_.cssHooks[o],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(e,!1,i))?r:p[t];"string"===(a=typeof n)&&(r=ee.exec(n))&&r[1]&&(n=se(e,t,r),a="number"),null!=n&&n==n&&("number"!==a||l||(n+=r&&r[3]||(_.cssNumber[o]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(p[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,i))||(l?p.setProperty(t,n):p[t]=n))}},css:function(e,t,n,i){var r,a,s,o=j(t);return tt.test(t)||(t=Xe(o)),(s=_.cssHooks[t]||_.cssHooks[o])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=Ve(e,t,i)),"normal"===r&&t in it&&(r=it[t]),""===n||n?(a=parseFloat(r),!0===n||isFinite(a)?a||0:r):r}}),_.each(["height","width"],function(e,l){_.cssHooks[l]={get:function(e,t,n){if(t)return!et.test(_.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?st(e,l,n):Fe(e,nt,function(){return st(e,l,n)})},set:function(e,t,n){var i,r=Ie(e),a=!v.scrollboxSize()&&"absolute"===r.position,s=(a||n)&&"border-box"===_.css(e,"boxSizing",!1,r),o=n?at(e,l,n,s,r):0;return s&&a&&(o-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(r[l])-at(e,l,"border",!1,r)-.5)),o&&(i=ee.exec(t))&&"px"!==(i[3]||"px")&&(e.style[l]=t,t=_.css(e,l)),rt(0,t,o)}}}),_.cssHooks.marginLeft=Le(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ve(e,"marginLeft"))||e.getBoundingClientRect().left-Fe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),_.each({margin:"",padding:"",border:"Width"},function(r,a){_.cssHooks[r+a]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[r+te[t]+a]=i[t]||i[t-2]||i[0];return n}},"margin"!==r&&(_.cssHooks[r+a].set=rt)}),_.fn.extend({css:function(e,t){return M(this,function(e,t,n){var i,r,a={},s=0;if(Array.isArray(t)){for(i=Ie(e),r=t.length;s<r;s++)a[t[s]]=_.css(e,t[s],!1,i);return a}return void 0!==n?_.style(e,t,n):_.css(e,t)},e,t,1<arguments.length)}}),(_.Tween=ot).prototype={constructor:ot,init:function(e,t,n,i,r,a){this.elem=e,this.prop=n,this.easing=r||_.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=a||(_.cssNumber[n]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,n=ot.propHooks[this.prop];return this.options.duration?this.pos=t=_.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=_.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){_.fx.step[e.prop]?_.fx.step[e.prop](e):1!==e.elem.nodeType||!_.cssHooks[e.prop]&&null==e.elem.style[Xe(e.prop)]?e.elem[e.prop]=e.now:_.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},_.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},_.fx=ot.prototype.init,_.fx.step={};var lt,pt,ut,ct,ht=/^(?:toggle|show|hide)$/,At=/queueHooks$/;function dt(){pt&&(!1===K.hidden&&B.requestAnimationFrame?B.requestAnimationFrame(dt):B.setTimeout(dt,_.fx.interval),_.fx.tick())}function mt(){return B.setTimeout(function(){lt=void 0}),lt=Date.now()}function ft(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=te[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function gt(e,t,n){for(var i,r=(vt.tweeners[t]||[]).concat(vt.tweeners["*"]),a=0,s=r.length;a<s;a++)if(i=r[a].call(n,t,e))return i}function vt(a,e,t){var n,s,i=0,r=vt.prefilters.length,o=_.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=lt||mt(),t=Math.max(0,p.startTime+p.duration-e),n=1-(t/p.duration||0),i=0,r=p.tweens.length;i<r;i++)p.tweens[i].run(n);return o.notifyWith(a,[p,n,t]),n<1&&r?t:(r||o.notifyWith(a,[p,1,0]),o.resolveWith(a,[p]),!1)},p=o.promise({elem:a,props:_.extend({},e),opts:_.extend(!0,{specialEasing:{},easing:_.easing._default},t),originalProperties:e,originalOptions:t,startTime:lt||mt(),duration:t.duration,tweens:[],createTween:function(e,t){var n=_.Tween(a,p.opts,e,t,p.opts.specialEasing[e]||p.opts.easing);return p.tweens.push(n),n},stop:function(e){var t=0,n=e?p.tweens.length:0;if(s)return this;for(s=!0;t<n;t++)p.tweens[t].run(1);return e?(o.notifyWith(a,[p,1,0]),o.resolveWith(a,[p,e])):o.rejectWith(a,[p,e]),this}}),u=p.props;for(!function(e,t){var n,i,r,a,s;for(n in e)if(r=t[i=j(n)],a=e[n],Array.isArray(a)&&(r=a[1],a=e[n]=a[0]),n!==i&&(e[i]=a,delete e[n]),(s=_.cssHooks[i])&&"expand"in s)for(n in a=s.expand(a),delete e[i],a)n in e||(e[n]=a[n],t[n]=r);else t[i]=r}(u,p.opts.specialEasing);i<r;i++)if(n=vt.prefilters[i].call(p,a,u,p.opts))return b(n.stop)&&(_._queueHooks(p.elem,p.opts.queue).stop=n.stop.bind(n)),n;return _.map(u,gt,p),b(p.opts.start)&&p.opts.start.call(a,p),p.progress(p.opts.progress).done(p.opts.done,p.opts.complete).fail(p.opts.fail).always(p.opts.always),_.fx.timer(_.extend(l,{elem:a,anim:p,queue:p.opts.queue})),p}_.Animation=_.extend(vt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,ee.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,r=(e=b(e)?(t=e,["*"]):e.match(F)).length;i<r;i++)n=e[i],vt.tweeners[n]=vt.tweeners[n]||[],vt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,a,s,o,l,p,u,c="width"in t||"height"in t,h=this,A={},d=e.style,m=e.nodeType&&ae(e),f=V.get(e,"fxshow");for(i in n.queue||(null==(s=_._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,h.always(function(){h.always(function(){s.unqueued--,_.queue(e,"fx").length||s.empty.fire()})})),t)if(r=t[i],ht.test(r)){if(delete t[i],a=a||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!f||void 0===f[i])continue;m=!0}A[i]=f&&f[i]||_.style(e,i)}if((l=!_.isEmptyObject(t))||!_.isEmptyObject(A))for(i in c&&1===e.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(p=f&&f.display)&&(p=V.get(e,"display")),"none"===(u=_.css(e,"display"))&&(p?u=p:(le([e],!0),p=e.style.display||p,u=_.css(e,"display"),le([e]))),("inline"===u||"inline-block"===u&&null!=p)&&"none"===_.css(e,"float")&&(l||(h.done(function(){d.display=p}),null==p&&(u=d.display,p="none"===u?"":u)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",h.always(function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]})),l=!1,A)l||(f?"hidden"in f&&(m=f.hidden):f=V.access(e,"fxshow",{display:p}),a&&(f.hidden=!m),m&&le([e],!0),h.done(function(){for(i in m||le([e]),V.remove(e,"fxshow"),A)_.style(e,i,A[i])})),l=gt(m?f[i]:0,i,h),i in f||(f[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?vt.prefilters.unshift(e):vt.prefilters.push(e)}}),_.speed=function(e,t,n){var i=e&&"object"==typeof e?_.extend({},e):{complete:n||!n&&t||b(e)&&e,duration:e,easing:n&&t||t&&!b(t)&&t};return _.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in _.fx.speeds?i.duration=_.fx.speeds[i.duration]:i.duration=_.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){b(i.old)&&i.old.call(this),i.queue&&_.dequeue(this,i.queue)},i},_.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){function r(){var e=vt(this,_.extend({},t),s);(a||V.get(this,"finish"))&&e.stop(!0)}var a=_.isEmptyObject(t),s=_.speed(e,n,i);return r.finish=r,a||!1===s.queue?this.each(r):this.queue(s.queue,r)},stop:function(r,e,a){function s(e){var t=e.stop;delete e.stop,t(a)}return"string"!=typeof r&&(a=e,e=r,r=void 0),e&&this.queue(r||"fx",[]),this.each(function(){var e=!0,t=null!=r&&r+"queueHooks",n=_.timers,i=V.get(this);if(t)i[t]&&i[t].stop&&s(i[t]);else for(t in i)i[t]&&i[t].stop&&At.test(t)&&s(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=r&&n[t].queue!==r||(n[t].anim.stop(a),e=!1,n.splice(t,1));!e&&a||_.dequeue(this,r)})},finish:function(s){return!1!==s&&(s=s||"fx"),this.each(function(){var e,t=V.get(this),n=t[s+"queue"],i=t[s+"queueHooks"],r=_.timers,a=n?n.length:0;for(t.finish=!0,_.queue(this,s,[]),i&&i.stop&&i.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===s&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;e<a;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),_.each(["toggle","show","hide"],function(e,i){var r=_.fn[i];_.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(ft(i,!0),e,t,n)}}),_.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){_.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),_.timers=[],_.fx.tick=function(){var e,t=0,n=_.timers;for(lt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||_.fx.stop(),lt=void 0},_.fx.timer=function(e){_.timers.push(e),_.fx.start()},_.fx.interval=13,_.fx.start=function(){pt||(pt=!0,dt())},_.fx.stop=function(){pt=null},_.fx.speeds={slow:600,fast:200,_default:400},_.fn.delay=function(i,e){return i=_.fx&&_.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=B.setTimeout(e,i);t.stop=function(){B.clearTimeout(n)}})},ut=K.createElement("input"),ct=K.createElement("select").appendChild(K.createElement("option")),ut.type="checkbox",v.checkOn=""!==ut.value,v.optSelected=ct.selected,(ut=K.createElement("input")).value="t",ut.type="radio",v.radioValue="t"===ut.value;var bt,Ct=_.expr.attrHandle;_.fn.extend({attr:function(e,t){return M(this,_.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){_.removeAttr(this,e)})}}),_.extend({attr:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?_.prop(e,t,n):(1===a&&_.isXMLDoc(e)||(r=_.attrHooks[t.toLowerCase()]||(_.expr.match.bool.test(t)?bt:void 0)),void 0!==n?null===n?void _.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(r&&"get"in r&&null!==(i=r.get(e,t)))&&null==(i=_.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&w(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(F);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),bt={set:function(e,t,n){return!1===t?_.removeAttr(e,n):e.setAttribute(n,n),n}},_.each(_.expr.match.bool.source.match(/\w+/g),function(e,t){var s=Ct[t]||_.find.attr;Ct[t]=function(e,t,n){var i,r,a=t.toLowerCase();return n||(r=Ct[a],Ct[a]=i,i=null!=s(e,t,n)?a:null,Ct[a]=r),i}});var yt=/^(?:input|select|textarea|button)$/i,Qt=/^(?:a|area)$/i;function Bt(e){return(e.match(F)||[]).join(" ")}function Kt(e){return e.getAttribute&&e.getAttribute("class")||""}function _t(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(F)||[]}_.fn.extend({prop:function(e,t){return M(this,_.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[_.propFix[e]||e]})}}),_.extend({prop:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&_.isXMLDoc(e)||(t=_.propFix[t]||t,r=_.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=_.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||Qt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(_.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),_.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){_.propFix[this.toLowerCase()]=this}),_.fn.extend({addClass:function(t){var e,n,i,r,a,s,o,l=0;if(b(t))return this.each(function(e){_(this).addClass(t.call(this,e,Kt(this)))});if((e=_t(t)).length)for(;n=this[l++];)if(r=Kt(n),i=1===n.nodeType&&" "+Bt(r)+" "){for(s=0;a=e[s++];)i.indexOf(" "+a+" ")<0&&(i+=a+" ");r!==(o=Bt(i))&&n.setAttribute("class",o)}return this},removeClass:function(t){var e,n,i,r,a,s,o,l=0;if(b(t))return this.each(function(e){_(this).removeClass(t.call(this,e,Kt(this)))});if(!arguments.length)return this.attr("class","");if((e=_t(t)).length)for(;n=this[l++];)if(r=Kt(n),i=1===n.nodeType&&" "+Bt(r)+" "){for(s=0;a=e[s++];)for(;-1<i.indexOf(" "+a+" ");)i=i.replace(" "+a+" "," ");r!==(o=Bt(i))&&n.setAttribute("class",o)}return this},toggleClass:function(r,t){var a=typeof r,s="string"==a||Array.isArray(r);return"boolean"==typeof t&&s?t?this.addClass(r):this.removeClass(r):b(r)?this.each(function(e){_(this).toggleClass(r.call(this,e,Kt(this),t),t)}):this.each(function(){var e,t,n,i;if(s)for(t=0,n=_(this),i=_t(r);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==r&&"boolean"!=a||((e=Kt(this))&&V.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==r&&V.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,i=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+Bt(Kt(t))+" ").indexOf(i))return!0;return!1}});var wt=/\r/g;_.fn.extend({val:function(n){var i,e,r,t=this[0];return arguments.length?(r=b(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=r?n.call(this,e,_(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=_.map(t,function(e){return null==e?"":e+""})),(i=_.valHooks[this.type]||_.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,t,"value")||(this.value=t))})):t?(i=_.valHooks[t.type]||_.valHooks[t.nodeName.toLowerCase()])&&"get"in i&&void 0!==(e=i.get(t,"value"))?e:"string"==typeof(e=t.value)?e.replace(wt,""):null==e?"":e:void 0}}),_.extend({valHooks:{option:{get:function(e){var t=_.find.attr(e,"value");return null!=t?t:Bt(_.text(e))}},select:{get:function(e){for(var t,n,i=e.options,r=e.selectedIndex,a="select-one"===e.type,s=a?null:[],o=a?r+1:i.length,l=r<0?o:a?r:0;l<o;l++)if(((n=i[l]).selected||l===r)&&!n.disabled&&(!n.parentNode.disabled||!w(n.parentNode,"optgroup"))){if(t=_(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,a=_.makeArray(t),s=r.length;s--;)((i=r[s]).selected=-1<_.inArray(_.valHooks.option.get(i),a))&&(n=!0);return n||(e.selectedIndex=-1),a}}}}),_.each(["radio","checkbox"],function(){_.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<_.inArray(_(e).val(),t)}},v.checkOn||(_.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in B;function qt(e){e.stopPropagation()}var Ut=/^(?:focusinfocus|focusoutblur)$/;_.extend(_.event,{trigger:function(e,t,n,i){var r,a,s,o,l,p,u,c=[n||K],h=g.call(e,"type")?e.type:e,A=g.call(e,"namespace")?e.namespace.split("."):[],d=u=a=n=n||K;if(3!==n.nodeType&&8!==n.nodeType&&!Ut.test(h+_.event.triggered)&&(-1<h.indexOf(".")&&(h=(A=h.split(".")).shift(),A.sort()),o=h.indexOf(":")<0&&"on"+h,(e=e[_.expando]?e:new _.Event(h,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=A.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+A.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:_.makeArray(t,[e]),p=_.event.special[h]||{},i||!p.trigger||!1!==p.trigger.apply(n,t))){if(!i&&!p.noBubble&&!m(n)){for(s=p.delegateType||h,Ut.test(s+h)||(d=d.parentNode);d;d=d.parentNode)c.push(d),a=d;a===(n.ownerDocument||K)&&c.push(a.defaultView||a.parentWindow||B)}for(r=0;(d=c[r++])&&!e.isPropagationStopped();)u=d,e.type=1<r?s:p.bindType||h,(l=(V.get(d,"events")||Object.create(null))[e.type]&&V.get(d,"handle"))&&l.apply(d,t),(l=o&&d[o])&&l.apply&&N(d)&&(e.result=l.apply(d,t),!1===e.result&&e.preventDefault());return e.type=h,i||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(c.pop(),t)||!N(n)||o&&b(n[h])&&!m(n)&&((a=n[o])&&(n[o]=null),_.event.triggered=h,e.isPropagationStopped()&&u.addEventListener(h,qt),n[h](),e.isPropagationStopped()&&u.removeEventListener(h,qt),_.event.triggered=void 0,a&&(n[o]=a)),e.result}},simulate:function(e,t,n){var i=_.extend(new _.Event,n,{type:e,isSimulated:!0});_.event.trigger(i,null,t)}}),_.fn.extend({trigger:function(e,t){return this.each(function(){_.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return _.event.trigger(e,t,n,!0)}}),v.focusin||_.each({focus:"focusin",blur:"focusout"},function(n,i){function r(e){_.event.simulate(i,e.target,_.event.fix(e))}_.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=V.access(e,i);t||e.addEventListener(n,r,!0),V.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=V.access(e,i)-1;t?V.access(e,i,t):(e.removeEventListener(n,r,!0),V.remove(e,i))}}});var Yt=B.location,Wt={guid:Date.now()},Dt=/\?/;_.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new B.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||_.error("Invalid XML: "+(n?_.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t};var kt=/\[\]$/,Gt=/\r?\n/g,Ft=/^(?:submit|button|image|reset|file)$/i,xt=/^(?:input|select|textarea|keygen)/i;_.param=function(e,t){function n(e,t){var n=b(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)}var i,r=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!_.isPlainObject(e))_.each(e,function(){n(this.name,this.value)});else for(i in e)!function n(i,e,r,a){var t;if(Array.isArray(e))_.each(e,function(e,t){r||kt.test(i)?a(i,t):n(i+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,a)});else if(r||"object"!==y(e))a(i,e);else for(t in e)n(i+"["+t+"]",e[t],r,a)}(i,e[i],t,n);return r.join("&")},_.fn.extend({serialize:function(){return _.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=_.prop(this,"elements");return e?_.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!_(this).is(":disabled")&&xt.test(this.nodeName)&&!Ft.test(e)&&(this.checked||!ce.test(e))}).map(function(e,t){var n=_(this).val();return null==n?null:Array.isArray(n)?_.map(n,function(e){return{name:t.name,value:e.replace(Gt,"\r\n")}}):{name:t.name,value:n.replace(Gt,"\r\n")}}).get()}});var Ot=/%20/g,St=/#.*$/,Et=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Tt=/^(?:GET|HEAD)$/,Mt=/^\/\//,Zt={},Rt={},It="*/".concat("*"),jt=K.createElement("a");function Nt(a){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,r=e.toLowerCase().match(F)||[];if(b(t))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(a[n]=a[n]||[]).unshift(t)):(a[n]=a[n]||[]).push(t)}}function Ht(t,r,a,s){var o={},l=t===Rt;function p(e){var i;return o[e]=!0,_.each(t[e]||[],function(e,t){var n=t(r,a,s);return"string"!=typeof n||l||o[n]?l?!(i=n):void 0:(r.dataTypes.unshift(n),p(n),!1)}),i}return p(r.dataTypes[0])||!o["*"]&&p("*")}function Vt(e,t){var n,i,r=_.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i=i||{})[n]=t[n]);return i&&_.extend(!0,e,i),e}jt.href=Yt.href,_.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Yt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Yt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":_.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Vt(Vt(e,_.ajaxSettings),t):Vt(_.ajaxSettings,e)},ajaxPrefilter:Nt(Zt),ajaxTransport:Nt(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var u,c,h,n,A,i,d,m,r,a,f=_.ajaxSetup({},t),g=f.context||f,v=f.context&&(g.nodeType||g.jquery)?_(g):_.event,b=_.Deferred(),C=_.Callbacks("once memory"),y=f.statusCode||{},s={},o={},l="canceled",Q={readyState:0,getResponseHeader:function(e){var t;if(d){if(!n)for(n={};t=Pt.exec(h);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return d?h:null},setRequestHeader:function(e,t){return null==d&&(e=o[e.toLowerCase()]=o[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==d&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)Q.always(e[Q.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||l;return u&&u.abort(t),p(0,t),this}};if(b.promise(Q),f.url=((e||f.url||Yt.href)+"").replace(Mt,Yt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(F)||[""],null==f.crossDomain){i=K.createElement("a");try{i.href=f.url,i.href=i.href,f.crossDomain=jt.protocol+"//"+jt.host!=i.protocol+"//"+i.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=_.param(f.data,f.traditional)),Ht(Zt,f,t,Q),d)return Q;for(r in(m=_.event&&f.global)&&0==_.active++&&_.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Tt.test(f.type),c=f.url.replace(St,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Ot,"+")):(a=f.url.slice(c.length),f.data&&(f.processData||"string"==typeof f.data)&&(c+=(Dt.test(c)?"&":"?")+f.data,delete f.data),!1===f.cache&&(c=c.replace(Et,"$1"),a=(Dt.test(c)?"&":"?")+"_="+Wt.guid+++a),f.url=c+a),f.ifModified&&(_.lastModified[c]&&Q.setRequestHeader("If-Modified-Since",_.lastModified[c]),_.etag[c]&&Q.setRequestHeader("If-None-Match",_.etag[c])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&Q.setRequestHeader("Content-Type",f.contentType),Q.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+It+"; q=0.01":""):f.accepts["*"]),f.headers)Q.setRequestHeader(r,f.headers[r]);if(f.beforeSend&&(!1===f.beforeSend.call(g,Q,f)||d))return Q.abort();if(l="abort",C.add(f.complete),Q.done(f.success),Q.fail(f.error),u=Ht(Rt,f,t,Q)){if(Q.readyState=1,m&&v.trigger("ajaxSend",[Q,f]),d)return Q;f.async&&0<f.timeout&&(A=B.setTimeout(function(){Q.abort("timeout")},f.timeout));try{d=!1,u.send(s,p)}catch(e){if(d)throw e;p(-1,e)}}else p(-1,"No Transport");function p(e,t,n,i){var r,a,s,o,l,p=t;d||(d=!0,A&&B.clearTimeout(A),u=void 0,h=i||"",Q.readyState=0<e?4:0,r=200<=e&&e<300||304===e,n&&(o=function(e,t,n){for(var i,r,a,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in o)if(o[r]&&o[r].test(i)){l.unshift(r);break}if(l[0]in n)a=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){a=r;break}s=s||r}a=a||s}if(a)return a!==l[0]&&l.unshift(a),n[a]}(f,Q,n)),!r&&-1<_.inArray("script",f.dataTypes)&&_.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),o=function(e,t,n,i){var r,a,s,o,l,p={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)p[s.toLowerCase()]=e.converters[s];for(a=u.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=u.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(s=p[l+" "+a]||p["* "+a]))for(r in p)if((o=r.split(" "))[1]===a&&(s=p[l+" "+o[0]]||p["* "+o[0]])){!0===s?s=p[r]:!0!==p[r]&&(a=o[0],u.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(f,o,Q,r),r?(f.ifModified&&((l=Q.getResponseHeader("Last-Modified"))&&(_.lastModified[c]=l),(l=Q.getResponseHeader("etag"))&&(_.etag[c]=l)),204===e||"HEAD"===f.type?p="nocontent":304===e?p="notmodified":(p=o.state,a=o.data,r=!(s=o.error))):(s=p,!e&&p||(p="error",e<0&&(e=0))),Q.status=e,Q.statusText=(t||p)+"",r?b.resolveWith(g,[a,p,Q]):b.rejectWith(g,[Q,p,s]),Q.statusCode(y),y=void 0,m&&v.trigger(r?"ajaxSuccess":"ajaxError",[Q,f,r?a:s]),C.fireWith(g,[Q,p]),m&&(v.trigger("ajaxComplete",[Q,f]),--_.active||_.event.trigger("ajaxStop")))}return Q},getJSON:function(e,t,n){return _.get(e,t,n,"json")},getScript:function(e,t){return _.get(e,void 0,t,"script")}}),_.each(["get","post"],function(e,r){_[r]=function(e,t,n,i){return b(t)&&(i=i||n,n=t,t=void 0),_.ajax(_.extend({url:e,type:r,dataType:i,data:t,success:n},_.isPlainObject(e)&&e))}}),_.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),_._evalUrl=function(e,t,n){return _.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){_.globalEval(e,t,n)}})},_.fn.extend({wrapAll:function(e){var t;return this[0]&&(b(e)&&(e=e.call(this[0])),t=_(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return b(n)?this.each(function(e){_(this).wrapInner(n.call(this,e))}):this.each(function(){var e=_(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=b(t);return this.each(function(e){_(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){_(this).replaceWith(this.childNodes)}),this}}),_.expr.pseudos.hidden=function(e){return!_.expr.pseudos.visible(e)},_.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},_.ajaxSettings.xhr=function(){try{return new B.XMLHttpRequest}catch(e){}};var Lt={0:200,1223:204},zt=_.ajaxSettings.xhr();v.cors=!!zt&&"withCredentials"in zt,v.ajax=zt=!!zt,_.ajaxTransport(function(r){var a,s;if(v.cors||zt&&!r.crossDomain)return{send:function(e,t){var n,i=r.xhr();if(i.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(n in r.xhrFields)i[n]=r.xhrFields[n];for(n in r.mimeType&&i.overrideMimeType&&i.overrideMimeType(r.mimeType),r.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);a=function(e){return function(){a&&(a=s=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(Lt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=a(),s=i.onerror=i.ontimeout=a("error"),void 0!==i.onabort?i.onabort=s:i.onreadystatechange=function(){4===i.readyState&&B.setTimeout(function(){a&&s()})},a=a("abort");try{i.send(r.hasContent&&r.data||null)}catch(e){if(a)throw e}},abort:function(){a&&a()}}}),_.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),_.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return _.globalEval(e),e}}}),_.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),_.ajaxTransport("script",function(n){var i,r;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=_("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",r=function(e){i.remove(),r=null,e&&t("error"===e.type?404:200,e.type)}),K.head.appendChild(i[0])},abort:function(){r&&r()}}});var Jt,$t=[],Xt=/(=)\?(?=&|$)|\?\?/;_.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=$t.pop()||_.expando+"_"+Wt.guid++;return this[e]=!0,e}}),_.ajaxPrefilter("json jsonp",function(e,t,n){var i,r,a,s=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=b(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Xt,"$1"+i):!1!==e.jsonp&&(e.url+=(Dt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||_.error(i+" was not called"),a[0]},e.dataTypes[0]="json",r=B[i],B[i]=function(){a=arguments},n.always(function(){void 0===r?_(B).removeProp(i):B[i]=r,e[i]&&(e.jsonpCallback=t.jsonpCallback,$t.push(i)),a&&b(r)&&r(a[0]),a=r=void 0}),"script"}),v.createHTMLDocument=((Jt=K.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Jt.childNodes.length),_.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=K.implementation.createHTMLDocument("")).createElement("base")).href=K.location.href,t.head.appendChild(i)):t=K),a=!n&&[],(r=q.exec(e))?[t.createElement(r[1])]:(r=ve([e],t,a),a&&a.length&&_(a).remove(),_.merge([],r.childNodes)));var i,r,a},_.fn.load=function(e,t,n){var i,r,a,s=this,o=e.indexOf(" ");return-1<o&&(i=Bt(e.slice(o)),e=e.slice(0,o)),b(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),0<s.length&&_.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){a=arguments,s.html(i?_("<div>").append(_.parseHTML(e)).find(i):e)}).always(n&&function(e,t){s.each(function(){n.apply(this,a||[e.responseText,t,e])})}),this},_.expr.pseudos.animated=function(t){return _.grep(_.timers,function(e){return t===e.elem}).length},_.offset={setOffset:function(e,t,n){var i,r,a,s,o,l,p=_.css(e,"position"),u=_(e),c={};"static"===p&&(e.style.position="relative"),o=u.offset(),a=_.css(e,"top"),l=_.css(e,"left"),r=("absolute"===p||"fixed"===p)&&-1<(a+l).indexOf("auto")?(s=(i=u.position()).top,i.left):(s=parseFloat(a)||0,parseFloat(l)||0),b(t)&&(t=t.call(e,n,_.extend({},o))),null!=t.top&&(c.top=t.top-o.top+s),null!=t.left&&(c.left=t.left-o.left+r),"using"in t?t.using.call(e,c):u.css(c)}},_.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){_.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===_.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===_.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=_(e).offset()).top+=_.css(e,"borderTopWidth",!0),r.left+=_.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-_.css(i,"marginTop",!0),left:t.left-r.left-_.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===_.css(e,"position");)e=e.offsetParent;return e||ne})}}),_.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,r){var a="pageYOffset"===r;_.fn[t]=function(e){return M(this,function(e,t,n){var i;return m(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n?i?i[r]:e[t]:void(i?i.scrollTo(a?i.pageXOffset:n,a?n:i.pageYOffset):e[t]=n)},t,e,arguments.length)}}),_.each(["top","left"],function(e,n){_.cssHooks[n]=Le(v.pixelPosition,function(e,t){if(t)return t=Ve(e,n),Re.test(t)?_(e).position()[n]+"px":t})}),_.each({Height:"height",Width:"width"},function(s,o){_.each({padding:"inner"+s,content:o,"":"outer"+s},function(i,a){_.fn[a]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),r=i||(!0===e||!0===t?"margin":"border");return M(this,function(e,t,n){var i;return m(e)?0===a.indexOf("outer")?e["inner"+s]:e.document.documentElement["client"+s]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+s],i["scroll"+s],e.body["offset"+s],i["offset"+s],i["client"+s])):void 0===n?_.css(e,t,r):_.style(e,t,n,r)},o,n?e:void 0,n)}})}),_.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){_.fn[t]=function(e){return this.on(t,e)}}),_.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),_.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){_.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var en=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;_.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),b(e))return i=o.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(o.call(arguments)))}).guid=e.guid=e.guid||_.guid++,r},_.holdReady=function(e){e?_.readyWait++:_.ready(!0)},_.isArray=Array.isArray,_.parseJSON=JSON.parse,_.nodeName=w,_.isFunction=b,_.isWindow=m,_.camelCase=j,_.type=y,_.now=Date.now,_.isNumeric=function(e){var t=_.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},_.trim=function(e){return null==e?"":(e+"").replace(en,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return _});var tn=B.jQuery,nn=B.$;return _.noConflict=function(e){return B.$===_&&(B.$=nn),e&&B.jQuery===_&&(B.jQuery=tn),_},void 0===e&&(B.jQuery=B.$=_),_})},{}],30:[function(ti,ni,e){var t,n;t=this,n=function(){"use strict";var e,r;function A(){return e.apply(null,arguments)}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function l(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function d(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function p(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(d(e,t))return;return 1}function a(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function s(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function c(e,t){for(var n=[],i=0;i<e.length;++i)n.push(t(e[i],i));return n}function h(e,t){for(var n in t)d(t,n)&&(e[n]=t[n]);return d(t,"toString")&&(e.toString=t.toString),d(t,"valueOf")&&(e.valueOf=t.valueOf),e}function m(e,t,n,i){return Ut(e,t,n,i,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function g(e){if(null==e._isValid){var t=f(e),n=r.call(t.parsedDateParts,function(e){return null!=e}),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function v(e){var t=m(NaN);return null!=e?h(f(t),e):f(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,i=0;i<n;i++)if(i in t&&e.call(this,t[i],i,t))return!0;return!1};var b=A.momentProperties=[],t=!1;function C(e,t){var n,i,r;if(a(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),a(t._i)||(e._i=t._i),a(t._f)||(e._f=t._f),a(t._l)||(e._l=t._l),a(t._strict)||(e._strict=t._strict),a(t._tzm)||(e._tzm=t._tzm),a(t._isUTC)||(e._isUTC=t._isUTC),a(t._offset)||(e._offset=t._offset),a(t._pf)||(e._pf=f(t)),a(t._locale)||(e._locale=t._locale),0<b.length)for(n=0;n<b.length;n++)a(r=t[i=b[n]])||(e[i]=r);return e}function y(e){C(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===t&&(t=!0,A.updateOffset(this),t=!1)}function Q(e){return e instanceof y||null!=e&&null!=e._isAMomentObject}function B(e){!1===A.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function n(r,a){var s=!0;return h(function(){if(null!=A.deprecationHandler&&A.deprecationHandler(null,r),s){for(var e,t,n=[],i=0;i<arguments.length;i++){if(e="","object"==typeof arguments[i]){for(t in e+="\n["+i+"] ",arguments[0])d(arguments[0],t)&&(e+=t+": "+arguments[0][t]+", ");e=e.slice(0,-2)}else e=arguments[i];n.push(e)}B(r+"\nArguments: "+Array.prototype.slice.call(n).join("")+"\n"+(new Error).stack),s=!1}return a.apply(this,arguments)},a)}var i,K={};function _(e,t){null!=A.deprecationHandler&&A.deprecationHandler(e,t),K[e]||(B(t),K[e]=!0)}function w(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function q(e,t){var n,i=h({},e);for(n in t)d(t,n)&&(l(e[n])&&l(t[n])?(i[n]={},h(i[n],e[n]),h(i[n],t[n])):null!=t[n]?i[n]=t[n]:delete i[n]);for(n in e)d(e,n)&&!d(t,n)&&l(e[n])&&(i[n]=h({},i[n]));return i}function U(e){null!=e&&this.set(e)}A.suppressDeprecationWarnings=!1,A.deprecationHandler=null,i=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)d(e,t)&&n.push(t);return n};function Y(e,t,n){var i=""+Math.abs(e),r=t-i.length;return(0<=e?n?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+i}var W=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,D=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,k={},G={};function F(e,t,n,i){var r="string"==typeof i?function(){return this[i]()}:i;e&&(G[e]=r),t&&(G[t[0]]=function(){return Y(r.apply(this,arguments),t[1],t[2])}),n&&(G[n]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function x(e,t){return e.isValid()?(t=O(t,e.localeData()),k[t]=k[t]||function(i){for(var e,r=i.match(W),t=0,a=r.length;t<a;t++)G[r[t]]?r[t]=G[r[t]]:r[t]=(e=r[t]).match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"");return function(e){for(var t="",n=0;n<a;n++)t+=w(r[n])?r[n].call(e,i):r[n];return t}}(t),k[t](e)):e.localeData().invalidDate()}function O(e,t){var n=5;function i(e){return t.longDateFormat(e)||e}for(D.lastIndex=0;0<=n&&D.test(e);)e=e.replace(D,i),D.lastIndex=0,--n;return e}var S={};function E(e,t){var n=e.toLowerCase();S[n]=S[n+"s"]=S[t]=e}function P(e){return"string"==typeof e?S[e]||S[e.toLowerCase()]:void 0}function T(e){var t,n,i={};for(n in e)d(e,n)&&(t=P(n))&&(i[t]=e[n]);return i}var M={};function Z(e,t){M[e]=t}function R(e){return e%4==0&&e%100!=0||e%400==0}function I(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function j(e){var t=+e,n=0;return 0!=t&&isFinite(t)&&(n=I(t)),n}function N(t,n){return function(e){return null!=e?(V(this,t,e),A.updateOffset(this,n),this):H(this,t)}}function H(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function V(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&R(e.year())&&1===e.month()&&29===e.date()?(n=j(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Ue(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var L,z=/\d/,J=/\d\d/,$=/\d{3}/,X=/\d{4}/,ee=/[+-]?\d{6}/,te=/\d\d?/,ne=/\d\d\d\d?/,ie=/\d\d\d\d\d\d?/,re=/\d{1,3}/,ae=/\d{1,4}/,se=/[+-]?\d{1,6}/,oe=/\d+/,le=/[+-]?\d+/,pe=/Z|[+-]\d\d:?\d\d/gi,ue=/Z|[+-]\d\d(?::?\d\d)?/gi,ce=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function he(e,n,i){L[e]=w(n)?n:function(e,t){return e&&i?i:n}}function Ae(e,t){return d(L,e)?L[e](t._strict,t._locale):new RegExp(de(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,i,r){return t||n||i||r})))}function de(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}L={};var me={};function fe(e,n){var t,i=n;for("string"==typeof e&&(e=[e]),u(n)&&(i=function(e,t){t[n]=j(e)}),t=0;t<e.length;t++)me[e[t]]=i}function ge(e,r){fe(e,function(e,t,n,i){n._w=n._w||{},r(e,n._w,n,i)})}var ve,be=0,Ce=1,ye=2,Qe=3,Be=4,Ke=5,_e=6,we=7,qe=8;function Ue(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,i=(t%(n=12)+n)%n;return e+=(t-i)/12,1==i?R(e)?29:28:31-i%7%2}ve=Array.prototype.indexOf?Array.prototype.indexOf:function(e){for(var t=0;t<this.length;++t)if(this[t]===e)return t;return-1},F("M",["MM",2],"Mo",function(){return this.month()+1}),F("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),F("MMMM",0,0,function(e){return this.localeData().months(this,e)}),E("month","M"),Z("month",8),he("M",te),he("MM",te,J),he("MMM",function(e,t){return t.monthsShortRegex(e)}),he("MMMM",function(e,t){return t.monthsRegex(e)}),fe(["M","MM"],function(e,t){t[Ce]=j(e)-1}),fe(["MMM","MMMM"],function(e,t,n,i){var r=n._locale.monthsParse(e,i,n._strict);null!=r?t[Ce]=r:f(n).invalidMonth=e});var Ye="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),We="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),De=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,ke=ce,Ge=ce;function Fe(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=j(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Ue(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function xe(e){return null!=e?(Fe(this,e),A.updateOffset(this,!0),this):H(this,"Month")}function Oe(){function e(e,t){return t.length-e.length}for(var t,n=[],i=[],r=[],a=0;a<12;a++)t=m([2e3,a]),n.push(this.monthsShort(t,"")),i.push(this.months(t,"")),r.push(this.months(t,"")),r.push(this.monthsShort(t,""));for(n.sort(e),i.sort(e),r.sort(e),a=0;a<12;a++)n[a]=de(n[a]),i[a]=de(i[a]);for(a=0;a<24;a++)r[a]=de(r[a]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+n.join("|")+")","i")}function Se(e){return R(e)?366:365}F("Y",0,0,function(){var e=this.year();return e<=9999?Y(e,4):"+"+e}),F(0,["YY",2],0,function(){return this.year()%100}),F(0,["YYYY",4],0,"year"),F(0,["YYYYY",5],0,"year"),F(0,["YYYYYY",6,!0],0,"year"),E("year","y"),Z("year",1),he("Y",le),he("YY",te,J),he("YYYY",ae,X),he("YYYYY",se,ee),he("YYYYYY",se,ee),fe(["YYYYY","YYYYYY"],be),fe("YYYY",function(e,t){t[be]=2===e.length?A.parseTwoDigitYear(e):j(e)}),fe("YY",function(e,t){t[be]=A.parseTwoDigitYear(e)}),fe("Y",function(e,t){t[be]=parseInt(e,10)}),A.parseTwoDigitYear=function(e){return j(e)+(68<j(e)?1900:2e3)};var Ee=N("FullYear",!0);function Pe(e){var t,n;return e<100&&0<=e?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Te(e,t,n){var i=7+t-n;return i-(7+Pe(e,0,i).getUTCDay()-t)%7-1}function Me(e,t,n,i,r){var a,s=1+7*(t-1)+(7+n-i)%7+Te(e,i,r),o=s<=0?Se(a=e-1)+s:s>Se(e)?(a=e+1,s-Se(e)):(a=e,s);return{year:a,dayOfYear:o}}function Ze(e,t,n){var i,r,a=Te(e.year(),t,n),s=Math.floor((e.dayOfYear()-a-1)/7)+1;return s<1?i=s+Re(r=e.year()-1,t,n):s>Re(e.year(),t,n)?(i=s-Re(e.year(),t,n),r=e.year()+1):(r=e.year(),i=s),{week:i,year:r}}function Re(e,t,n){var i=Te(e,t,n),r=Te(e+1,t,n);return(Se(e)-i+r)/7}F("w",["ww",2],"wo","week"),F("W",["WW",2],"Wo","isoWeek"),E("week","w"),E("isoWeek","W"),Z("week",5),Z("isoWeek",5),he("w",te),he("ww",te,J),he("W",te),he("WW",te,J),ge(["w","ww","W","WW"],function(e,t,n,i){t[i.substr(0,1)]=j(e)});function Ie(e,t){return e.slice(t,7).concat(e.slice(0,t))}F("d",0,"do","day"),F("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),F("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),F("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),F("e",0,0,"weekday"),F("E",0,0,"isoWeekday"),E("day","d"),E("weekday","e"),E("isoWeekday","E"),Z("day",11),Z("weekday",11),Z("isoWeekday",11),he("d",te),he("e",te),he("E",te),he("dd",function(e,t){return t.weekdaysMinRegex(e)}),he("ddd",function(e,t){return t.weekdaysShortRegex(e)}),he("dddd",function(e,t){return t.weekdaysRegex(e)}),ge(["dd","ddd","dddd"],function(e,t,n,i){var r=n._locale.weekdaysParse(e,i,n._strict);null!=r?t.d=r:f(n).invalidWeekday=e}),ge(["d","e","E"],function(e,t,n,i){t[i]=j(e)});var je="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ne="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),He="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ve=ce,Le=ce,ze=ce;function Je(){function e(e,t){return t.length-e.length}for(var t,n,i,r,a=[],s=[],o=[],l=[],p=0;p<7;p++)t=m([2e3,1]).day(p),n=de(this.weekdaysMin(t,"")),i=de(this.weekdaysShort(t,"")),r=de(this.weekdays(t,"")),a.push(n),s.push(i),o.push(r),l.push(n),l.push(i),l.push(r);a.sort(e),s.sort(e),o.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function $e(){return this.hours()%12||12}function Xe(e,t){F(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function et(e,t){return t._meridiemParse}F("H",["HH",2],0,"hour"),F("h",["hh",2],0,$e),F("k",["kk",2],0,function(){return this.hours()||24}),F("hmm",0,0,function(){return""+$e.apply(this)+Y(this.minutes(),2)}),F("hmmss",0,0,function(){return""+$e.apply(this)+Y(this.minutes(),2)+Y(this.seconds(),2)}),F("Hmm",0,0,function(){return""+this.hours()+Y(this.minutes(),2)}),F("Hmmss",0,0,function(){return""+this.hours()+Y(this.minutes(),2)+Y(this.seconds(),2)}),Xe("a",!0),Xe("A",!1),E("hour","h"),Z("hour",13),he("a",et),he("A",et),he("H",te),he("h",te),he("k",te),he("HH",te,J),he("hh",te,J),he("kk",te,J),he("hmm",ne),he("hmmss",ie),he("Hmm",ne),he("Hmmss",ie),fe(["H","HH"],Qe),fe(["k","kk"],function(e,t,n){var i=j(e);t[Qe]=24===i?0:i}),fe(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),fe(["h","hh"],function(e,t,n){t[Qe]=j(e),f(n).bigHour=!0}),fe("hmm",function(e,t,n){var i=e.length-2;t[Qe]=j(e.substr(0,i)),t[Be]=j(e.substr(i)),f(n).bigHour=!0}),fe("hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Qe]=j(e.substr(0,i)),t[Be]=j(e.substr(i,2)),t[Ke]=j(e.substr(r)),f(n).bigHour=!0}),fe("Hmm",function(e,t,n){var i=e.length-2;t[Qe]=j(e.substr(0,i)),t[Be]=j(e.substr(i))}),fe("Hmmss",function(e,t,n){var i=e.length-4,r=e.length-2;t[Qe]=j(e.substr(0,i)),t[Be]=j(e.substr(i,2)),t[Ke]=j(e.substr(r))});var tt=N("Hours",!0);var nt,it={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ye,monthsShort:We,week:{dow:0,doy:6},weekdays:je,weekdaysMin:He,weekdaysShort:Ne,meridiemParse:/[ap]\.?m?\.?/i},rt={},at={};function st(e){return e?e.toLowerCase().replace("_","-"):e}function ot(e){for(var t,n,i,r,a=0;a<e.length;){for(t=(r=st(e[a]).split("-")).length,n=(n=st(e[a+1]))?n.split("-"):null;0<t;){if(i=lt(r.slice(0,t).join("-")))return i;if(n&&n.length>=t&&function(e,t){for(var n=Math.min(e.length,t.length),i=0;i<n;i+=1)if(e[i]!==t[i])return i;return n}(r,n)>=t-1)break;t--}a++}return nt}function lt(t){var e;if(void 0===rt[t]&&void 0!==ni&&ni&&ni.exports)try{e=nt._abbr,ti("./locale/"+t),pt(e)}catch(e){rt[t]=null}return rt[t]}function pt(e,t){var n;return e&&((n=a(t)?ct(e):ut(e,t))?nt=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),nt._abbr}function ut(e,t){if(null===t)return delete rt[e],null;var n,i=it;if(t.abbr=e,null!=rt[e])_("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),i=rt[e]._config;else if(null!=t.parentLocale)if(null!=rt[t.parentLocale])i=rt[t.parentLocale]._config;else{if(null==(n=lt(t.parentLocale)))return at[t.parentLocale]||(at[t.parentLocale]=[]),at[t.parentLocale].push({name:e,config:t}),null;i=n._config}return rt[e]=new U(q(i,t)),at[e]&&at[e].forEach(function(e){ut(e.name,e.config)}),pt(e),rt[e]}function ct(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return nt;if(!o(e)){if(t=lt(e))return t;e=[e]}return ot(e)}function ht(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[Ce]<0||11<n[Ce]?Ce:n[ye]<1||n[ye]>Ue(n[be],n[Ce])?ye:n[Qe]<0||24<n[Qe]||24===n[Qe]&&(0!==n[Be]||0!==n[Ke]||0!==n[_e])?Qe:n[Be]<0||59<n[Be]?Be:n[Ke]<0||59<n[Ke]?Ke:n[_e]<0||999<n[_e]?_e:-1,f(e)._overflowDayOfYear&&(t<be||ye<t)&&(t=ye),f(e)._overflowWeeks&&-1===t&&(t=we),f(e)._overflowWeekday&&-1===t&&(t=qe),f(e).overflow=t),e}var At=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,dt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,mt=/Z|[+-]\d\d(?::?\d\d)?/,ft=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],gt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],vt=/^\/?Date\((-?\d+)/i,bt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,Ct={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function yt(e){var t,n,i,r,a,s,o=e._i,l=At.exec(o)||dt.exec(o);if(l){for(f(e).iso=!0,t=0,n=ft.length;t<n;t++)if(ft[t][1].exec(l[1])){r=ft[t][0],i=!1!==ft[t][2];break}if(null==r)return void(e._isValid=!1);if(l[3]){for(t=0,n=gt.length;t<n;t++)if(gt[t][1].exec(l[3])){a=(l[2]||" ")+gt[t][0];break}if(null==a)return void(e._isValid=!1)}if(!i&&null!=a)return void(e._isValid=!1);if(l[4]){if(!mt.exec(l[4]))return void(e._isValid=!1);s="Z"}e._f=r+(a||"")+(s||""),wt(e)}else e._isValid=!1}function Qt(e,t,n,i,r,a){var s=[function(e){var t=parseInt(e,10);{if(t<=49)return 2e3+t;if(t<=999)return 1900+t}return t}(e),We.indexOf(t),parseInt(n,10),parseInt(i,10),parseInt(r,10)];return a&&s.push(parseInt(a,10)),s}function Bt(e){var t,n,i,r,a=bt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(a){if(t=Qt(a[4],a[3],a[2],a[5],a[6],a[7]),n=a[1],i=t,r=e,n&&Ne.indexOf(n)!==new Date(i[0],i[1],i[2]).getDay()&&(f(r).weekdayMismatch=!0,!void(r._isValid=!1)))return;e._a=t,e._tzm=function(e,t,n){if(e)return Ct[e];if(t)return 0;var i=parseInt(n,10),r=i%100;return 60*((i-r)/100)+r}(a[8],a[9],a[10]),e._d=Pe.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Kt(e,t,n){return null!=e?e:null!=t?t:n}function _t(e){var t,n,i,r,a,s,o,l=[];if(!e._d){for(s=e,o=new Date(A.now()),i=s._useUTC?[o.getUTCFullYear(),o.getUTCMonth(),o.getUTCDate()]:[o.getFullYear(),o.getMonth(),o.getDate()],e._w&&null==e._a[ye]&&null==e._a[Ce]&&function(e){var t,n,i,r,a,s,o,l,p;null!=(t=e._w).GG||null!=t.W||null!=t.E?(a=1,s=4,n=Kt(t.GG,e._a[be],Ze(Yt(),1,4).year),i=Kt(t.W,1),((r=Kt(t.E,1))<1||7<r)&&(l=!0)):(a=e._locale._week.dow,s=e._locale._week.doy,p=Ze(Yt(),a,s),n=Kt(t.gg,e._a[be],p.year),i=Kt(t.w,p.week),null!=t.d?((r=t.d)<0||6<r)&&(l=!0):null!=t.e?(r=t.e+a,(t.e<0||6<t.e)&&(l=!0)):r=a);i<1||i>Re(n,a,s)?f(e)._overflowWeeks=!0:null!=l?f(e)._overflowWeekday=!0:(o=Me(n,i,r,a,s),e._a[be]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(a=Kt(e._a[be],i[be]),(e._dayOfYear>Se(a)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=Pe(a,0,e._dayOfYear),e._a[Ce]=n.getUTCMonth(),e._a[ye]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=l[t]=i[t];for(;t<7;t++)e._a[t]=l[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[Qe]&&0===e._a[Be]&&0===e._a[Ke]&&0===e._a[_e]&&(e._nextDay=!0,e._a[Qe]=0),e._d=(e._useUTC?Pe:function(e,t,n,i,r,a,s){var o;return e<100&&0<=e?(o=new Date(e+400,t,n,i,r,a,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,i,r,a,s),o}).apply(null,l),r=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[Qe]=24),e._w&&void 0!==e._w.d&&e._w.d!==r&&(f(e).weekdayMismatch=!0)}}function wt(e){if(e._f!==A.ISO_8601)if(e._f!==A.RFC_2822){e._a=[],f(e).empty=!0;for(var t,n,i,r,a,s,o,l=""+e._i,p=l.length,u=0,c=O(e._f,e._locale).match(W)||[],h=0;h<c.length;h++)n=c[h],(t=(l.match(Ae(n,e))||[])[0])&&(0<(i=l.substr(0,l.indexOf(t))).length&&f(e).unusedInput.push(i),l=l.slice(l.indexOf(t)+t.length),u+=t.length),G[n]?(t?f(e).empty=!1:f(e).unusedTokens.push(n),a=n,o=e,null!=(s=t)&&d(me,a)&&me[a](s,o._a,o,a)):e._strict&&!t&&f(e).unusedTokens.push(n);f(e).charsLeftOver=p-u,0<l.length&&f(e).unusedInput.push(l),e._a[Qe]<=12&&!0===f(e).bigHour&&0<e._a[Qe]&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[Qe]=function(e,t,n){var i;if(null==n)return t;return null!=e.meridiemHour?e.meridiemHour(t,n):(null!=e.isPM&&((i=e.isPM(n))&&t<12&&(t+=12),i||12!==t||(t=0)),t)}(e._locale,e._a[Qe],e._meridiem),null!==(r=f(e).era)&&(e._a[be]=e._locale.erasConvertYear(r,e._a[be])),_t(e),ht(e)}else Bt(e);else yt(e)}function qt(e){var t,n,i=e._i,r=e._f;return e._locale=e._locale||ct(e._l),null===i||void 0===r&&""===i?v({nullInput:!0}):("string"==typeof i&&(e._i=i=e._locale.preparse(i)),Q(i)?new y(ht(i)):(s(i)?e._d=i:o(r)?function(e){var t,n,i,r,a,s,o=!1;if(0===e._f.length)return f(e).invalidFormat=!0,e._d=new Date(NaN);for(r=0;r<e._f.length;r++)a=0,s=!1,t=C({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[r],wt(t),g(t)&&(s=!0),a+=f(t).charsLeftOver,a+=10*f(t).unusedTokens.length,f(t).score=a,o?a<i&&(i=a,n=t):(null==i||a<i||s)&&(i=a,n=t,s&&(o=!0));h(e,n||t)}(e):r?wt(e):a(n=(t=e)._i)?t._d=new Date(A.now()):s(n)?t._d=new Date(n.valueOf()):"string"==typeof n?function(e){var t=vt.exec(e._i);null===t?(yt(e),!1===e._isValid&&(delete e._isValid,Bt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:A.createFromInputFallback(e)))):e._d=new Date(+t[1])}(t):o(n)?(t._a=c(n.slice(0),function(e){return parseInt(e,10)}),_t(t)):l(n)?function(e){var t,n;e._d||(n=void 0===(t=T(e._i)).day?t.date:t.day,e._a=c([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),_t(e))}(t):u(n)?t._d=new Date(n):A.createFromInputFallback(t),g(e)||(e._d=null),e))}function Ut(e,t,n,i,r){var a,s={};return!0!==t&&!1!==t||(i=t,t=void 0),!0!==n&&!1!==n||(i=n,n=void 0),(l(e)&&p(e)||o(e)&&0===e.length)&&(e=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=r,s._l=n,s._i=e,s._f=t,s._strict=i,(a=new y(ht(qt(s))))._nextDay&&(a.add(1,"d"),a._nextDay=void 0),a}function Yt(e,t,n,i){return Ut(e,t,n,i,!1)}A.createFromInputFallback=n("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),A.ISO_8601=function(){},A.RFC_2822=function(){};var Wt=n("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Yt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:v()}),Dt=n("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Yt.apply(null,arguments);return this.isValid()&&e.isValid()?this<e?this:e:v()});function kt(e,t){var n,i;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return Yt();for(n=t[0],i=1;i<t.length;++i)t[i].isValid()&&!t[i][e](n)||(n=t[i]);return n}var Gt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ft(e){var t=T(e),n=t.year||0,i=t.quarter||0,r=t.month||0,a=t.week||t.isoWeek||0,s=t.day||0,o=t.hour||0,l=t.minute||0,p=t.second||0,u=t.millisecond||0;this._isValid=function(e){var t,n,i=!1;for(t in e)if(d(e,t)&&(-1===ve.call(Gt,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<Gt.length;++n)if(e[Gt[n]]){if(i)return!1;parseFloat(e[Gt[n]])!==j(e[Gt[n]])&&(i=!0)}return!0}(t),this._milliseconds=+u+1e3*p+6e4*l+1e3*o*60*60,this._days=+s+7*a,this._months=+r+3*i+12*n,this._data={},this._locale=ct(),this._bubble()}function xt(e){return e instanceof Ft}function Ot(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function St(e,n){F(e,0,0,function(){var e=this.utcOffset(),t="+";return e<0&&(e=-e,t="-"),t+Y(~~(e/60),2)+n+Y(~~e%60,2)})}St("Z",":"),St("ZZ",""),he("Z",ue),he("ZZ",ue),fe(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Pt(ue,e)});var Et=/([\+\-]|\d\d)/gi;function Pt(e,t){var n,i,r=(t||"").match(e);return null===r?null:0===(i=60*(n=((r[r.length-1]||[])+"").match(Et)||["-",0,0])[1]+j(n[2]))?0:"+"===n[0]?i:-i}function Tt(e,t){var n,i;return t._isUTC?(n=t.clone(),i=(Q(e)||s(e)?e.valueOf():Yt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+i),A.updateOffset(n,!1),n):Yt(e).local()}function Mt(e){return-Math.round(e._d.getTimezoneOffset())}function Zt(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}A.updateOffset=function(){};var Rt=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,It=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function jt(e,t){var n,i,r,a=e,s=null;return xt(e)?a={ms:e._milliseconds,d:e._days,M:e._months}:u(e)||!isNaN(+e)?(a={},t?a[t]=+e:a.milliseconds=+e):(s=Rt.exec(e))?(n="-"===s[1]?-1:1,a={y:0,d:j(s[ye])*n,h:j(s[Qe])*n,m:j(s[Be])*n,s:j(s[Ke])*n,ms:j(Ot(1e3*s[_e]))*n}):(s=It.exec(e))?(n="-"===s[1]?-1:1,a={y:Nt(s[2],n),M:Nt(s[3],n),w:Nt(s[4],n),d:Nt(s[5],n),h:Nt(s[6],n),m:Nt(s[7],n),s:Nt(s[8],n)}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(r=function(e,t){var n;if(!e.isValid()||!t.isValid())return{milliseconds:0,months:0};t=Tt(t,e),e.isBefore(t)?n=Ht(e,t):((n=Ht(t,e)).milliseconds=-n.milliseconds,n.months=-n.months);return n}(Yt(a.from),Yt(a.to)),(a={}).ms=r.milliseconds,a.M=r.months),i=new Ft(a),xt(e)&&d(e,"_locale")&&(i._locale=e._locale),xt(e)&&d(e,"_isValid")&&(i._isValid=e._isValid),i}function Nt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Ht(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=t-e.clone().add(n.months,"M"),n}function Vt(i,r){return function(e,t){var n;return null===t||isNaN(+t)||(_(r,"moment()."+r+"(period, number) is deprecated. Please use moment()."+r+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),n=e,e=t,t=n),Lt(this,jt(e,t),i),this}}function Lt(e,t,n,i){var r=t._milliseconds,a=Ot(t._days),s=Ot(t._months);e.isValid()&&(i=null==i||i,s&&Fe(e,H(e,"Month")+s*n),a&&V(e,"Date",H(e,"Date")+a*n),r&&e._d.setTime(e._d.valueOf()+r*n),i&&A.updateOffset(e,a||s))}jt.fn=Ft.prototype,jt.invalid=function(){return jt(NaN)};var zt=Vt(1,"add"),Jt=Vt(-1,"subtract");function $t(e){return"string"==typeof e||e instanceof String}function Xt(e){return Q(e)||s(e)||$t(e)||u(e)||function(t){var e=o(t),n=!1;e&&(n=0===t.filter(function(e){return!u(e)&&$t(t)}).length);return e&&n}(e)||function(e){var t,n,i=l(e)&&!p(e),r=!1,a=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"];for(t=0;t<a.length;t+=1)n=a[t],r=r||d(e,n);return i&&r}(e)||null==e}function en(e,t){if(e.date()<t.date())return-en(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),i=e.clone().add(n,"months"),r=t-i<0?(t-i)/(i-e.clone().add(n-1,"months")):(t-i)/(e.clone().add(1+n,"months")-i);return-(n+r)||0}function tn(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ct(e))&&(this._locale=t),this)}A.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",A.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var nn=n("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function rn(){return this._locale}var an=126227808e5;function sn(e,t){return(e%t+t)%t}function on(e,t,n){return e<100&&0<=e?new Date(e+400,t,n)-an:new Date(e,t,n).valueOf()}function ln(e,t,n){return e<100&&0<=e?Date.UTC(e+400,t,n)-an:Date.UTC(e,t,n)}function pn(e,t){return t.erasAbbrRegex(e)}function un(){for(var e=[],t=[],n=[],i=[],r=this.eras(),a=0,s=r.length;a<s;++a)t.push(de(r[a].name)),e.push(de(r[a].abbr)),n.push(de(r[a].narrow)),i.push(de(r[a].name)),i.push(de(r[a].abbr)),i.push(de(r[a].narrow));this._erasRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+t.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+e.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+n.join("|")+")","i")}function cn(e,t){F(0,[e,e.length],0,t)}function hn(e,t,n,i,r){var a;return null==e?Ze(this,i,r).year:((a=Re(e,i,r))<t&&(t=a),function(e,t,n,i,r){var a=Me(e,t,n,i,r),s=Pe(a.year,0,a.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}.call(this,e,t,n,i,r))}F("N",0,0,"eraAbbr"),F("NN",0,0,"eraAbbr"),F("NNN",0,0,"eraAbbr"),F("NNNN",0,0,"eraName"),F("NNNNN",0,0,"eraNarrow"),F("y",["y",1],"yo","eraYear"),F("y",["yy",2],0,"eraYear"),F("y",["yyy",3],0,"eraYear"),F("y",["yyyy",4],0,"eraYear"),he("N",pn),he("NN",pn),he("NNN",pn),he("NNNN",function(e,t){return t.erasNameRegex(e)}),he("NNNNN",function(e,t){return t.erasNarrowRegex(e)}),fe(["N","NN","NNN","NNNN","NNNNN"],function(e,t,n,i){var r=n._locale.erasParse(e,i,n._strict);r?f(n).era=r:f(n).invalidEra=e}),he("y",oe),he("yy",oe),he("yyy",oe),he("yyyy",oe),he("yo",function(e,t){return t._eraYearOrdinalRegex||oe}),fe(["y","yy","yyy","yyyy"],be),fe(["yo"],function(e,t,n,i){var r;n._locale._eraYearOrdinalRegex&&(r=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[be]=n._locale.eraYearOrdinalParse(e,r):t[be]=parseInt(e,10)}),F(0,["gg",2],0,function(){return this.weekYear()%100}),F(0,["GG",2],0,function(){return this.isoWeekYear()%100}),cn("gggg","weekYear"),cn("ggggg","weekYear"),cn("GGGG","isoWeekYear"),cn("GGGGG","isoWeekYear"),E("weekYear","gg"),E("isoWeekYear","GG"),Z("weekYear",1),Z("isoWeekYear",1),he("G",le),he("g",le),he("GG",te,J),he("gg",te,J),he("GGGG",ae,X),he("gggg",ae,X),he("GGGGG",se,ee),he("ggggg",se,ee),ge(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,i){t[i.substr(0,2)]=j(e)}),ge(["gg","GG"],function(e,t,n,i){t[i]=A.parseTwoDigitYear(e)}),F("Q",0,"Qo","quarter"),E("quarter","Q"),Z("quarter",7),he("Q",z),fe("Q",function(e,t){t[Ce]=3*(j(e)-1)}),F("D",["DD",2],"Do","date"),E("date","D"),Z("date",9),he("D",te),he("DD",te,J),he("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),fe(["D","DD"],ye),fe("Do",function(e,t){t[ye]=j(e.match(te)[0])});var An=N("Date",!0);F("DDD",["DDDD",3],"DDDo","dayOfYear"),E("dayOfYear","DDD"),Z("dayOfYear",4),he("DDD",re),he("DDDD",$),fe(["DDD","DDDD"],function(e,t,n){n._dayOfYear=j(e)}),F("m",["mm",2],0,"minute"),E("minute","m"),Z("minute",14),he("m",te),he("mm",te,J),fe(["m","mm"],Be);var dn=N("Minutes",!1);F("s",["ss",2],0,"second"),E("second","s"),Z("second",15),he("s",te),he("ss",te,J),fe(["s","ss"],Ke);var mn,fn,gn=N("Seconds",!1);for(F("S",0,0,function(){return~~(this.millisecond()/100)}),F(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),F(0,["SSS",3],0,"millisecond"),F(0,["SSSS",4],0,function(){return 10*this.millisecond()}),F(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),F(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),F(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),F(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),F(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),E("millisecond","ms"),Z("millisecond",16),he("S",re,z),he("SS",re,J),he("SSS",re,$),mn="SSSS";mn.length<=9;mn+="S")he(mn,oe);function vn(e,t){t[_e]=j(1e3*("0."+e))}for(mn="S";mn.length<=9;mn+="S")fe(mn,vn);fn=N("Milliseconds",!1),F("z",0,0,"zoneAbbr"),F("zz",0,0,"zoneName");var bn=y.prototype;function Cn(e){return e}bn.add=zt,bn.calendar=function(e,t){1===arguments.length&&(arguments[0]?Xt(arguments[0])?(e=arguments[0],t=void 0):function(e){for(var t=l(e)&&!p(e),n=!1,i=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"],r=0;r<i.length;r+=1)n=n||d(e,i[r]);return t&&n}(arguments[0])&&(t=arguments[0],e=void 0):t=e=void 0);var n=e||Yt(),i=Tt(n,this).startOf("day"),r=A.calendarFormat(this,i)||"sameElse",a=t&&(w(t[r])?t[r].call(this,n):t[r]);return this.format(a||this.localeData().calendar(r,this,Yt(n)))},bn.clone=function(){return new y(this)},bn.diff=function(e,t,n){var i,r,a;if(!this.isValid())return NaN;if(!(i=Tt(e,this)).isValid())return NaN;switch(r=6e4*(i.utcOffset()-this.utcOffset()),t=P(t)){case"year":a=en(this,i)/12;break;case"month":a=en(this,i);break;case"quarter":a=en(this,i)/3;break;case"second":a=(this-i)/1e3;break;case"minute":a=(this-i)/6e4;break;case"hour":a=(this-i)/36e5;break;case"day":a=(this-i-r)/864e5;break;case"week":a=(this-i-r)/6048e5;break;default:a=this-i}return n?a:I(a)},bn.endOf=function(e){var t,n;if(void 0===(e=P(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:on,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-sn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-sn(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-sn(t,1e3)-1}return this._d.setTime(t),A.updateOffset(this,!0),this},bn.format=function(e){e=e||(this.isUtc()?A.defaultFormatUtc:A.defaultFormat);var t=x(this,e);return this.localeData().postformat(t)},bn.from=function(e,t){return this.isValid()&&(Q(e)&&e.isValid()||Yt(e).isValid())?jt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},bn.fromNow=function(e){return this.from(Yt(),e)},bn.to=function(e,t){return this.isValid()&&(Q(e)&&e.isValid()||Yt(e).isValid())?jt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},bn.toNow=function(e){return this.to(Yt(),e)},bn.get=function(e){return w(this[e=P(e)])?this[e]():this},bn.invalidAt=function(){return f(this).overflow},bn.isAfter=function(e,t){var n=Q(e)?e:Yt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=P(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},bn.isBefore=function(e,t){var n=Q(e)?e:Yt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=P(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},bn.isBetween=function(e,t,n,i){var r=Q(e)?e:Yt(e),a=Q(t)?t:Yt(t);return!!(this.isValid()&&r.isValid()&&a.isValid())&&(("("===(i=i||"()")[0]?this.isAfter(r,n):!this.isBefore(r,n))&&(")"===i[1]?this.isBefore(a,n):!this.isAfter(a,n)))},bn.isSame=function(e,t){var n,i=Q(e)?e:Yt(e);return!(!this.isValid()||!i.isValid())&&("millisecond"===(t=P(t)||"millisecond")?this.valueOf()===i.valueOf():(n=i.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},bn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},bn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},bn.isValid=function(){return g(this)},bn.lang=nn,bn.locale=tn,bn.localeData=rn,bn.max=Dt,bn.min=Wt,bn.parsingFlags=function(){return h({},f(this))},bn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t,n=[];for(t in e)d(e,t)&&n.push({unit:t,priority:M[t]});return n.sort(function(e,t){return e.priority-t.priority}),n}(e=T(e)),i=0;i<n.length;i++)this[n[i].unit](e[n[i].unit]);else if(w(this[e=P(e)]))return this[e](t);return this},bn.startOf=function(e){var t,n;if(void 0===(e=P(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?ln:on,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=sn(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=sn(t,6e4);break;case"second":t=this._d.valueOf(),t-=sn(t,1e3)}return this._d.setTime(t),A.updateOffset(this,!0),this},bn.subtract=Jt,bn.toArray=function(){return[this.year(),this.month(),this.date(),this.hour(),this.minute(),this.second(),this.millisecond()]},bn.toObject=function(){return{years:this.year(),months:this.month(),date:this.date(),hours:this.hours(),minutes:this.minutes(),seconds:this.seconds(),milliseconds:this.milliseconds()}},bn.toDate=function(){return new Date(this.valueOf())},bn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||9999<n.year()?x(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):w(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",x(n,"Z")):x(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},bn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,i="moment",r="";return this.isLocal()||(i=0===this.utcOffset()?"moment.utc":"moment.parseZone",r="Z"),e="["+i+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=r+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(bn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),bn.toJSON=function(){return this.isValid()?this.toISOString():null},bn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},bn.unix=function(){return Math.floor(this.valueOf()/1e3)},bn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},bn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},bn.eraName=function(){for(var e,t=this.localeData().eras(),n=0,i=t.length;n<i;++n){if(e=this.clone().startOf("day").valueOf(),t[n].since<=e&&e<=t[n].until)return t[n].name;if(t[n].until<=e&&e<=t[n].since)return t[n].name}return""},bn.eraNarrow=function(){for(var e,t=this.localeData().eras(),n=0,i=t.length;n<i;++n){if(e=this.clone().startOf("day").valueOf(),t[n].since<=e&&e<=t[n].until)return t[n].narrow;if(t[n].until<=e&&e<=t[n].since)return t[n].narrow}return""},bn.eraAbbr=function(){for(var e,t=this.localeData().eras(),n=0,i=t.length;n<i;++n){if(e=this.clone().startOf("day").valueOf(),t[n].since<=e&&e<=t[n].until)return t[n].abbr;if(t[n].until<=e&&e<=t[n].since)return t[n].abbr}return""},bn.eraYear=function(){for(var e,t,n=this.localeData().eras(),i=0,r=n.length;i<r;++i)if(e=n[i].since<=n[i].until?1:-1,t=this.clone().startOf("day").valueOf(),n[i].since<=t&&t<=n[i].until||n[i].until<=t&&t<=n[i].since)return(this.year()-A(n[i].since).year())*e+n[i].offset;return this.year()},bn.year=Ee,bn.isLeapYear=function(){return R(this.year())},bn.weekYear=function(e){return hn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},bn.isoWeekYear=function(e){return hn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},bn.quarter=bn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},bn.month=xe,bn.daysInMonth=function(){return Ue(this.year(),this.month())},bn.week=bn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},bn.isoWeek=bn.isoWeeks=function(e){var t=Ze(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},bn.weeksInYear=function(){var e=this.localeData()._week;return Re(this.year(),e.dow,e.doy)},bn.weeksInWeekYear=function(){var e=this.localeData()._week;return Re(this.weekYear(),e.dow,e.doy)},bn.isoWeeksInYear=function(){return Re(this.year(),1,4)},bn.isoWeeksInISOWeekYear=function(){return Re(this.isoWeekYear(),1,4)},bn.date=An,bn.day=bn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t,n,i=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(t=e,n=this.localeData(),e="string"!=typeof t?t:isNaN(t)?"number"==typeof(t=n.weekdaysParse(t))?t:null:parseInt(t,10),this.add(e-i,"d")):i},bn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},bn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null==e)return this.day()||7;var t,n,i=(t=e,n=this.localeData(),"string"==typeof t?n.weekdaysParse(t)%7||7:isNaN(t)?null:t);return this.day(this.day()%7?i:i-7)},bn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},bn.hour=bn.hours=tt,bn.minute=bn.minutes=dn,bn.second=bn.seconds=gn,bn.millisecond=bn.milliseconds=fn,bn.utcOffset=function(e,t,n){var i,r=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null==e)return this._isUTC?r:Mt(this);if("string"==typeof e){if(null===(e=Pt(ue,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(i=Mt(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==e&&(!t||this._changeInProgress?Lt(this,jt(e-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,A.updateOffset(this,!0),this._changeInProgress=null)),this},bn.utc=function(e){return this.utcOffset(0,e)},bn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Mt(this),"m")),this},bn.parseZone=function(){var e;return null!=this._tzm?this.utcOffset(this._tzm,!1,!0):"string"==typeof this._i&&(null!=(e=Pt(pe,this._i))?this.utcOffset(e):this.utcOffset(0,!0)),this},bn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Yt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},bn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},bn.isLocal=function(){return!!this.isValid()&&!this._isUTC},bn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},bn.isUtc=Zt,bn.isUTC=Zt,bn.zoneAbbr=function(){return this._isUTC?"UTC":""},bn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},bn.dates=n("dates accessor is deprecated. Use date instead.",An),bn.months=n("months accessor is deprecated. Use month instead",xe),bn.years=n("years accessor is deprecated. Use year instead",Ee),bn.zone=n("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),bn.isDSTShifted=n("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!a(this._isDSTShifted))return this._isDSTShifted;var e,t={};return C(t,this),(t=qt(t))._a?(e=(t._isUTC?m:Yt)(t._a),this._isDSTShifted=this.isValid()&&0<function(e,t,n){for(var i=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),a=0,s=0;s<i;s++)(n&&e[s]!==t[s]||!n&&j(e[s])!==j(t[s]))&&a++;return a+r}(t._a,e.toArray())):this._isDSTShifted=!1,this._isDSTShifted});var yn=U.prototype;function Qn(e,t,n,i){var r=ct(),a=m().set(i,t);return r[n](a,e)}function Bn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return Qn(e,t,n,"month");for(var i=[],r=0;r<12;r++)i[r]=Qn(e,r,n,"month");return i}function Kn(e,t,n,i){t=("boolean"==typeof e?u(t)&&(n=t,t=void 0):(t=e,e=!1,u(n=t)&&(n=t,t=void 0)),t||"");var r,a=ct(),s=e?a._week.dow:0,o=[];if(null!=n)return Qn(t,(n+s)%7,i,"day");for(r=0;r<7;r++)o[r]=Qn(t,(r+s)%7,i,"day");return o}yn.calendar=function(e,t,n){var i=this._calendar[e]||this._calendar.sameElse;return w(i)?i.call(t,n):i},yn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(W).map(function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e}).join(""),this._longDateFormat[e])},yn.invalidDate=function(){return this._invalidDate},yn.ordinal=function(e){return this._ordinal.replace("%d",e)},yn.preparse=Cn,yn.postformat=Cn,yn.relativeTime=function(e,t,n,i){var r=this._relativeTime[n];return w(r)?r(e,t,n,i):r.replace(/%d/i,e)},yn.pastFuture=function(e,t){var n=this._relativeTime[0<e?"future":"past"];return w(n)?n(t):n.replace(/%s/i,t)},yn.set=function(e){var t,n;for(n in e)d(e,n)&&(w(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},yn.eras=function(e,t){for(var n,i=this._eras||ct("en")._eras,r=0,a=i.length;r<a;++r){switch(typeof i[r].since){case"string":n=A(i[r].since).startOf("day"),i[r].since=n.valueOf()}switch(typeof i[r].until){case"undefined":i[r].until=1/0;break;case"string":n=A(i[r].until).startOf("day").valueOf(),i[r].until=n.valueOf()}}return i},yn.erasParse=function(e,t,n){var i,r,a,s,o,l=this.eras();for(e=e.toUpperCase(),i=0,r=l.length;i<r;++i)if(a=l[i].name.toUpperCase(),s=l[i].abbr.toUpperCase(),o=l[i].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(s===e)return l[i];break;case"NNNN":if(a===e)return l[i];break;case"NNNNN":if(o===e)return l[i]}else if(0<=[a,s,o].indexOf(e))return l[i]},yn.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?A(e.since).year():A(e.since).year()+(t-e.offset)*n},yn.erasAbbrRegex=function(e){return d(this,"_erasAbbrRegex")||un.call(this),e?this._erasAbbrRegex:this._erasRegex},yn.erasNameRegex=function(e){return d(this,"_erasNameRegex")||un.call(this),e?this._erasNameRegex:this._erasRegex},yn.erasNarrowRegex=function(e){return d(this,"_erasNarrowRegex")||un.call(this),e?this._erasNarrowRegex:this._erasRegex},yn.months=function(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||De).test(t)?"format":"standalone"][e.month()]:o(this._months)?this._months:this._months.standalone},yn.monthsShort=function(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[De.test(t)?"format":"standalone"][e.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},yn.monthsParse=function(e,t,n){var i,r,a;if(this._monthsParseExact)return function(e,t,n){var i,r,a,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],i=0;i<12;++i)a=m([2e3,i]),this._shortMonthsParse[i]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[i]=this.months(a,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(r=ve.call(this._shortMonthsParse,s))?r:null:-1!==(r=ve.call(this._longMonthsParse,s))?r:null:"MMM"===t?-1!==(r=ve.call(this._shortMonthsParse,s))||-1!==(r=ve.call(this._longMonthsParse,s))?r:null:-1!==(r=ve.call(this._longMonthsParse,s))||-1!==(r=ve.call(this._shortMonthsParse,s))?r:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;i<12;i++){if(r=m([2e3,i]),n&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),n||this._monthsParse[i]||(a="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[i]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[i].test(e))return i;if(n&&"MMM"===t&&this._shortMonthsParse[i].test(e))return i;if(!n&&this._monthsParse[i].test(e))return i}},yn.monthsRegex=function(e){return this._monthsParseExact?(d(this,"_monthsRegex")||Oe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(d(this,"_monthsRegex")||(this._monthsRegex=Ge),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},yn.monthsShortRegex=function(e){return this._monthsParseExact?(d(this,"_monthsRegex")||Oe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(d(this,"_monthsShortRegex")||(this._monthsShortRegex=ke),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},yn.week=function(e){return Ze(e,this._week.dow,this._week.doy).week},yn.firstDayOfYear=function(){return this._week.doy},yn.firstDayOfWeek=function(){return this._week.dow},yn.weekdays=function(e,t){var n=o(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ie(n,this._week.dow):e?n[e.day()]:n},yn.weekdaysMin=function(e){return!0===e?Ie(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},yn.weekdaysShort=function(e){return!0===e?Ie(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},yn.weekdaysParse=function(e,t,n){var i,r,a;if(this._weekdaysParseExact)return function(e,t,n){var i,r,a,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],i=0;i<7;++i)a=m([2e3,1]).day(i),this._minWeekdaysParse[i]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[i]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[i]=this.weekdays(a,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(r=ve.call(this._weekdaysParse,s))?r:null:"ddd"===t?-1!==(r=ve.call(this._shortWeekdaysParse,s))?r:null:-1!==(r=ve.call(this._minWeekdaysParse,s))?r:null:"dddd"===t?-1!==(r=ve.call(this._weekdaysParse,s))||-1!==(r=ve.call(this._shortWeekdaysParse,s))||-1!==(r=ve.call(this._minWeekdaysParse,s))?r:null:"ddd"===t?-1!==(r=ve.call(this._shortWeekdaysParse,s))||-1!==(r=ve.call(this._weekdaysParse,s))||-1!==(r=ve.call(this._minWeekdaysParse,s))?r:null:-1!==(r=ve.call(this._minWeekdaysParse,s))||-1!==(r=ve.call(this._weekdaysParse,s))||-1!==(r=ve.call(this._shortWeekdaysParse,s))?r:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;i<7;i++){if(r=m([2e3,1]).day(i),n&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[i]||(a="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[i]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[i].test(e))return i;if(n&&"ddd"===t&&this._shortWeekdaysParse[i].test(e))return i;if(n&&"dd"===t&&this._minWeekdaysParse[i].test(e))return i;if(!n&&this._weekdaysParse[i].test(e))return i}},yn.weekdaysRegex=function(e){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(d(this,"_weekdaysRegex")||(this._weekdaysRegex=Ve),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},yn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(d(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Le),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},yn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(d(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=ze),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},yn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},yn.meridiem=function(e,t,n){return 11<e?n?"pm":"PM":n?"am":"AM"},pt("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===j(e%100/10)?"th":1==t?"st":2==t?"nd":3==t?"rd":"th")}}),A.lang=n("moment.lang is deprecated. Use moment.locale instead.",pt),A.langData=n("moment.langData is deprecated. Use moment.localeData instead.",ct);var _n=Math.abs;function wn(e,t,n,i){var r=jt(t,n);return e._milliseconds+=i*r._milliseconds,e._days+=i*r._days,e._months+=i*r._months,e._bubble()}function qn(e){return e<0?Math.floor(e):Math.ceil(e)}function Un(e){return 4800*e/146097}function Yn(e){return 146097*e/4800}function Wn(e){return function(){return this.as(e)}}var Dn=Wn("ms"),kn=Wn("s"),Gn=Wn("m"),Fn=Wn("h"),xn=Wn("d"),On=Wn("w"),Sn=Wn("M"),En=Wn("Q"),Pn=Wn("y");function Tn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Mn=Tn("milliseconds"),Zn=Tn("seconds"),Rn=Tn("minutes"),In=Tn("hours"),jn=Tn("days"),Nn=Tn("months"),Hn=Tn("years");var Vn=Math.round,Ln={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function zn(e,t,n,i){var r=jt(e).abs(),a=Vn(r.as("s")),s=Vn(r.as("m")),o=Vn(r.as("h")),l=Vn(r.as("d")),p=Vn(r.as("M")),u=Vn(r.as("w")),c=Vn(r.as("y")),h=(a<=n.ss?["s",a]:a<n.s&&["ss",a])||s<=1&&["m"]||s<n.m&&["mm",s]||o<=1&&["h"]||o<n.h&&["hh",o]||l<=1&&["d"]||l<n.d&&["dd",l];return null!=n.w&&(h=h||u<=1&&["w"]||u<n.w&&["ww",u]),(h=h||p<=1&&["M"]||p<n.M&&["MM",p]||c<=1&&["y"]||["yy",c])[2]=t,h[3]=0<+e,h[4]=i,function(e,t,n,i,r){return r.relativeTime(t||1,!!n,e,i)}.apply(null,h)}var Jn=Math.abs;function $n(e){return(0<e)-(e<0)||+e}function Xn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,i,r,a,s,o,l=Jn(this._milliseconds)/1e3,p=Jn(this._days),u=Jn(this._months),c=this.asSeconds();return c?(e=I(l/60),t=I(e/60),l%=60,e%=60,n=I(u/12),u%=12,i=l?l.toFixed(3).replace(/\.?0+$/,""):"",r=c<0?"-":"",a=$n(this._months)!==$n(c)?"-":"",s=$n(this._days)!==$n(c)?"-":"",o=$n(this._milliseconds)!==$n(c)?"-":"",r+"P"+(n?a+n+"Y":"")+(u?a+u+"M":"")+(p?s+p+"D":"")+(t||e||l?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(l?o+i+"S":"")):"P0D"}var ei=Ft.prototype;return ei.isValid=function(){return this._isValid},ei.abs=function(){var e=this._data;return this._milliseconds=_n(this._milliseconds),this._days=_n(this._days),this._months=_n(this._months),e.milliseconds=_n(e.milliseconds),e.seconds=_n(e.seconds),e.minutes=_n(e.minutes),e.hours=_n(e.hours),e.months=_n(e.months),e.years=_n(e.years),this},ei.add=function(e,t){return wn(this,e,t,1)},ei.subtract=function(e,t){return wn(this,e,t,-1)},ei.as=function(e){if(!this.isValid())return NaN;var t,n,i=this._milliseconds;if("month"===(e=P(e))||"quarter"===e||"year"===e)switch(t=this._days+i/864e5,n=this._months+Un(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Yn(this._months)),e){case"week":return t/7+i/6048e5;case"day":return t+i/864e5;case"hour":return 24*t+i/36e5;case"minute":return 1440*t+i/6e4;case"second":return 86400*t+i/1e3;case"millisecond":return Math.floor(864e5*t)+i;default:throw new Error("Unknown unit "+e)}},ei.asMilliseconds=Dn,ei.asSeconds=kn,ei.asMinutes=Gn,ei.asHours=Fn,ei.asDays=xn,ei.asWeeks=On,ei.asMonths=Sn,ei.asQuarters=En,ei.asYears=Pn,ei.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*j(this._months/12):NaN},ei._bubble=function(){var e,t,n,i,r,a=this._milliseconds,s=this._days,o=this._months,l=this._data;return 0<=a&&0<=s&&0<=o||a<=0&&s<=0&&o<=0||(a+=864e5*qn(Yn(o)+s),o=s=0),l.milliseconds=a%1e3,e=I(a/1e3),l.seconds=e%60,t=I(e/60),l.minutes=t%60,n=I(t/60),l.hours=n%24,s+=I(n/24),o+=r=I(Un(s)),s-=qn(Yn(r)),i=I(o/12),o%=12,l.days=s,l.months=o,l.years=i,this},ei.clone=function(){return jt(this)},ei.get=function(e){return e=P(e),this.isValid()?this[e+"s"]():NaN},ei.milliseconds=Mn,ei.seconds=Zn,ei.minutes=Rn,ei.hours=In,ei.days=jn,ei.weeks=function(){return I(this.days()/7)},ei.months=Nn,ei.years=Hn,ei.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,i,r=!1,a=Ln;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(r=e),"object"==typeof t&&(a=Object.assign({},Ln,t),null!=t.s&&null==t.ss&&(a.ss=t.s-1)),n=this.localeData(),i=zn(this,!r,a,n),r&&(i=n.pastFuture(+this,i)),n.postformat(i)},ei.toISOString=Xn,ei.toString=Xn,ei.toJSON=Xn,ei.locale=tn,ei.localeData=rn,ei.toIsoString=n("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Xn),ei.lang=nn,F("X",0,0,"unix"),F("x",0,0,"valueOf"),he("x",le),he("X",/[+-]?\d+(\.\d{1,3})?/),fe("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e))}),fe("x",function(e,t,n){n._d=new Date(j(e))}),A.version="2.29.1",e=Yt,A.fn=bn,A.min=function(){return kt("isBefore",[].slice.call(arguments,0))},A.max=function(){return kt("isAfter",[].slice.call(arguments,0))},A.now=function(){return Date.now?Date.now():+new Date},A.utc=m,A.unix=function(e){return Yt(1e3*e)},A.months=function(e,t){return Bn(e,t,"months")},A.isDate=s,A.locale=pt,A.invalid=v,A.duration=jt,A.isMoment=Q,A.weekdays=function(e,t,n){return Kn(e,t,n,"weekdays")},A.parseZone=function(){return Yt.apply(null,arguments).parseZone()},A.localeData=ct,A.isDuration=xt,A.monthsShort=function(e,t){return Bn(e,t,"monthsShort")},A.weekdaysMin=function(e,t,n){return Kn(e,t,n,"weekdaysMin")},A.defineLocale=ut,A.updateLocale=function(e,t){var n,i,r;return null!=t?(r=it,null!=rt[e]&&null!=rt[e].parentLocale?rt[e].set(q(rt[e]._config,t)):(null!=(i=lt(e))&&(r=i._config),t=q(r,t),null==i&&(t.abbr=e),(n=new U(t)).parentLocale=rt[e],rt[e]=n),pt(e)):null!=rt[e]&&(null!=rt[e].parentLocale?(rt[e]=rt[e].parentLocale,e===pt()&&pt(e)):null!=rt[e]&&delete rt[e]),rt[e]},A.locales=function(){return i(rt)},A.weekdaysShort=function(e,t,n){return Kn(e,t,n,"weekdaysShort")},A.normalizeUnits=P,A.relativeTimeRounding=function(e){return void 0===e?Vn:"function"==typeof e&&(Vn=e,!0)},A.relativeTimeThreshold=function(e,t){return void 0!==Ln[e]&&(void 0===t?Ln[e]:(Ln[e]=t,"s"===e&&(Ln.ss=t-1),!0))},A.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},A.prototype=bn,A.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},A},"object"==typeof e&&void 0!==ni?ni.exports=n():"function"==typeof define&&define.amd?define(n):t.moment=n()},{}],31:[function(n,e,t){var i;i=function(t){var e,n,i,r,A,a,s,d,m,f,g,v,b,o,l,C,p=(t&&t.fn&&t.fn.select2&&t.fn.select2.amd&&(e=t.fn.select2.amd),e&&e.requirejs||(e?i=e:e={},f={},g={},v={},b={},o=Object.prototype.hasOwnProperty,l=[].slice,C=/\.js$/,d=function(e,t){var n,i,r=c(e),a=r[0],s=t[1];return e=r[1],a&&(n=B(a=u(a,s))),a?e=n&&n.normalize?n.normalize(e,(i=s,function(e){return u(e,i)})):u(e,s):(a=(r=c(e=u(e,s)))[0],e=r[1],a&&(n=B(a))),{f:a?a+"!"+e:e,n:e,pr:a,p:n}},m={require:function(e){return Q(e)},exports:function(e){var t=f[e];return void 0!==t?t:f[e]={}},module:function(e){return{id:e,uri:"",exports:f[e],config:(t=e,function(){return v&&v.config&&v.config[t]||{}})};var t}},a=function(e,t,n,i){var r,a,s,o,l,p,u=[],c=typeof n,h=K(i=i||e);if("undefined"==c||"function"==c){for(t=!t.length&&n.length?["require","exports","module"]:t,l=0;l<t.length;l+=1)if("require"===(a=(o=d(t[l],h)).f))u[l]=m.require(e);else if("exports"===a)u[l]=m.exports(e),p=!0;else if("module"===a)r=u[l]=m.module(e);else if(y(f,a)||y(g,a)||y(b,a))u[l]=B(a);else{if(!o.p)throw new Error(e+" missing "+a);o.p.load(o.n,Q(i,!0),function(t){return function(e){f[t]=e}}(a),{}),u[l]=f[a]}s=n?n.apply(f[e],u):void 0,e&&(r&&r.exports!==A&&r.exports!==f[e]?f[e]=r.exports:s===A&&p||(f[e]=s))}else e&&(f[e]=n)},n=i=s=function(e,t,n,i,r){if("string"==typeof e)return m[e]?m[e](t):B(d(e,K(t)).f);if(!e.splice){if((v=e).deps&&s(v.deps,v.callback),!t)return;t.splice?(e=t,t=n,n=null):e=A}return t=t||function(){},"function"==typeof n&&(n=i,i=r),i?a(A,e,t,n):setTimeout(function(){a(A,e,t,n)},4),s},s.config=function(e){return s(e)},n._defined=f,(r=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),y(f,e)||y(g,e)||(g[e]=[e,t,n])}).amd={jQuery:!0},e.requirejs=n,e.require=i,e.define=r),e.define("almond",function(){}),e.define("jquery",[],function(){var e=t||$;return null==e&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),e}),e.define("select2/utils",["jquery"],function(a){var r={};function p(e){var t=e.prototype,n=[];for(var i in t)"function"==typeof t[i]&&"constructor"!==i&&n.push(i);return n}function e(){this.listeners={}}r.Extend=function(e,t){var n={}.hasOwnProperty;function i(){this.constructor=e}for(var r in t)n.call(t,r)&&(e[r]=t[r]);return i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype,e},r.Decorate=function(i,r){var e=p(r),t=p(i);function a(){var e=Array.prototype.unshift,t=r.prototype.constructor.length,n=i.prototype.constructor;0<t&&(e.call(arguments,i.prototype.constructor),n=r.prototype.constructor),n.apply(this,arguments)}r.displayName=i.displayName,a.prototype=new function(){this.constructor=a};for(var n=0;n<t.length;n++){var s=t[n];a.prototype[s]=i.prototype[s]}for(var o=0;o<e.length;o++){var l=e[o];a.prototype[l]=function(e){var t=function(){};e in a.prototype&&(t=a.prototype[e]);var n=r.prototype[e];return function(){return Array.prototype.unshift.call(arguments,t),n.apply(this,arguments)}}(l)}return a},e.prototype.on=function(e,t){this.listeners=this.listeners||{},e in this.listeners?this.listeners[e].push(t):this.listeners[e]=[t]},e.prototype.trigger=function(e){var t=Array.prototype.slice,n=t.call(arguments,1);this.listeners=this.listeners||{},null==n&&(n=[]),0===n.length&&n.push({}),(n[0]._type=e)in this.listeners&&this.invoke(this.listeners[e],t.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},e.prototype.invoke=function(e,t){for(var n=0,i=e.length;n<i;n++)e[n].apply(this,t)},r.Observable=e,r.generateChars=function(e){for(var t="",n=0;n<e;n++)t+=Math.floor(36*Math.random()).toString(36);return t},r.bind=function(e,t){return function(){e.apply(t,arguments)}},r._convertData=function(e){for(var t in e){var n=t.split("-"),i=e;if(1!==n.length){for(var r=0;r<n.length;r++){var a=n[r];(a=a.substring(0,1).toLowerCase()+a.substring(1))in i||(i[a]={}),r==n.length-1&&(i[a]=e[t]),i=i[a]}delete e[t]}}return e},r.hasScroll=function(e,t){var n=a(t),i=t.style.overflowX,r=t.style.overflowY;return(i!==r||"hidden"!==r&&"visible"!==r)&&("scroll"===i||"scroll"===r||n.innerHeight()<t.scrollHeight||n.innerWidth()<t.scrollWidth)},r.escapeMarkup=function(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof e?e:String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})},r.appendMany=function(e,t){var n;"1.7"===a.fn.jquery.substr(0,3)&&(n=a(),a.map(t,function(e){n=n.add(e)}),t=n),e.append(t)},r.__cache={};var n=0;return r.GetUniqueElementId=function(e){var t=e.getAttribute("data-select2-id");return null==t&&(e.id?(t=e.id,e.setAttribute("data-select2-id",t)):(e.setAttribute("data-select2-id",++n),t=n.toString())),t},r.StoreData=function(e,t,n){var i=r.GetUniqueElementId(e);r.__cache[i]||(r.__cache[i]={}),r.__cache[i][t]=n},r.GetData=function(e,t){var n=r.GetUniqueElementId(e);return t?r.__cache[n]&&null!=r.__cache[n][t]?r.__cache[n][t]:a(e).data(t):r.__cache[n]},r.RemoveData=function(e){var t=r.GetUniqueElementId(e);null!=r.__cache[t]&&delete r.__cache[t],e.removeAttribute("data-select2-id")},r}),e.define("select2/results",["jquery","./utils"],function(A,d){function i(e,t,n){this.$element=e,this.data=n,this.options=t,i.__super__.constructor.call(this)}return d.Extend(i,d.Observable),i.prototype.render=function(){var e=A('<ul class="select2-results__options" role="listbox"></ul>');return this.options.get("multiple")&&e.attr("aria-multiselectable","true"),this.$results=e},i.prototype.clear=function(){this.$results.empty()},i.prototype.displayMessage=function(e){var t=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var n=A('<li role="alert" aria-live="assertive" class="select2-results__option"></li>'),i=this.options.get("translations").get(e.message);n.append(t(i(e.args))),n[0].className+=" select2-results__message",this.$results.append(n)},i.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},i.prototype.append=function(e){this.hideLoading();var t=[];if(null!=e.results&&0!==e.results.length){e.results=this.sort(e.results);for(var n=0;n<e.results.length;n++){var i=e.results[n],r=this.option(i);t.push(r)}this.$results.append(t)}else 0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"})},i.prototype.position=function(e,t){t.find(".select2-results").append(e)},i.prototype.sort=function(e){return this.options.get("sorter")(e)},i.prototype.highlightFirstItem=function(){var e=this.$results.find(".select2-results__option[aria-selected]"),t=e.filter("[aria-selected=true]");0<t.length?t.first().trigger("mouseenter"):e.first().trigger("mouseenter"),this.ensureHighlightVisible()},i.prototype.setClasses=function(){var t=this;this.data.current(function(e){var i=A.map(e,function(e){return e.id.toString()});t.$results.find(".select2-results__option[aria-selected]").each(function(){var e=A(this),t=d.GetData(this,"data"),n=""+t.id;null!=t.element&&t.element.selected||null==t.element&&-1<A.inArray(n,i)?e.attr("aria-selected","true"):e.attr("aria-selected","false")})})},i.prototype.showLoading=function(e){this.hideLoading();var t={disabled:!0,loading:!0,text:this.options.get("translations").get("searching")(e)},n=this.option(t);n.className+=" loading-results",this.$results.prepend(n)},i.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},i.prototype.option=function(e){var t=document.createElement("li");t.className="select2-results__option";var n={role:"option","aria-selected":"false"},i=window.Element.prototype.matches||window.Element.prototype.msMatchesSelector||window.Element.prototype.webkitMatchesSelector;for(var r in(null!=e.element&&i.call(e.element,":disabled")||null==e.element&&e.disabled)&&(delete n["aria-selected"],n["aria-disabled"]="true"),null==e.id&&delete n["aria-selected"],null!=e._resultId&&(t.id=e._resultId),e.title&&(t.title=e.title),e.children&&(n.role="group",n["aria-label"]=e.text,delete n["aria-selected"]),n){var a=n[r];t.setAttribute(r,a)}if(e.children){var s=A(t),o=document.createElement("strong");o.className="select2-results__group",A(o),this.template(e,o);for(var l=[],p=0;p<e.children.length;p++){var u=e.children[p],c=this.option(u);l.push(c)}var h=A("<ul></ul>",{class:"select2-results__options select2-results__options--nested"});h.append(l),s.append(o),s.append(h)}else this.template(e,t);return d.StoreData(t,"data",e),t},i.prototype.bind=function(t,e){var l=this,n=t.id+"-results";this.$results.attr("id",n),t.on("results:all",function(e){l.clear(),l.append(e.data),t.isOpen()&&(l.setClasses(),l.highlightFirstItem())}),t.on("results:append",function(e){l.append(e.data),t.isOpen()&&l.setClasses()}),t.on("query",function(e){l.hideMessages(),l.showLoading(e)}),t.on("select",function(){t.isOpen()&&(l.setClasses(),l.options.get("scrollAfterSelect")&&l.highlightFirstItem())}),t.on("unselect",function(){t.isOpen()&&(l.setClasses(),l.options.get("scrollAfterSelect")&&l.highlightFirstItem())}),t.on("open",function(){l.$results.attr("aria-expanded","true"),l.$results.attr("aria-hidden","false"),l.setClasses(),l.ensureHighlightVisible()}),t.on("close",function(){l.$results.attr("aria-expanded","false"),l.$results.attr("aria-hidden","true"),l.$results.removeAttr("aria-activedescendant")}),t.on("results:toggle",function(){var e=l.getHighlightedResults();0!==e.length&&e.trigger("mouseup")}),t.on("results:select",function(){var e,t=l.getHighlightedResults();0!==t.length&&(e=d.GetData(t[0],"data"),"true"==t.attr("aria-selected")?l.trigger("close",{}):l.trigger("select",{data:e}))}),t.on("results:previous",function(){var e,t,n,i,r,a=l.getHighlightedResults(),s=l.$results.find("[aria-selected]"),o=s.index(a);o<=0||(e=o-1,0===a.length&&(e=0),(t=s.eq(e)).trigger("mouseenter"),n=l.$results.offset().top,i=t.offset().top,r=l.$results.scrollTop()+(i-n),0===e?l.$results.scrollTop(0):i-n<0&&l.$results.scrollTop(r))}),t.on("results:next",function(){var e,t,n,i,r=l.getHighlightedResults(),a=l.$results.find("[aria-selected]"),s=a.index(r)+1;s>=a.length||((e=a.eq(s)).trigger("mouseenter"),t=l.$results.offset().top+l.$results.outerHeight(!1),n=e.offset().top+e.outerHeight(!1),i=l.$results.scrollTop()+n-t,0===s?l.$results.scrollTop(0):t<n&&l.$results.scrollTop(i))}),t.on("results:focus",function(e){e.element.addClass("select2-results__option--highlighted")}),t.on("results:message",function(e){l.displayMessage(e)}),A.fn.mousewheel&&this.$results.on("mousewheel",function(e){var t=l.$results.scrollTop(),n=l.$results.get(0).scrollHeight-t+e.deltaY,i=0<e.deltaY&&t-e.deltaY<=0,r=e.deltaY<0&&n<=l.$results.height();i?(l.$results.scrollTop(0),e.preventDefault(),e.stopPropagation()):r&&(l.$results.scrollTop(l.$results.get(0).scrollHeight-l.$results.height()),e.preventDefault(),e.stopPropagation())}),this.$results.on("mouseup",".select2-results__option[aria-selected]",function(e){var t=A(this),n=d.GetData(this,"data");"true"!==t.attr("aria-selected")?l.trigger("select",{originalEvent:e,data:n}):l.options.get("multiple")?l.trigger("unselect",{originalEvent:e,data:n}):l.trigger("close",{})}),this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(e){var t=d.GetData(this,"data");l.getHighlightedResults().removeClass("select2-results__option--highlighted"),l.trigger("results:focus",{data:t,element:A(this)})})},i.prototype.getHighlightedResults=function(){return this.$results.find(".select2-results__option--highlighted")},i.prototype.destroy=function(){this.$results.remove()},i.prototype.ensureHighlightVisible=function(){var e,t,n,i,r,a=this.getHighlightedResults();0!==a.length&&(e=this.$results.find("[aria-selected]").index(a),t=this.$results.offset().top,n=a.offset().top,i=this.$results.scrollTop()+(n-t),r=n-t,i-=2*a.outerHeight(!1),e<=2?this.$results.scrollTop(0):(r>this.$results.outerHeight()||r<0)&&this.$results.scrollTop(i))},i.prototype.template=function(e,t){var n=this.options.get("templateResult"),i=this.options.get("escapeMarkup"),r=n(e,t);null==r?t.style.display="none":"string"==typeof r?t.innerHTML=i(r):A(t).append(r)},i}),e.define("select2/keys",[],function(){return{BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46}}),e.define("select2/selection/base",["jquery","../utils","../keys"],function(n,i,r){function a(e,t){this.$element=e,this.options=t,a.__super__.constructor.call(this)}return i.Extend(a,i.Observable),a.prototype.render=function(){var e=n('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=i.GetData(this.$element[0],"old-tabindex")?this._tabindex=i.GetData(this.$element[0],"old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),e.attr("title",this.$element.attr("title")),e.attr("tabindex",this._tabindex),e.attr("aria-disabled","false"),this.$selection=e},a.prototype.bind=function(e,t){var n=this,i=e.id+"-results";this.container=e,this.$selection.on("focus",function(e){n.trigger("focus",e)}),this.$selection.on("blur",function(e){n._handleBlur(e)}),this.$selection.on("keydown",function(e){n.trigger("keypress",e),e.which===r.SPACE&&e.preventDefault()}),e.on("results:focus",function(e){n.$selection.attr("aria-activedescendant",e.data._resultId)}),e.on("selection:update",function(e){n.update(e.data)}),e.on("open",function(){n.$selection.attr("aria-expanded","true"),n.$selection.attr("aria-owns",i),n._attachCloseHandler(e)}),e.on("close",function(){n.$selection.attr("aria-expanded","false"),n.$selection.removeAttr("aria-activedescendant"),n.$selection.removeAttr("aria-owns"),n.$selection.trigger("focus"),n._detachCloseHandler(e)}),e.on("enable",function(){n.$selection.attr("tabindex",n._tabindex),n.$selection.attr("aria-disabled","false")}),e.on("disable",function(){n.$selection.attr("tabindex","-1"),n.$selection.attr("aria-disabled","true")})},a.prototype._handleBlur=function(e){var t=this;window.setTimeout(function(){document.activeElement==t.$selection[0]||n.contains(t.$selection[0],document.activeElement)||t.trigger("blur",e)},1)},a.prototype._attachCloseHandler=function(e){n(document.body).on("mousedown.select2."+e.id,function(e){var t=n(e.target).closest(".select2");n(".select2.select2-container--open").each(function(){this!=t[0]&&i.GetData(this,"element").select2("close")})})},a.prototype._detachCloseHandler=function(e){n(document.body).off("mousedown.select2."+e.id)},a.prototype.position=function(e,t){t.find(".selection").append(e)},a.prototype.destroy=function(){this._detachCloseHandler(this.container)},a.prototype.update=function(e){throw new Error("The `update` method must be defined in child classes.")},a.prototype.isEnabled=function(){return!this.isDisabled()},a.prototype.isDisabled=function(){return this.options.get("disabled")},a}),e.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(e,t,n,i){function r(){r.__super__.constructor.apply(this,arguments)}return n.Extend(r,t),r.prototype.render=function(){var e=r.__super__.render.call(this);return e.addClass("select2-selection--single"),e.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),e},r.prototype.bind=function(t,e){var n=this;r.__super__.bind.apply(this,arguments);var i=t.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",i).attr("role","textbox").attr("aria-readonly","true"),this.$selection.attr("aria-labelledby",i),this.$selection.on("mousedown",function(e){1===e.which&&n.trigger("toggle",{originalEvent:e})}),this.$selection.on("focus",function(e){}),this.$selection.on("blur",function(e){}),t.on("focus",function(e){t.isOpen()||n.$selection.trigger("focus")})},r.prototype.clear=function(){var e=this.$selection.find(".select2-selection__rendered");e.empty(),e.removeAttr("title")},r.prototype.display=function(e,t){var n=this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e,t))},r.prototype.selectionContainer=function(){return e("<span></span>")},r.prototype.update=function(e){var t,n,i,r;0!==e.length?(t=e[0],n=this.$selection.find(".select2-selection__rendered"),i=this.display(t,n),n.empty().append(i),(r=t.title||t.text)?n.attr("title",r):n.removeAttr("title")):this.clear()},r}),e.define("select2/selection/multiple",["jquery","./base","../utils"],function(r,e,l){function n(e,t){n.__super__.constructor.apply(this,arguments)}return l.Extend(n,e),n.prototype.render=function(){var e=n.__super__.render.call(this);return e.addClass("select2-selection--multiple"),e.html('<ul class="select2-selection__rendered"></ul>'),e},n.prototype.bind=function(e,t){var i=this;n.__super__.bind.apply(this,arguments),this.$selection.on("click",function(e){i.trigger("toggle",{originalEvent:e})}),this.$selection.on("click",".select2-selection__choice__remove",function(e){var t,n;i.isDisabled()||(t=r(this).parent(),n=l.GetData(t[0],"data"),i.trigger("unselect",{originalEvent:e,data:n}))})},n.prototype.clear=function(){var e=this.$selection.find(".select2-selection__rendered");e.empty(),e.removeAttr("title")},n.prototype.display=function(e,t){var n=this.options.get("templateSelection");return this.options.get("escapeMarkup")(n(e,t))},n.prototype.selectionContainer=function(){return r('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>')},n.prototype.update=function(e){if(this.clear(),0!==e.length){for(var t=[],n=0;n<e.length;n++){var i=e[n],r=this.selectionContainer(),a=this.display(i,r);r.append(a);var s=i.title||i.text;s&&r.attr("title",s),l.StoreData(r[0],"data",i),t.push(r)}var o=this.$selection.find(".select2-selection__rendered");l.appendMany(o,t)}},n}),e.define("select2/selection/placeholder",["../utils"],function(e){function t(e,t,n){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n)}return t.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},t.prototype.createPlaceholder=function(e,t){var n=this.selectionContainer();return n.html(this.display(t)),n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),n},t.prototype.update=function(e,t){var n=1==t.length&&t[0].id!=this.placeholder.id;if(1<t.length||n)return e.call(this,t);this.clear();var i=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(i)},t}),e.define("select2/selection/allowClear",["jquery","../keys","../utils"],function(r,i,o){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(e){i._handleClear(e)}),t.on("keypress",function(e){i._handleKeyboardClear(e,t)})},e.prototype._handleClear=function(e,t){if(!this.isDisabled()){var n=this.$selection.find(".select2-selection__clear");if(0!==n.length){t.stopPropagation();var i=o.GetData(n[0],"data"),r=this.$element.val();this.$element.val(this.placeholder.id);var a={data:i};if(this.trigger("clear",a),a.prevented)this.$element.val(r);else{for(var s=0;s<i.length;s++)if(a={data:i[s]},this.trigger("unselect",a),a.prevented)return void this.$element.val(r);this.$element.trigger("input").trigger("change"),this.trigger("toggle",{})}}}},e.prototype._handleKeyboardClear=function(e,t,n){n.isOpen()||t.which!=i.DELETE&&t.which!=i.BACKSPACE||this._handleClear(t)},e.prototype.update=function(e,t){var n,i;e.call(this,t),0<this.$selection.find(".select2-selection__placeholder").length||0===t.length||(n=this.options.get("translations").get("removeAllItems"),i=r('<span class="select2-selection__clear" title="'+n()+'">&times;</span>'),o.StoreData(i[0],"data",t),this.$selection.find(".select2-selection__rendered").prepend(i))},e}),e.define("select2/selection/search",["jquery","../utils","../keys"],function(i,o,l){function e(e,t,n){e.call(this,t,n)}return e.prototype.render=function(e){var t=i('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></li>');this.$searchContainer=t,this.$search=t.find("input");var n=e.call(this);return this._transferTabIndex(),n},e.prototype.bind=function(e,t,n){var i=this,r=t.id+"-results";e.call(this,t,n),t.on("open",function(){i.$search.attr("aria-controls",r),i.$search.trigger("focus")}),t.on("close",function(){i.$search.val(""),i.$search.removeAttr("aria-controls"),i.$search.removeAttr("aria-activedescendant"),i.$search.trigger("focus")}),t.on("enable",function(){i.$search.prop("disabled",!1),i._transferTabIndex()}),t.on("disable",function(){i.$search.prop("disabled",!0)}),t.on("focus",function(e){i.$search.trigger("focus")}),t.on("results:focus",function(e){e.data._resultId?i.$search.attr("aria-activedescendant",e.data._resultId):i.$search.removeAttr("aria-activedescendant")}),this.$selection.on("focusin",".select2-search--inline",function(e){i.trigger("focus",e)}),this.$selection.on("focusout",".select2-search--inline",function(e){i._handleBlur(e)}),this.$selection.on("keydown",".select2-search--inline",function(e){var t,n;e.stopPropagation(),i.trigger("keypress",e),i._keyUpPrevented=e.isDefaultPrevented(),e.which!==l.BACKSPACE||""!==i.$search.val()||0<(t=i.$searchContainer.prev(".select2-selection__choice")).length&&(n=o.GetData(t[0],"data"),i.searchRemoveChoice(n),e.preventDefault())}),this.$selection.on("click",".select2-search--inline",function(e){i.$search.val()&&e.stopPropagation()});var a=document.documentMode,s=a&&a<=11;this.$selection.on("input.searchcheck",".select2-search--inline",function(e){s?i.$selection.off("input.search input.searchcheck"):i.$selection.off("keyup.search")}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(e){var t;s&&"input"===e.type?i.$selection.off("input.search input.searchcheck"):(t=e.which)!=l.SHIFT&&t!=l.CTRL&&t!=l.ALT&&t!=l.TAB&&i.handleSearch(e)})},e.prototype._transferTabIndex=function(e){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},e.prototype.createPlaceholder=function(e,t){this.$search.attr("placeholder",t.text)},e.prototype.update=function(e,t){var n=this.$search[0]==document.activeElement;this.$search.attr("placeholder",""),e.call(this,t),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),n&&this.$search.trigger("focus")},e.prototype.handleSearch=function(){var e;this.resizeSearch(),this._keyUpPrevented||(e=this.$search.val(),this.trigger("query",{term:e})),this._keyUpPrevented=!1},e.prototype.searchRemoveChoice=function(e,t){this.trigger("unselect",{data:t}),this.$search.val(t.text),this.handleSearch()},e.prototype.resizeSearch=function(){this.$search.css("width","25px");var e="";e=""!==this.$search.attr("placeholder")?this.$selection.find(".select2-selection__rendered").width():.75*(this.$search.val().length+1)+"em",this.$search.css("width",e)},e}),e.define("select2/selection/eventRelay",["jquery"],function(s){function e(){}return e.prototype.bind=function(e,t,n){var i=this,r=["open","opening","close","closing","select","selecting","unselect","unselecting","clear","clearing"],a=["opening","closing","selecting","unselecting","clearing"];e.call(this,t,n),t.on("*",function(e,t){var n;-1!==s.inArray(e,r)&&(t=t||{},n=s.Event("select2:"+e,{params:t}),i.$element.trigger(n),-1!==s.inArray(e,a)&&(t.prevented=n.isDefaultPrevented()))})},e}),e.define("select2/translation",["jquery","require"],function(t,n){function i(e){this.dict=e||{}}return i.prototype.all=function(){return this.dict},i.prototype.get=function(e){return this.dict[e]},i.prototype.extend=function(e){this.dict=t.extend({},e.all(),this.dict)},i._cache={},i.loadPath=function(e){var t;return e in i._cache||(t=n(e),i._cache[e]=t),new i(i._cache[e])},i}),e.define("select2/diacritics",[],function(){return{"Ⓐ":"A","Ａ":"A","À":"A","Á":"A","Â":"A","Ầ":"A","Ấ":"A","Ẫ":"A","Ẩ":"A","Ã":"A","Ā":"A","Ă":"A","Ằ":"A","Ắ":"A","Ẵ":"A","Ẳ":"A","Ȧ":"A","Ǡ":"A","Ä":"A","Ǟ":"A","Ả":"A","Å":"A","Ǻ":"A","Ǎ":"A","Ȁ":"A","Ȃ":"A","Ạ":"A","Ậ":"A","Ặ":"A","Ḁ":"A","Ą":"A","Ⱥ":"A","Ɐ":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ⓑ":"B","Ｂ":"B","Ḃ":"B","Ḅ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ɓ":"B","Ⓒ":"C","Ｃ":"C","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","Ç":"C","Ḉ":"C","Ƈ":"C","Ȼ":"C","Ꜿ":"C","Ⓓ":"D","Ｄ":"D","Ḋ":"D","Ď":"D","Ḍ":"D","Ḑ":"D","Ḓ":"D","Ḏ":"D","Đ":"D","Ƌ":"D","Ɗ":"D","Ɖ":"D","Ꝺ":"D","Ǳ":"DZ","Ǆ":"DZ","ǲ":"Dz","ǅ":"Dz","Ⓔ":"E","Ｅ":"E","È":"E","É":"E","Ê":"E","Ề":"E","Ế":"E","Ễ":"E","Ể":"E","Ẽ":"E","Ē":"E","Ḕ":"E","Ḗ":"E","Ĕ":"E","Ė":"E","Ë":"E","Ẻ":"E","Ě":"E","Ȅ":"E","Ȇ":"E","Ẹ":"E","Ệ":"E","Ȩ":"E","Ḝ":"E","Ę":"E","Ḙ":"E","Ḛ":"E","Ɛ":"E","Ǝ":"E","Ⓕ":"F","Ｆ":"F","Ḟ":"F","Ƒ":"F","Ꝼ":"F","Ⓖ":"G","Ｇ":"G","Ǵ":"G","Ĝ":"G","Ḡ":"G","Ğ":"G","Ġ":"G","Ǧ":"G","Ģ":"G","Ǥ":"G","Ɠ":"G","Ꞡ":"G","Ᵹ":"G","Ꝿ":"G","Ⓗ":"H","Ｈ":"H","Ĥ":"H","Ḣ":"H","Ḧ":"H","Ȟ":"H","Ḥ":"H","Ḩ":"H","Ḫ":"H","Ħ":"H","Ⱨ":"H","Ⱶ":"H","Ɥ":"H","Ⓘ":"I","Ｉ":"I","Ì":"I","Í":"I","Î":"I","Ĩ":"I","Ī":"I","Ĭ":"I","İ":"I","Ï":"I","Ḯ":"I","Ỉ":"I","Ǐ":"I","Ȉ":"I","Ȋ":"I","Ị":"I","Į":"I","Ḭ":"I","Ɨ":"I","Ⓙ":"J","Ｊ":"J","Ĵ":"J","Ɉ":"J","Ⓚ":"K","Ｋ":"K","Ḱ":"K","Ǩ":"K","Ḳ":"K","Ķ":"K","Ḵ":"K","Ƙ":"K","Ⱪ":"K","Ꝁ":"K","Ꝃ":"K","Ꝅ":"K","Ꞣ":"K","Ⓛ":"L","Ｌ":"L","Ŀ":"L","Ĺ":"L","Ľ":"L","Ḷ":"L","Ḹ":"L","Ļ":"L","Ḽ":"L","Ḻ":"L","Ł":"L","Ƚ":"L","Ɫ":"L","Ⱡ":"L","Ꝉ":"L","Ꝇ":"L","Ꞁ":"L","Ǉ":"LJ","ǈ":"Lj","Ⓜ":"M","Ｍ":"M","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ɯ":"M","Ⓝ":"N","Ｎ":"N","Ǹ":"N","Ń":"N","Ñ":"N","Ṅ":"N","Ň":"N","Ṇ":"N","Ņ":"N","Ṋ":"N","Ṉ":"N","Ƞ":"N","Ɲ":"N","Ꞑ":"N","Ꞥ":"N","Ǌ":"NJ","ǋ":"Nj","Ⓞ":"O","Ｏ":"O","Ò":"O","Ó":"O","Ô":"O","Ồ":"O","Ố":"O","Ỗ":"O","Ổ":"O","Õ":"O","Ṍ":"O","Ȭ":"O","Ṏ":"O","Ō":"O","Ṑ":"O","Ṓ":"O","Ŏ":"O","Ȯ":"O","Ȱ":"O","Ö":"O","Ȫ":"O","Ỏ":"O","Ő":"O","Ǒ":"O","Ȍ":"O","Ȏ":"O","Ơ":"O","Ờ":"O","Ớ":"O","Ỡ":"O","Ở":"O","Ợ":"O","Ọ":"O","Ộ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Ɔ":"O","Ɵ":"O","Ꝋ":"O","Ꝍ":"O","Œ":"OE","Ƣ":"OI","Ꝏ":"OO","Ȣ":"OU","Ⓟ":"P","Ｐ":"P","Ṕ":"P","Ṗ":"P","Ƥ":"P","Ᵽ":"P","Ꝑ":"P","Ꝓ":"P","Ꝕ":"P","Ⓠ":"Q","Ｑ":"Q","Ꝗ":"Q","Ꝙ":"Q","Ɋ":"Q","Ⓡ":"R","Ｒ":"R","Ŕ":"R","Ṙ":"R","Ř":"R","Ȑ":"R","Ȓ":"R","Ṛ":"R","Ṝ":"R","Ŗ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꝛ":"R","Ꞧ":"R","Ꞃ":"R","Ⓢ":"S","Ｓ":"S","ẞ":"S","Ś":"S","Ṥ":"S","Ŝ":"S","Ṡ":"S","Š":"S","Ṧ":"S","Ṣ":"S","Ṩ":"S","Ș":"S","Ş":"S","Ȿ":"S","Ꞩ":"S","Ꞅ":"S","Ⓣ":"T","Ｔ":"T","Ṫ":"T","Ť":"T","Ṭ":"T","Ț":"T","Ţ":"T","Ṱ":"T","Ṯ":"T","Ŧ":"T","Ƭ":"T","Ʈ":"T","Ⱦ":"T","Ꞇ":"T","Ꜩ":"TZ","Ⓤ":"U","Ｕ":"U","Ù":"U","Ú":"U","Û":"U","Ũ":"U","Ṹ":"U","Ū":"U","Ṻ":"U","Ŭ":"U","Ü":"U","Ǜ":"U","Ǘ":"U","Ǖ":"U","Ǚ":"U","Ủ":"U","Ů":"U","Ű":"U","Ǔ":"U","Ȕ":"U","Ȗ":"U","Ư":"U","Ừ":"U","Ứ":"U","Ữ":"U","Ử":"U","Ự":"U","Ụ":"U","Ṳ":"U","Ų":"U","Ṷ":"U","Ṵ":"U","Ʉ":"U","Ⓥ":"V","Ｖ":"V","Ṽ":"V","Ṿ":"V","Ʋ":"V","Ꝟ":"V","Ʌ":"V","Ꝡ":"VY","Ⓦ":"W","Ｗ":"W","Ẁ":"W","Ẃ":"W","Ŵ":"W","Ẇ":"W","Ẅ":"W","Ẉ":"W","Ⱳ":"W","Ⓧ":"X","Ｘ":"X","Ẋ":"X","Ẍ":"X","Ⓨ":"Y","Ｙ":"Y","Ỳ":"Y","Ý":"Y","Ŷ":"Y","Ỹ":"Y","Ȳ":"Y","Ẏ":"Y","Ÿ":"Y","Ỷ":"Y","Ỵ":"Y","Ƴ":"Y","Ɏ":"Y","Ỿ":"Y","Ⓩ":"Z","Ｚ":"Z","Ź":"Z","Ẑ":"Z","Ż":"Z","Ž":"Z","Ẓ":"Z","Ẕ":"Z","Ƶ":"Z","Ȥ":"Z","Ɀ":"Z","Ⱬ":"Z","Ꝣ":"Z","ⓐ":"a","ａ":"a","ẚ":"a","à":"a","á":"a","â":"a","ầ":"a","ấ":"a","ẫ":"a","ẩ":"a","ã":"a","ā":"a","ă":"a","ằ":"a","ắ":"a","ẵ":"a","ẳ":"a","ȧ":"a","ǡ":"a","ä":"a","ǟ":"a","ả":"a","å":"a","ǻ":"a","ǎ":"a","ȁ":"a","ȃ":"a","ạ":"a","ậ":"a","ặ":"a","ḁ":"a","ą":"a","ⱥ":"a","ɐ":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ⓑ":"b","ｂ":"b","ḃ":"b","ḅ":"b","ḇ":"b","ƀ":"b","ƃ":"b","ɓ":"b","ⓒ":"c","ｃ":"c","ć":"c","ĉ":"c","ċ":"c","č":"c","ç":"c","ḉ":"c","ƈ":"c","ȼ":"c","ꜿ":"c","ↄ":"c","ⓓ":"d","ｄ":"d","ḋ":"d","ď":"d","ḍ":"d","ḑ":"d","ḓ":"d","ḏ":"d","đ":"d","ƌ":"d","ɖ":"d","ɗ":"d","ꝺ":"d","ǳ":"dz","ǆ":"dz","ⓔ":"e","ｅ":"e","è":"e","é":"e","ê":"e","ề":"e","ế":"e","ễ":"e","ể":"e","ẽ":"e","ē":"e","ḕ":"e","ḗ":"e","ĕ":"e","ė":"e","ë":"e","ẻ":"e","ě":"e","ȅ":"e","ȇ":"e","ẹ":"e","ệ":"e","ȩ":"e","ḝ":"e","ę":"e","ḙ":"e","ḛ":"e","ɇ":"e","ɛ":"e","ǝ":"e","ⓕ":"f","ｆ":"f","ḟ":"f","ƒ":"f","ꝼ":"f","ⓖ":"g","ｇ":"g","ǵ":"g","ĝ":"g","ḡ":"g","ğ":"g","ġ":"g","ǧ":"g","ģ":"g","ǥ":"g","ɠ":"g","ꞡ":"g","ᵹ":"g","ꝿ":"g","ⓗ":"h","ｈ":"h","ĥ":"h","ḣ":"h","ḧ":"h","ȟ":"h","ḥ":"h","ḩ":"h","ḫ":"h","ẖ":"h","ħ":"h","ⱨ":"h","ⱶ":"h","ɥ":"h","ƕ":"hv","ⓘ":"i","ｉ":"i","ì":"i","í":"i","î":"i","ĩ":"i","ī":"i","ĭ":"i","ï":"i","ḯ":"i","ỉ":"i","ǐ":"i","ȉ":"i","ȋ":"i","ị":"i","į":"i","ḭ":"i","ɨ":"i","ı":"i","ⓙ":"j","ｊ":"j","ĵ":"j","ǰ":"j","ɉ":"j","ⓚ":"k","ｋ":"k","ḱ":"k","ǩ":"k","ḳ":"k","ķ":"k","ḵ":"k","ƙ":"k","ⱪ":"k","ꝁ":"k","ꝃ":"k","ꝅ":"k","ꞣ":"k","ⓛ":"l","ｌ":"l","ŀ":"l","ĺ":"l","ľ":"l","ḷ":"l","ḹ":"l","ļ":"l","ḽ":"l","ḻ":"l","ſ":"l","ł":"l","ƚ":"l","ɫ":"l","ⱡ":"l","ꝉ":"l","ꞁ":"l","ꝇ":"l","ǉ":"lj","ⓜ":"m","ｍ":"m","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ɯ":"m","ⓝ":"n","ｎ":"n","ǹ":"n","ń":"n","ñ":"n","ṅ":"n","ň":"n","ṇ":"n","ņ":"n","ṋ":"n","ṉ":"n","ƞ":"n","ɲ":"n","ŉ":"n","ꞑ":"n","ꞥ":"n","ǌ":"nj","ⓞ":"o","ｏ":"o","ò":"o","ó":"o","ô":"o","ồ":"o","ố":"o","ỗ":"o","ổ":"o","õ":"o","ṍ":"o","ȭ":"o","ṏ":"o","ō":"o","ṑ":"o","ṓ":"o","ŏ":"o","ȯ":"o","ȱ":"o","ö":"o","ȫ":"o","ỏ":"o","ő":"o","ǒ":"o","ȍ":"o","ȏ":"o","ơ":"o","ờ":"o","ớ":"o","ỡ":"o","ở":"o","ợ":"o","ọ":"o","ộ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","ɔ":"o","ꝋ":"o","ꝍ":"o","ɵ":"o","œ":"oe","ƣ":"oi","ȣ":"ou","ꝏ":"oo","ⓟ":"p","ｐ":"p","ṕ":"p","ṗ":"p","ƥ":"p","ᵽ":"p","ꝑ":"p","ꝓ":"p","ꝕ":"p","ⓠ":"q","ｑ":"q","ɋ":"q","ꝗ":"q","ꝙ":"q","ⓡ":"r","ｒ":"r","ŕ":"r","ṙ":"r","ř":"r","ȑ":"r","ȓ":"r","ṛ":"r","ṝ":"r","ŗ":"r","ṟ":"r","ɍ":"r","ɽ":"r","ꝛ":"r","ꞧ":"r","ꞃ":"r","ⓢ":"s","ｓ":"s","ß":"s","ś":"s","ṥ":"s","ŝ":"s","ṡ":"s","š":"s","ṧ":"s","ṣ":"s","ṩ":"s","ș":"s","ş":"s","ȿ":"s","ꞩ":"s","ꞅ":"s","ẛ":"s","ⓣ":"t","ｔ":"t","ṫ":"t","ẗ":"t","ť":"t","ṭ":"t","ț":"t","ţ":"t","ṱ":"t","ṯ":"t","ŧ":"t","ƭ":"t","ʈ":"t","ⱦ":"t","ꞇ":"t","ꜩ":"tz","ⓤ":"u","ｕ":"u","ù":"u","ú":"u","û":"u","ũ":"u","ṹ":"u","ū":"u","ṻ":"u","ŭ":"u","ü":"u","ǜ":"u","ǘ":"u","ǖ":"u","ǚ":"u","ủ":"u","ů":"u","ű":"u","ǔ":"u","ȕ":"u","ȗ":"u","ư":"u","ừ":"u","ứ":"u","ữ":"u","ử":"u","ự":"u","ụ":"u","ṳ":"u","ų":"u","ṷ":"u","ṵ":"u","ʉ":"u","ⓥ":"v","ｖ":"v","ṽ":"v","ṿ":"v","ʋ":"v","ꝟ":"v","ʌ":"v","ꝡ":"vy","ⓦ":"w","ｗ":"w","ẁ":"w","ẃ":"w","ŵ":"w","ẇ":"w","ẅ":"w","ẘ":"w","ẉ":"w","ⱳ":"w","ⓧ":"x","ｘ":"x","ẋ":"x","ẍ":"x","ⓨ":"y","ｙ":"y","ỳ":"y","ý":"y","ŷ":"y","ỹ":"y","ȳ":"y","ẏ":"y","ÿ":"y","ỷ":"y","ẙ":"y","ỵ":"y","ƴ":"y","ɏ":"y","ỿ":"y","ⓩ":"z","ｚ":"z","ź":"z","ẑ":"z","ż":"z","ž":"z","ẓ":"z","ẕ":"z","ƶ":"z","ȥ":"z","ɀ":"z","ⱬ":"z","ꝣ":"z","Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ώ":"ω","ς":"σ","’":"'"}}),e.define("select2/data/base",["../utils"],function(i){function n(e,t){n.__super__.constructor.call(this)}return i.Extend(n,i.Observable),n.prototype.current=function(e){throw new Error("The `current` method must be defined in child classes.")},n.prototype.query=function(e,t){throw new Error("The `query` method must be defined in child classes.")},n.prototype.bind=function(e,t){},n.prototype.destroy=function(){},n.prototype.generateResultId=function(e,t){var n=e.id+"-result-";return n+=i.generateChars(4),null!=t.id?n+="-"+t.id.toString():n+="-"+i.generateChars(4),n},n}),e.define("select2/data/select",["./base","../utils","jquery"],function(e,o,l){function n(e,t){this.$element=e,this.options=t,n.__super__.constructor.call(this)}return o.Extend(n,e),n.prototype.current=function(e){var n=[],i=this;this.$element.find(":selected").each(function(){var e=l(this),t=i.item(e);n.push(t)}),e(n)},n.prototype.select=function(r){var e,a=this;if(r.selected=!0,l(r.element).is("option"))return r.element.selected=!0,void this.$element.trigger("input").trigger("change");this.$element.prop("multiple")?this.current(function(e){var t=[];(r=[r]).push.apply(r,e);for(var n=0;n<r.length;n++){var i=r[n].id;-1===l.inArray(i,t)&&t.push(i)}a.$element.val(t),a.$element.trigger("input").trigger("change")}):(e=r.id,this.$element.val(e),this.$element.trigger("input").trigger("change"))},n.prototype.unselect=function(r){var a=this;if(this.$element.prop("multiple")){if(r.selected=!1,l(r.element).is("option"))return r.element.selected=!1,void this.$element.trigger("input").trigger("change");this.current(function(e){for(var t=[],n=0;n<e.length;n++){var i=e[n].id;i!==r.id&&-1===l.inArray(i,t)&&t.push(i)}a.$element.val(t),a.$element.trigger("input").trigger("change")})}},n.prototype.bind=function(e,t){var n=this;(this.container=e).on("select",function(e){n.select(e.data)}),e.on("unselect",function(e){n.unselect(e.data)})},n.prototype.destroy=function(){this.$element.find("*").each(function(){o.RemoveData(this)})},n.prototype.query=function(i,e){var r=[],a=this;this.$element.children().each(function(){var e,t,n=l(this);(n.is("option")||n.is("optgroup"))&&(e=a.item(n),null!==(t=a.matches(i,e))&&r.push(t))}),e({results:r})},n.prototype.addOptions=function(e){o.appendMany(this.$element,e)},n.prototype.option=function(e){var t;e.children?(t=document.createElement("optgroup")).label=e.text:void 0!==(t=document.createElement("option")).textContent?t.textContent=e.text:t.innerText=e.text,void 0!==e.id&&(t.value=e.id),e.disabled&&(t.disabled=!0),e.selected&&(t.selected=!0),e.title&&(t.title=e.title);var n=l(t),i=this._normalizeItem(e);return i.element=t,o.StoreData(t,"data",i),n},n.prototype.item=function(e){var t={};if(null!=(t=o.GetData(e[0],"data")))return t;if(e.is("option"))t={id:e.val(),text:e.text(),disabled:e.prop("disabled"),selected:e.prop("selected"),title:e.prop("title")};else if(e.is("optgroup")){t={text:e.prop("label"),children:[],title:e.prop("title")};for(var n=e.children("option"),i=[],r=0;r<n.length;r++){var a=l(n[r]),s=this.item(a);i.push(s)}t.children=i}return(t=this._normalizeItem(t)).element=e[0],o.StoreData(e[0],"data",t),t},n.prototype._normalizeItem=function(e){return e!==Object(e)&&(e={id:e,text:e}),null!=(e=l.extend({},{text:""},e)).id&&(e.id=e.id.toString()),null!=e.text&&(e.text=e.text.toString()),null==e._resultId&&e.id&&null!=this.container&&(e._resultId=this.generateResultId(this.container,e)),l.extend({},{selected:!1,disabled:!1},e)},n.prototype.matches=function(e,t){return this.options.get("matcher")(e,t)},n}),e.define("select2/data/array",["./select","../utils","jquery"],function(e,A,d){function i(e,t){this._dataToConvert=t.get("data")||[],i.__super__.constructor.call(this,e,t)}return A.Extend(i,e),i.prototype.bind=function(e,t){i.__super__.bind.call(this,e,t),this.addOptions(this.convertToOptions(this._dataToConvert))},i.prototype.select=function(n){var e=this.$element.find("option").filter(function(e,t){return t.value==n.id.toString()});0===e.length&&(e=this.option(n),this.addOptions(e)),i.__super__.select.call(this,n)},i.prototype.convertToOptions=function(e){for(var t=this,n=this.$element.find("option"),i=n.map(function(){return t.item(d(this)).id}).get(),r=[],a=0;a<e.length;a++){var s,o,l,p,u,c,h=this._normalizeItem(e[a]);0<=d.inArray(h.id,i)?(s=n.filter(function(e){return function(){return d(this).val()==e.id}}(h)),o=this.item(s),l=d.extend(!0,{},h,o),p=this.option(l),s.replaceWith(p)):(u=this.option(h),h.children&&(c=this.convertToOptions(h.children),A.appendMany(u,c)),r.push(u))}return r},i}),e.define("select2/data/ajax",["./array","../utils","jquery"],function(e,t,a){function n(e,t){this.ajaxOptions=this._applyDefaults(t.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),n.__super__.constructor.call(this,e,t)}return t.Extend(n,e),n.prototype._applyDefaults=function(e){var t={data:function(e){return a.extend({},e,{q:e.term})},transport:function(e,t,n){var i=a.ajax(e);return i.then(t),i.fail(n),i}};return a.extend({},t,e,!0)},n.prototype.processResults=function(e){return e},n.prototype.query=function(n,i){var r=this;null!=this._request&&(a.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var t=a.extend({type:"GET"},this.ajaxOptions);function e(){var e=t.transport(t,function(e){var t=r.processResults(e,n);r.options.get("debug")&&window.console&&console.error&&(t&&t.results&&a.isArray(t.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),i(t)},function(){"status"in e&&(0===e.status||"0"===e.status)||r.trigger("results:message",{message:"errorLoading"})});r._request=e}"function"==typeof t.url&&(t.url=t.url.call(this.$element,n)),"function"==typeof t.data&&(t.data=t.data.call(this.$element,n)),this.ajaxOptions.delay&&null!=n.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(e,this.ajaxOptions.delay)):e()},n}),e.define("select2/data/tags",["jquery"],function(u){function e(e,t,n){var i=n.get("tags"),r=n.get("createTag");void 0!==r&&(this.createTag=r);var a=n.get("insertTag");if(void 0!==a&&(this.insertTag=a),e.call(this,t,n),u.isArray(i))for(var s=0;s<i.length;s++){var o=i[s],l=this._normalizeItem(o),p=this.option(l);this.$element.append(p)}}return e.prototype.query=function(e,p,u){var c=this;this._removeOldTags(),null!=p.term&&null==p.page?e.call(this,p,function e(t,n){for(var i=t.results,r=0;r<i.length;r++){var a=i[r],s=null!=a.children&&!e({results:a.children},!0);if((a.text||"").toUpperCase()===(p.term||"").toUpperCase()||s)return!n&&(t.data=i,void u(t))}if(n)return!0;var o,l=c.createTag(p);null!=l&&((o=c.option(l)).attr("data-select2-tag",!0),c.addOptions([o]),c.insertTag(i,l)),t.results=i,u(t)}):e.call(this,p,u)},e.prototype.createTag=function(e,t){var n=u.trim(t.term);return""===n?null:{id:n,text:n}},e.prototype.insertTag=function(e,t,n){t.unshift(n)},e.prototype._removeOldTags=function(e){this.$element.find("option[data-select2-tag]").each(function(){this.selected||u(this).remove()})},e}),e.define("select2/data/tokenizer",["jquery"],function(c){function e(e,t,n){var i=n.get("tokenizer");void 0!==i&&(this.tokenizer=i),e.call(this,t,n)}return e.prototype.bind=function(e,t,n){e.call(this,t,n),this.$search=t.dropdown.$search||t.selection.$search||n.find(".select2-search__field")},e.prototype.query=function(e,t,n){var r=this;t.term=t.term||"";var i=this.tokenizer(t,this.options,function(e){var t,n,i=r._normalizeItem(e);r.$element.find("option").filter(function(){return c(this).val()===i.id}).length||((t=r.option(i)).attr("data-select2-tag",!0),r._removeOldTags(),r.addOptions([t])),n=i,r.trigger("select",{data:n})});i.term!==t.term&&(this.$search.length&&(this.$search.val(i.term),this.$search.trigger("focus")),t.term=i.term),e.call(this,t,n)},e.prototype.tokenizer=function(e,t,n,i){for(var r=n.get("tokenSeparators")||[],a=t.term,s=0,o=this.createTag||function(e){return{id:e.term,text:e.term}};s<a.length;){var l,p,u=a[s];-1!==c.inArray(u,r)?(l=a.substr(0,s),null!=(p=o(c.extend({},t,{term:l})))?(i(p),a=a.substr(s+1)||"",s=0):s++):s++}return{term:a}},e}),e.define("select2/data/minimumInputLength",[],function(){function e(e,t,n){this.minimumInputLength=n.get("minimumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){t.term=t.term||"",t.term.length<this.minimumInputLength?this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:t.term,params:t}}):e.call(this,t,n)},e}),e.define("select2/data/maximumInputLength",[],function(){function e(e,t,n){this.maximumInputLength=n.get("maximumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){t.term=t.term||"",0<this.maximumInputLength&&t.term.length>this.maximumInputLength?this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:t.term,params:t}}):e.call(this,t,n)},e}),e.define("select2/data/maximumSelectionLength",[],function(){function e(e,t,n){this.maximumSelectionLength=n.get("maximumSelectionLength"),e.call(this,t,n)}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(){i._checkIfMaximumSelected()})},e.prototype.query=function(e,t,n){var i=this;this._checkIfMaximumSelected(function(){e.call(i,t,n)})},e.prototype._checkIfMaximumSelected=function(e,n){var i=this;this.current(function(e){var t=null!=e?e.length:0;0<i.maximumSelectionLength&&t>=i.maximumSelectionLength?i.trigger("results:message",{message:"maximumSelected",args:{maximum:i.maximumSelectionLength}}):n&&n()})},e}),e.define("select2/dropdown",["jquery","./utils"],function(t,e){function n(e,t){this.$element=e,this.options=t,n.__super__.constructor.call(this)}return e.Extend(n,e.Observable),n.prototype.render=function(){var e=t('<span class="select2-dropdown"><span class="select2-results"></span></span>');return e.attr("dir",this.options.get("dir")),this.$dropdown=e},n.prototype.bind=function(){},n.prototype.position=function(e,t){},n.prototype.destroy=function(){this.$dropdown.remove()},n}),e.define("select2/dropdown/search",["jquery","../utils"],function(a,e){function t(){}return t.prototype.render=function(e){var t=e.call(this),n=a('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="searchbox" aria-autocomplete="list" /></span>');return this.$searchContainer=n,this.$search=n.find("input"),t.prepend(n),t},t.prototype.bind=function(e,t,n){var i=this,r=t.id+"-results";e.call(this,t,n),this.$search.on("keydown",function(e){i.trigger("keypress",e),i._keyUpPrevented=e.isDefaultPrevented()}),this.$search.on("input",function(e){a(this).off("keyup")}),this.$search.on("keyup input",function(e){i.handleSearch(e)}),t.on("open",function(){i.$search.attr("tabindex",0),i.$search.attr("aria-controls",r),i.$search.trigger("focus"),window.setTimeout(function(){i.$search.trigger("focus")},0)}),t.on("close",function(){i.$search.attr("tabindex",-1),i.$search.removeAttr("aria-controls"),i.$search.removeAttr("aria-activedescendant"),i.$search.val(""),i.$search.trigger("blur")}),t.on("focus",function(){t.isOpen()||i.$search.trigger("focus")}),t.on("results:all",function(e){null!=e.query.term&&""!==e.query.term||(i.showSearch(e)?i.$searchContainer.removeClass("select2-search--hide"):i.$searchContainer.addClass("select2-search--hide"))}),t.on("results:focus",function(e){e.data._resultId?i.$search.attr("aria-activedescendant",e.data._resultId):i.$search.removeAttr("aria-activedescendant")})},t.prototype.handleSearch=function(e){var t;this._keyUpPrevented||(t=this.$search.val(),this.trigger("query",{term:t})),this._keyUpPrevented=!1},t.prototype.showSearch=function(e,t){return!0},t}),e.define("select2/dropdown/hidePlaceholder",[],function(){function e(e,t,n,i){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n,i)}return e.prototype.append=function(e,t){t.results=this.removePlaceholder(t.results),e.call(this,t)},e.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},e.prototype.removePlaceholder=function(e,t){for(var n=t.slice(0),i=t.length-1;0<=i;i--){var r=t[i];this.placeholder.id===r.id&&n.splice(i,1)}return n},e}),e.define("select2/dropdown/infiniteScroll",["jquery"],function(n){function e(e,t,n,i){this.lastParams={},e.call(this,t,n,i),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return e.prototype.append=function(e,t){this.$loadingMore.remove(),this.loading=!1,e.call(this,t),this.showLoadingMore(t)&&(this.$results.append(this.$loadingMore),this.loadMoreIfNeeded())},e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("query",function(e){i.lastParams=e,i.loading=!0}),t.on("query:append",function(e){i.lastParams=e,i.loading=!0}),this.$results.on("scroll",this.loadMoreIfNeeded.bind(this))},e.prototype.loadMoreIfNeeded=function(){var e,t=n.contains(document.documentElement,this.$loadingMore[0]);!this.loading&&t&&(e=this.$results.offset().top+this.$results.outerHeight(!1),this.$loadingMore.offset().top+this.$loadingMore.outerHeight(!1)<=e+50&&this.loadMore())},e.prototype.loadMore=function(){this.loading=!0;var e=n.extend({},{page:1},this.lastParams);e.page++,this.trigger("query:append",e)},e.prototype.showLoadingMore=function(e,t){return t.pagination&&t.pagination.more},e.prototype.createLoadingMore=function(){var e=n('<li class="select2-results__option select2-results__option--load-more"role="option" aria-disabled="true"></li>'),t=this.options.get("translations").get("loadingMore");return e.html(t(this.lastParams)),e},e}),e.define("select2/dropdown/attachBody",["jquery","../utils"],function(d,o){function e(e,t,n){this.$dropdownParent=d(n.get("dropdownParent")||document.body),e.call(this,t,n)}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("open",function(){i._showDropdown(),i._attachPositioningHandler(t),i._bindContainerResultHandlers(t)}),t.on("close",function(){i._hideDropdown(),i._detachPositioningHandler(t)}),this.$dropdownContainer.on("mousedown",function(e){e.stopPropagation()})},e.prototype.destroy=function(e){e.call(this),this.$dropdownContainer.remove()},e.prototype.position=function(e,t,n){t.attr("class",n.attr("class")),t.removeClass("select2"),t.addClass("select2-container--open"),t.css({position:"absolute",top:-999999}),this.$container=n},e.prototype.render=function(e){var t=d("<span></span>"),n=e.call(this);return t.append(n),this.$dropdownContainer=t},e.prototype._hideDropdown=function(e){this.$dropdownContainer.detach()},e.prototype._bindContainerResultHandlers=function(e,t){var n;this._containerResultsHandlersBound||(n=this,t.on("results:all",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("results:append",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("results:message",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("select",function(){n._positionDropdown(),n._resizeDropdown()}),t.on("unselect",function(){n._positionDropdown(),n._resizeDropdown()}),this._containerResultsHandlersBound=!0)},e.prototype._attachPositioningHandler=function(e,t){var n=this,i="scroll.select2."+t.id,r="resize.select2."+t.id,a="orientationchange.select2."+t.id,s=this.$container.parents().filter(o.hasScroll);s.each(function(){o.StoreData(this,"select2-scroll-position",{x:d(this).scrollLeft(),y:d(this).scrollTop()})}),s.on(i,function(e){var t=o.GetData(this,"select2-scroll-position");d(this).scrollTop(t.y)}),d(window).on(i+" "+r+" "+a,function(e){n._positionDropdown(),n._resizeDropdown()})},e.prototype._detachPositioningHandler=function(e,t){var n="scroll.select2."+t.id,i="resize.select2."+t.id,r="orientationchange.select2."+t.id;this.$container.parents().filter(o.hasScroll).off(n),d(window).off(n+" "+i+" "+r)},e.prototype._positionDropdown=function(){var e=d(window),t=this.$dropdown.hasClass("select2-dropdown--above"),n=this.$dropdown.hasClass("select2-dropdown--below"),i=null,r=this.$container.offset();r.bottom=r.top+this.$container.outerHeight(!1);var a={height:this.$container.outerHeight(!1)};a.top=r.top,a.bottom=r.top+a.height;var s=this.$dropdown.outerHeight(!1),o=e.scrollTop(),l=e.scrollTop()+e.height(),p=o<r.top-s,u=l>r.bottom+s,c={left:r.left,top:a.bottom},h=this.$dropdownParent;"static"===h.css("position")&&(h=h.offsetParent());var A={top:0,left:0};(d.contains(document.body,h[0])||h[0].isConnected)&&(A=h.offset()),c.top-=A.top,c.left-=A.left,t||n||(i="below"),u||!p||t?!p&&u&&t&&(i="below"):i="above",("above"==i||t&&"below"!==i)&&(c.top=a.top-A.top-s),null!=i&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+i),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+i)),this.$dropdownContainer.css(c)},e.prototype._resizeDropdown=function(){var e={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(e.minWidth=e.width,e.position="relative",e.width="auto"),this.$dropdown.css(e)},e.prototype._showDropdown=function(e){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},e}),e.define("select2/dropdown/minimumResultsForSearch",[],function(){function e(e,t,n,i){this.minimumResultsForSearch=n.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),e.call(this,t,n,i)}return e.prototype.showSearch=function(e,t){return!(function e(t){for(var n=0,i=0;i<t.length;i++){var r=t[i];r.children?n+=e(r.children):n++}return n}(t.data.results)<this.minimumResultsForSearch)&&e.call(this,t)},e}),e.define("select2/dropdown/selectOnClose",["../utils"],function(a){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("close",function(e){i._handleSelectOnClose(e)})},e.prototype._handleSelectOnClose=function(e,t){if(t&&null!=t.originalSelect2Event){var n=t.originalSelect2Event;if("select"===n._type||"unselect"===n._type)return}var i,r=this.getHighlightedResults();r.length<1||null!=(i=a.GetData(r[0],"data")).element&&i.element.selected||null==i.element&&i.selected||this.trigger("select",{data:i})},e}),e.define("select2/dropdown/closeOnSelect",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(e){i._selectTriggered(e)}),t.on("unselect",function(e){i._selectTriggered(e)})},e.prototype._selectTriggered=function(e,t){var n=t.originalEvent;n&&(n.ctrlKey||n.metaKey)||this.trigger("close",{originalEvent:n,originalSelect2Event:t})},e}),e.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(e){var t=e.input.length-e.maximum,n="Please delete "+t+" character";return 1!=t&&(n+="s"),n},inputTooShort:function(e){return"Please enter "+(e.minimum-e.input.length)+" or more characters"},loadingMore:function(){return"Loading more results…"},maximumSelected:function(e){var t="You can only select "+e.maximum+" item";return 1!=e.maximum&&(t+="s"),t},noResults:function(){return"No results found"},searching:function(){return"Searching…"},removeAllItems:function(){return"Remove all items"}}}),e.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(p,u,c,h,A,d,m,f,g,v,s,t,b,C,y,Q,B,K,_,w,q,U,Y,W,D,k,G,F,e){function n(){this.reset()}return n.prototype.apply=function(e){var t,n,i,r,a;null==(e=p.extend(!0,{},this.defaults,e)).dataAdapter&&(null!=e.ajax?e.dataAdapter=y:null!=e.data?e.dataAdapter=C:e.dataAdapter=b,0<e.minimumInputLength&&(e.dataAdapter=v.Decorate(e.dataAdapter,K)),0<e.maximumInputLength&&(e.dataAdapter=v.Decorate(e.dataAdapter,_)),0<e.maximumSelectionLength&&(e.dataAdapter=v.Decorate(e.dataAdapter,w)),e.tags&&(e.dataAdapter=v.Decorate(e.dataAdapter,Q)),null==e.tokenSeparators&&null==e.tokenizer||(e.dataAdapter=v.Decorate(e.dataAdapter,B)),null!=e.query&&(t=u(e.amdBase+"compat/query"),e.dataAdapter=v.Decorate(e.dataAdapter,t)),null!=e.initSelection&&(n=u(e.amdBase+"compat/initSelection"),e.dataAdapter=v.Decorate(e.dataAdapter,n))),null==e.resultsAdapter&&(e.resultsAdapter=c,null!=e.ajax&&(e.resultsAdapter=v.Decorate(e.resultsAdapter,W)),null!=e.placeholder&&(e.resultsAdapter=v.Decorate(e.resultsAdapter,Y)),e.selectOnClose&&(e.resultsAdapter=v.Decorate(e.resultsAdapter,G))),null==e.dropdownAdapter&&(e.multiple?e.dropdownAdapter=q:(i=v.Decorate(q,U),e.dropdownAdapter=i),0!==e.minimumResultsForSearch&&(e.dropdownAdapter=v.Decorate(e.dropdownAdapter,k)),e.closeOnSelect&&(e.dropdownAdapter=v.Decorate(e.dropdownAdapter,F)),null==e.dropdownCssClass&&null==e.dropdownCss&&null==e.adaptDropdownCssClass||(r=u(e.amdBase+"compat/dropdownCss"),e.dropdownAdapter=v.Decorate(e.dropdownAdapter,r)),e.dropdownAdapter=v.Decorate(e.dropdownAdapter,D)),null==e.selectionAdapter&&(e.multiple?e.selectionAdapter=A:e.selectionAdapter=h,null!=e.placeholder&&(e.selectionAdapter=v.Decorate(e.selectionAdapter,d)),e.allowClear&&(e.selectionAdapter=v.Decorate(e.selectionAdapter,m)),e.multiple&&(e.selectionAdapter=v.Decorate(e.selectionAdapter,f)),null==e.containerCssClass&&null==e.containerCss&&null==e.adaptContainerCssClass||(a=u(e.amdBase+"compat/containerCss"),e.selectionAdapter=v.Decorate(e.selectionAdapter,a)),e.selectionAdapter=v.Decorate(e.selectionAdapter,g)),e.language=this._resolveLanguage(e.language),e.language.push("en");for(var s=[],o=0;o<e.language.length;o++){var l=e.language[o];-1===s.indexOf(l)&&s.push(l)}return e.language=s,e.translations=this._processTranslations(e.language,e.debug),e},n.prototype.reset=function(){function o(e){return e.replace(/[^\u0000-\u007E]/g,function(e){return t[e]||e})}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:v.escapeMarkup,language:{},matcher:function e(t,n){if(""===p.trim(t.term))return n;if(n.children&&0<n.children.length){for(var i=p.extend(!0,{},n),r=n.children.length-1;0<=r;r--)null==e(t,n.children[r])&&i.children.splice(r,1);return 0<i.children.length?i:e(t,i)}var a=o(n.text).toUpperCase(),s=o(t.term).toUpperCase();return-1<a.indexOf(s)?n:null},minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,scrollAfterSelect:!1,sorter:function(e){return e},templateResult:function(e){return e.text},templateSelection:function(e){return e.text},theme:"default",width:"resolve"}},n.prototype.applyFromElement=function(e,t){var n=e.language,i=this.defaults.language,r=t.prop("lang"),a=t.closest("[lang]").prop("lang"),s=Array.prototype.concat.call(this._resolveLanguage(r),this._resolveLanguage(n),this._resolveLanguage(i),this._resolveLanguage(a));return e.language=s,e},n.prototype._resolveLanguage=function(e){if(!e)return[];if(p.isEmptyObject(e))return[];if(p.isPlainObject(e))return[e];for(var t,n=p.isArray(e)?e:[e],i=[],r=0;r<n.length;r++)i.push(n[r]),"string"==typeof n[r]&&0<n[r].indexOf("-")&&(t=n[r].split("-")[0],i.push(t));return i},n.prototype._processTranslations=function(e,t){for(var n=new s,i=0;i<e.length;i++){var r=new s,a=e[i];if("string"==typeof a)try{r=s.loadPath(a)}catch(e){try{a=this.defaults.amdLanguageBase+a,r=s.loadPath(a)}catch(e){t&&window.console&&console.warn&&console.warn('Select2: The language file for "'+a+'" could not be automatically loaded. A fallback will be used instead.')}}else r=p.isPlainObject(a)?new s(a):a;n.extend(r)}return n},n.prototype.set=function(e,t){var n={};n[p.camelCase(e)]=t;var i=v._convertData(n);p.extend(!0,this.defaults,i)},new n}),e.define("select2/options",["require","jquery","./defaults","./utils"],function(i,u,r,c){function e(e,t){var n;this.options=e,null!=t&&this.fromElement(t),null!=t&&(this.options=r.applyFromElement(this.options,t)),this.options=r.apply(this.options),t&&t.is("input")&&(n=i(this.get("amdBase")+"compat/inputData"),this.options.dataAdapter=c.Decorate(this.options.dataAdapter,n))}return e.prototype.fromElement=function(e){var t=["select2"];null==this.options.multiple&&(this.options.multiple=e.prop("multiple")),null==this.options.disabled&&(this.options.disabled=e.prop("disabled")),null==this.options.dir&&(e.prop("dir")?this.options.dir=e.prop("dir"):e.closest("[dir]").prop("dir")?this.options.dir=e.closest("[dir]").prop("dir"):this.options.dir="ltr"),e.prop("disabled",this.options.disabled),e.prop("multiple",this.options.multiple),c.GetData(e[0],"select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),c.StoreData(e[0],"data",c.GetData(e[0],"select2Tags")),c.StoreData(e[0],"tags",!0)),c.GetData(e[0],"ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),e.attr("ajax--url",c.GetData(e[0],"ajaxUrl")),c.StoreData(e[0],"ajax-Url",c.GetData(e[0],"ajaxUrl")));var n={};function i(e,t){return t.toUpperCase()}for(var r=0;r<e[0].attributes.length;r++){var a,s,o=e[0].attributes[r].name;"data-"==o.substr(0,"data-".length)&&(a=o.substring("data-".length),s=c.GetData(e[0],a),n[a.replace(/-([a-z])/g,i)]=s)}u.fn.jquery&&"1."==u.fn.jquery.substr(0,2)&&e[0].dataset&&(n=u.extend(!0,{},e[0].dataset,n));var l=u.extend(!0,{},c.GetData(e[0]),n),l=c._convertData(l);for(var p in l)-1<u.inArray(p,t)||(u.isPlainObject(this.options[p])?u.extend(this.options[p],l[p]):this.options[p]=l[p]);return this},e.prototype.get=function(e){return this.options[e]},e.prototype.set=function(e,t){this.options[e]=t},e}),e.define("select2/core",["jquery","./options","./utils","./keys"],function(a,p,u,i){var c=function(e,t){null!=u.GetData(e[0],"select2")&&u.GetData(e[0],"select2").destroy(),this.$element=e,this.id=this._generateId(e),t=t||{},this.options=new p(t,e),c.__super__.constructor.call(this);var n=e.attr("tabindex")||0;u.StoreData(e[0],"old-tabindex",n),e.attr("tabindex","-1");var i=this.options.get("dataAdapter");this.dataAdapter=new i(e,this.options);var r=this.render();this._placeContainer(r);var a=this.options.get("selectionAdapter");this.selection=new a(e,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,r);var s=this.options.get("dropdownAdapter");this.dropdown=new s(e,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,r);var o=this.options.get("resultsAdapter");this.results=new o(e,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var l=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(e){l.trigger("selection:update",{data:e})}),e.addClass("select2-hidden-accessible"),e.attr("aria-hidden","true"),this._syncAttributes(),u.StoreData(e[0],"select2",this),e.data("select2",this)};return u.Extend(c,u.Observable),c.prototype._generateId=function(e){return"select2-"+(null!=e.attr("id")?e.attr("id"):null!=e.attr("name")?e.attr("name")+"-"+u.generateChars(2):u.generateChars(4)).replace(/(:|\.|\[|\]|,)/g,"")},c.prototype._placeContainer=function(e){e.insertAfter(this.$element);var t=this._resolveWidth(this.$element,this.options.get("width"));null!=t&&e.css("width",t)},c.prototype._resolveWidth=function(e,t){var n=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==t){var i=this._resolveWidth(e,"style");return null!=i?i:this._resolveWidth(e,"element")}if("element"==t){var r=e.outerWidth(!1);return r<=0?"auto":r+"px"}if("style"!=t)return"computedstyle"!=t?t:window.getComputedStyle(e[0]).width;var a=e.attr("style");if("string"!=typeof a)return null;for(var s=a.split(";"),o=0,l=s.length;o<l;o+=1){var p=s[o].replace(/\s/g,"").match(n);if(null!==p&&1<=p.length)return p[1]}return null},c.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},c.prototype._registerDomEvents=function(){var t=this;this.$element.on("change.select2",function(){t.dataAdapter.current(function(e){t.trigger("selection:update",{data:e})})}),this.$element.on("focus.select2",function(e){t.trigger("focus",e)}),this._syncA=u.bind(this._syncAttributes,this),this._syncS=u.bind(this._syncSubtree,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._syncA);var e=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=e?(this._observer=new e(function(e){t._syncA(),t._syncS(null,e)}),this._observer.observe(this.$element[0],{attributes:!0,childList:!0,subtree:!1})):this.$element[0].addEventListener&&(this.$element[0].addEventListener("DOMAttrModified",t._syncA,!1),this.$element[0].addEventListener("DOMNodeInserted",t._syncS,!1),this.$element[0].addEventListener("DOMNodeRemoved",t._syncS,!1))},c.prototype._registerDataEvents=function(){var n=this;this.dataAdapter.on("*",function(e,t){n.trigger(e,t)})},c.prototype._registerSelectionEvents=function(){var n=this,i=["toggle","focus"];this.selection.on("toggle",function(){n.toggleDropdown()}),this.selection.on("focus",function(e){n.focus(e)}),this.selection.on("*",function(e,t){-1===a.inArray(e,i)&&n.trigger(e,t)})},c.prototype._registerDropdownEvents=function(){var n=this;this.dropdown.on("*",function(e,t){n.trigger(e,t)})},c.prototype._registerResultsEvents=function(){var n=this;this.results.on("*",function(e,t){n.trigger(e,t)})},c.prototype._registerEvents=function(){var n=this;this.on("open",function(){n.$container.addClass("select2-container--open")}),this.on("close",function(){n.$container.removeClass("select2-container--open")}),this.on("enable",function(){n.$container.removeClass("select2-container--disabled")}),this.on("disable",function(){n.$container.addClass("select2-container--disabled")}),this.on("blur",function(){n.$container.removeClass("select2-container--focus")}),this.on("query",function(t){n.isOpen()||n.trigger("open",{}),this.dataAdapter.query(t,function(e){n.trigger("results:all",{data:e,query:t})})}),this.on("query:append",function(t){this.dataAdapter.query(t,function(e){n.trigger("results:append",{data:e,query:t})})}),this.on("keypress",function(e){var t=e.which;n.isOpen()?t===i.ESC||t===i.TAB||t===i.UP&&e.altKey?(n.close(e),e.preventDefault()):t===i.ENTER?(n.trigger("results:select",{}),e.preventDefault()):t===i.SPACE&&e.ctrlKey?(n.trigger("results:toggle",{}),e.preventDefault()):t===i.UP?(n.trigger("results:previous",{}),e.preventDefault()):t===i.DOWN&&(n.trigger("results:next",{}),e.preventDefault()):(t===i.ENTER||t===i.SPACE||t===i.DOWN&&e.altKey)&&(n.open(),e.preventDefault())})},c.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.isDisabled()?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},c.prototype._isChangeMutation=function(e,t){var n=!1,i=this;if(!e||!e.target||"OPTION"===e.target.nodeName||"OPTGROUP"===e.target.nodeName){if(t)if(t.addedNodes&&0<t.addedNodes.length)for(var r=0;r<t.addedNodes.length;r++)t.addedNodes[r].selected&&(n=!0);else t.removedNodes&&0<t.removedNodes.length?n=!0:a.isArray(t)&&a.each(t,function(e,t){if(i._isChangeMutation(e,t))return!(n=!0)});else n=!0;return n}},c.prototype._syncSubtree=function(e,t){var n=this._isChangeMutation(e,t),i=this;n&&this.dataAdapter.current(function(e){i.trigger("selection:update",{data:e})})},c.prototype.trigger=function(e,t){var n=c.__super__.trigger,i={open:"opening",close:"closing",select:"selecting",unselect:"unselecting",clear:"clearing"};if(void 0===t&&(t={}),e in i){var r=i[e],a={prevented:!1,name:e,args:t};if(n.call(this,r,a),a.prevented)return void(t.prevented=!0)}n.call(this,e,t)},c.prototype.toggleDropdown=function(){this.isDisabled()||(this.isOpen()?this.close():this.open())},c.prototype.open=function(){this.isOpen()||this.isDisabled()||this.trigger("query",{})},c.prototype.close=function(e){this.isOpen()&&this.trigger("close",{originalEvent:e})},c.prototype.isEnabled=function(){return!this.isDisabled()},c.prototype.isDisabled=function(){return this.options.get("disabled")},c.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},c.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},c.prototype.focus=function(e){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},c.prototype.enable=function(e){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),null!=e&&0!==e.length||(e=[!0]);var t=!e[0];this.$element.prop("disabled",t)},c.prototype.data=function(){this.options.get("debug")&&0<arguments.length&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var t=[];return this.dataAdapter.current(function(e){t=e}),t},c.prototype.val=function(e){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==e||0===e.length)return this.$element.val();var t=e[0];a.isArray(t)&&(t=a.map(t,function(e){return e.toString()})),this.$element.val(t).trigger("input").trigger("change")},c.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._syncA),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&(this.$element[0].removeEventListener("DOMAttrModified",this._syncA,!1),this.$element[0].removeEventListener("DOMNodeInserted",this._syncS,!1),this.$element[0].removeEventListener("DOMNodeRemoved",this._syncS,!1)),this._syncA=null,this._syncS=null,this.$element.off(".select2"),this.$element.attr("tabindex",u.GetData(this.$element[0],"old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),u.RemoveData(this.$element[0]),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},c.prototype.render=function(){var e=a('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return e.attr("dir",this.options.get("dir")),this.$container=e,this.$container.addClass("select2-container--"+this.options.get("theme")),u.StoreData(e[0],"element",this.$element),e},c}),e.define("jquery-mousewheel",["jquery"],function(e){return e}),e.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults","./select2/utils"],function(r,e,a,t,s){var o;return null==r.fn.select2&&(o=["open","close","destroy"],r.fn.select2=function(t){if("object"==typeof(t=t||{}))return this.each(function(){var e=r.extend(!0,{},t);new a(r(this),e)}),this;if("string"!=typeof t)throw new Error("Invalid arguments for Select2: "+t);var n,i=Array.prototype.slice.call(arguments,1);return this.each(function(){var e=s.GetData(this,"select2");null==e&&window.console&&console.error&&console.error("The select2('"+t+"') method was called on an element that is not using Select2."),n=e[t].apply(e,i)}),-1<r.inArray(t,o)?this:n}),null==r.fn.select2.defaults&&(r.fn.select2.defaults=t),a}),{define:e.define,require:e.require});function y(e,t){return o.call(e,t)}function u(e,t){var n,i,r,a,s,o,l,p,u,c,h,A=t&&t.split("/"),d=v.map,m=d&&d["*"]||{};if(e){for(s=(e=e.split("/")).length-1,v.nodeIdCompat&&C.test(e[s])&&(e[s]=e[s].replace(C,"")),"."===e[0].charAt(0)&&A&&(e=A.slice(0,A.length-1).concat(e)),u=0;u<e.length;u++)if("."===(h=e[u]))e.splice(u,1),--u;else if(".."===h){if(0===u||1===u&&".."===e[2]||".."===e[u-1])continue;0<u&&(e.splice(u-1,2),u-=2)}e=e.join("/")}if((A||m)&&d){for(u=(n=e.split("/")).length;0<u;--u){if(i=n.slice(0,u).join("/"),A)for(c=A.length;0<c;--c)if(r=(r=d[A.slice(0,c).join("/")])&&r[i]){a=r,o=u;break}if(a)break;!l&&m&&m[i]&&(l=m[i],p=u)}!a&&l&&(a=l,o=p),a&&(n.splice(0,o,a),e=n.join("/"))}return e}function Q(t,n){return function(){var e=l.call(arguments,0);return"string"!=typeof e[0]&&1===e.length&&e.push(null),s.apply(A,e.concat([t,n]))}}function B(e){var t;if(y(g,e)&&(t=g[e],delete g[e],b[e]=!0,a.apply(A,t)),!y(f,e)&&!y(b,e))throw new Error("No "+e);return f[e]}function c(e){var t,n=e?e.indexOf("!"):-1;return-1<n&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function K(e){return e?c(e):[]}var h=p.require("jquery.select2");return t.fn.select2.amd=p,h},"function"==typeof define&&define.amd?define(["jquery"],i):"object"==typeof e&&e.exports?e.exports=function(e,t){return void 0===t&&(t="undefined"!=typeof window?n("jquery"):n("jquery")(e)),i(t),t}:i(jQuery)},{jquery:29}],32:[function(n,e,t){(function(e){e.$=e.jQuery=n("jquery"),n("jquery-ui"),n("jquery-ui/ui/data"),n("jquery-ui/ui/version"),n("jquery-ui/ui/ie"),n("jquery-ui/ui/scroll-parent"),n("jquery-ui/ui/plugin"),n("jquery-ui/ui/disable-selection"),n("jquery-ui/ui/unique-id"),n("jquery-ui/ui/safe-blur"),n("jquery-ui/ui/safe-active-element"),n("jquery-ui/ui/position"),n("jquery-ui/ui/keycode"),n("jquery-ui/ui/focusable"),n("jquery-ui/ui/tabbable"),n("jquery-ui/ui/widget"),n("jquery-ui/ui/widgets/mouse"),n("jquery-ui/ui/widgets/datepicker"),n("jquery-ui/ui/widgets/sortable"),n("jquery-ui/ui/widgets/button"),n("jquery-ui/ui/widgets/draggable"),n("jquery-ui/ui/widgets/resizable"),n("jquery-ui/ui/widgets/dialog"),n("jquery-ui/ui/widgets/tooltip"),n("select2")($),n("jquery.cookie"),n("jquery-validation"),n("./assets/jQueryBindWithDelay"),n("./assets/sprintf"),n("./assets/jquery.fileDownload");var t=new(n("./modules/general.js"));e.app=t,$(document).ready(function(){t.init()})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./assets/jQueryBindWithDelay":34,"./assets/jquery.fileDownload":35,"./assets/sprintf":37,"./modules/general.js":39,jquery:29,"jquery-ui":18,"jquery-ui/ui/data":5,"jquery-ui/ui/disable-selection":6,"jquery-ui/ui/focusable":7,"jquery-ui/ui/ie":8,"jquery-ui/ui/keycode":9,"jquery-ui/ui/plugin":10,"jquery-ui/ui/position":11,"jquery-ui/ui/safe-active-element":12,"jquery-ui/ui/safe-blur":13,"jquery-ui/ui/scroll-parent":14,"jquery-ui/ui/tabbable":15,"jquery-ui/ui/unique-id":16,"jquery-ui/ui/version":17,"jquery-ui/ui/widget":18,"jquery-ui/ui/widgets/button":19,"jquery-ui/ui/widgets/datepicker":20,"jquery-ui/ui/widgets/dialog":21,"jquery-ui/ui/widgets/draggable":22,"jquery-ui/ui/widgets/mouse":23,"jquery-ui/ui/widgets/resizable":24,"jquery-ui/ui/widgets/sortable":25,"jquery-ui/ui/widgets/tooltip":26,"jquery-validation":27,"jquery.cookie":28,select2:31}],33:[function(e,t,n){var i={};i.success=new Audio("data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU="),i.success2=new Audio("data:audio/wav;base64,"),i.error=new Audio("data:audio/wav;base64,"),t.exports=i},{}],34:[function(e,t,n){$.fn.bindWithDelay=function(t,i,r,a,s){return $.isFunction(i)&&(s=a,a=r,r=i,i=void 0),r.guid=r.guid||$.guid&&$.guid++,this.each(function(){var n=null;function e(){var e=$.extend(!0,{},arguments[0]),t=this;s||(clearTimeout(n),n=null),n=n||setTimeout(function(){n=null,r.apply(t,[e])},a)}e.guid=r.guid,$(this).on(t,i,e)})}},{}],35:[function(e,t,n){var C,y,Q,B;C=jQuery,y=this||window,Q=/[<>&\r\n"']/gm,B={"<":"lt;",">":"gt;","&":"amp;","\r":"#13;","\n":"#10;",'"':"quot;","'":"#39;"},C.extend({fileDownload:function(o,e){var t,n,i,l=C.extend({preparingMessageHtml:null,failMessageHtml:null,androidPostUnsupportedMessageHtml:"Unfortunately your Android browser doesn't support this type of file download. Please try again with a different browser.",dialogOptions:{modal:!0},prepareCallback:function(e){},successCallback:function(e){},abortCallback:function(e){},failCallback:function(e,t,n){},httpMethod:"GET",data:null,checkInterval:100,cookieName:"fileDownload",cookieValue:"true",cookiePath:"/",cookieDomain:null,popupWindowTitle:"Initiating file download...",encodeHTMLEntities:!0},e),r=new C.Deferred,a=(navigator.userAgent||navigator.vendor||y.opera).toLowerCase();/ip(ad|hone|od)/.test(a)?t=!0:-1!==a.indexOf("android")?n=!0:i=/avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|playbook|silk|iemobile|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|e\-|e\/|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\-|2|g)|yas\-|your|zeto|zte\-/i.test(a.substr(0,4));var s=l.httpMethod.toUpperCase();if(n&&"GET"!==s&&l.androidPostUnsupportedMessageHtml)return C().dialog?C("<div>").html(l.androidPostUnsupportedMessageHtml).dialog(l.dialogOptions):alert(l.androidPostUnsupportedMessageHtml),r.reject();var p,u,c,h,A,d=null,m={onPrepare:function(e){l.preparingMessageHtml?d=C("<div>").html(l.preparingMessageHtml).dialog(l.dialogOptions):l.prepareCallback&&l.prepareCallback(e)},onSuccess:function(e){d&&d.dialog("close"),l.successCallback(e),r.resolve(e)},onAbort:function(e){d&&d.dialog("close"),l.abortCallback(e),r.reject(e)},onFail:function(e,t,n){d&&d.dialog("close"),l.failMessageHtml&&C("<div>").html(l.failMessageHtml).dialog(l.dialogOptions),l.failCallback(e,t,n),r.reject(e,t)}};function f(e){var t=e[0].contentWindow||e[0].contentDocument;return t.document&&(t=t.document),t}function g(e){setTimeout(function(){u&&(n&&u.close(),t&&u.focus&&(u.focus(),e&&u.close()))},0)}function v(e){return e.replace(Q,function(e){return"&"+B[e]})}m.onPrepare(o),null!==l.data&&"string"!=typeof l.data&&(l.data=C.param(l.data)),"GET"===s?(null!==l.data&&(-1!==o.indexOf("?")?"&"!==o.substring(o.length-1)&&(o+="&"):o+="?",o+=l.data),t||n?((u=y.open(o)).document.title=l.popupWindowTitle,y.focus()):i?y.location(o):p=C("<iframe>").hide().prop("src",o).appendTo("body")):(A="",null!==l.data&&C.each(l.data.replace(/\+/g," ").split("&"),function(){var e=(n=this.split("="))[0];n.shift();var t,n=[e,n.join("=")],i=l.encodeHTMLEntities?v(decodeURIComponent(n[0])):decodeURIComponent(n[0]);i&&(t=l.encodeHTMLEntities?v(decodeURIComponent(n[1])):decodeURIComponent(n[1]),A+='<input type="hidden" name="'+i+'" value="'+t+'" />')}),i?(h=C("<form>").appendTo("body")).hide().prop("method",l.httpMethod).prop("action",o).html(A):(t?((u=y.open("about:blank")).document.title=l.popupWindowTitle,c=u.document,y.focus()):c=f(p=C("<iframe style='display: none' src='about:blank'></iframe>").appendTo("body")),c.write("<html><head></head><body><form method='"+l.httpMethod+"' action='"+o+"'>"+A+"</form>"+l.popupWindowTitle+"</body></html>"),h=C(c).find("form")),h.submit()),setTimeout(function e(){var t=l.cookieValue;"string"==typeof t&&(t=t.toLowerCase());var n=l.cookieName.toLowerCase()+"="+t;if(-1<document.cookie.toLowerCase().indexOf(n)){m.onSuccess(o);var i=l.cookieName+"=; path="+l.cookiePath+"; expires="+new Date(0).toUTCString()+";";return l.cookieDomain&&(i+=" domain="+l.cookieDomain+";"),document.cookie=i,void g(!1)}if(u||p)try{var r=u?u.document:f(p);if(r&&null!==r.body&&r.body.innerHTML.length){var a=!0;if(h&&h.length){var s=C(r.body).contents().first();try{s.length&&s[0]===h[0]&&(a=!1)}catch(e){if(!e||-2146828218!=e.number)throw e;a=!0}}if(a)return void setTimeout(function(){m.onFail(r.body.innerHTML,o),g(!0)},100)}}catch(e){return m.onFail("",o,e),void g(!0)}setTimeout(e,l.checkInterval)},l.checkInterval);var b=r.promise();return b.abort=function(){g(),p.attr("src","").html(""),m.onAbort(o)},b}})},{}],36:[function(e,t,n){QueryBuilder.extend({_validateValue:function(e,t){var n,i,r=e.filter,a=e.operator,s=r.validation||{},o=!0;1===e.operator.nb_inputs&&(t=[t]);for(var l=0;l<a.nb_inputs;l++){if(!a.multiple&&$.isArray(t[l])&&1<t[l].length){o=["operator_not_multiple",a.type,this.translate("operators",a.type)];break}switch(r.input){case"radio":if(void 0!==t[l]&&0!==t[l].length)break;s.allow_empty_value||(o=this.getValidationMessage(s,"allow_empty_value","radio_empty"));break;case"checkbox":if(void 0!==t[l]&&0!==t[l].length)break;s.allow_empty_value||(o=this.getValidationMessage(s,"allow_empty_value","checkbox_empty"));break;case"select":if(void 0===t[l]||0===t[l].length||r.placeholder&&t[l]==r.placeholder_value){s.allow_empty_value||(o=this.getValidationMessage(s,"allow_empty_value","select_empty"));break}break;default:i=$.isArray(t[l])?t[l]:[t[l]];for(var p=0;p<i.length;p++){switch(QueryBuilder.types[r.type]){case"string":if(void 0===i[p]||0===i[p].length){s.allow_empty_value||(o=this.getValidationMessage(s,"allow_empty_value","string_empty"));break}if(void 0!==s.min&&i[p].length<parseInt(s.min)){o=[this.getValidationMessage(s,"min","string_exceed_min_length"),s.min];break}if(void 0!==s.max&&i[p].length>parseInt(s.max)){o=[this.getValidationMessage(s,"max","string_exceed_max_length"),s.max];break}if(!s.format||("string"==typeof s.format&&(s.format=new RegExp(s.format)),s.format.test(i[p])))break;o=[this.getValidationMessage(s,"format","string_invalid_format"),s.format];break;case"number":if(void 0===i[p]||0===i[p].length){s.allow_empty_value||(o=this.getValidationMessage(s,"number_nan","number_nan"));break}if(isNaN(i[p])){o=this.getValidationMessage(s,"number_nan","number_nan");break}if("integer"==r.type){if(parseInt(i[p])!=i[p]){o=this.getValidationMessage(s,"number_not_integer","number_not_integer");break}}else if(parseFloat(i[p])!=i[p]){o=this.getValidationMessage(s,"number_not_double","number_not_double");break}if(void 0!==s.min&&i[p]<parseFloat(s.min)){o=[this.getValidationMessage(s,"min","number_exceed_min"),s.min];break}if(void 0!==s.max&&i[p]>parseFloat(s.max)){o=[this.getValidationMessage(s,"max","number_exceed_max"),s.max];break}if(void 0!==s.step&&"any"!==s.step){var u=(i[p]/s.step).toPrecision(14);if(parseInt(u)!=u){o=[this.getValidationMessage(s,"step","number_wrong_step"),s.step];break}}break;case"datetime":if(void 0===i[p]||0===i[p].length){s.allow_empty_value||(o=this.getValidationMessage(s,"allow_empty_value","datetime_empty"));break}if(s.format){"moment"in window||Utils.error("MissingLibrary","MomentJS is required for Date/Time validation. Get it here http://momentjs.com");var c=moment(i[p],s.format,!0);if(!c.isValid()){o=[this.getValidationMessage(s,"format","datetime_invalid"),s.format];break}if(s.min&&c<moment(s.min,s.format)){o=[this.getValidationMessage(s,"min","datetime_exceed_min"),s.min];break}if(s.max&&c>moment(s.max,s.format)){o=[this.getValidationMessage(s,"max","datetime_exceed_max"),s.max];break}}break;case"boolean":if(void 0===i[p]||0===i[p].length){s.allow_empty_value||(o=this.getValidationMessage(s,"boolean_not_valid","boolean_not_valid"));break}if("true"!==(n=(""+i[p]).trim().toLowerCase())&&"false"!==n&&"1"!==n&&"0"!==n&&1!==i[p]&&0!==i[p]){o=this.getValidationMessage(s,"boolean_not_valid","boolean_not_valid");break}}if(!0!==o)break}}if(!0!==o)break}return o}})},{}],37:[function(e,t,n){String.prototype.format||(String.prototype.format=function(){var n=arguments;return this.replace(/{(\d+)}/g,function(e,t){return void 0!==n[t]?n[t]:e})})},{}],38:[function(e,t,n){t.exports=function(e){"use strict";var t=this;this.General=e,this.init=function(){var e=$(".export-button");e.length<1||e.click(function(e){e.preventDefault(),$.removeCookie("fileDownload",{path:urlbase}),t.fileDownload(this)})},this.fileDownload=function(e){var t=$(e).attr("href");$.fileDownload(t,{preparingMessageHtml:trans.preparing_report,failMessageHtml:trans.preparing_report_failed})}}},{}],39:[function(i,e,t){var n=i("./varieties.js"),a=i("./trees.js"),s=i("./marks.js"),o=i("./queries/view_selector.js"),l=i("./queries/where_builder.js"),h=i("./exporter.js"),A=i("./queries/results_viewer.js");e.exports=function(){"use strict";var p,u,r,c=this;this.Varieties=new n(c),this.Trees=new a(c),this.Marks=new s(c),this.QueriesViewSelector=new o(c),this.QueriesWhereBuilder=new l(c),this.Exporter=new h(c),this.ResultsViewer=new A(c),this.init=function(){this.searching='<div class="searching">'+trans.searching+"</div>",this.instantiateDatepicker(),this.instantiateSelect2(),this.selectConvar(),this.instantiateFilter(),this.instantiateEliminatedTreesFilter(),this.instantiatePrefillMarker(),this.instantiatePrintButtons(),this.Varieties.selectBatchId(),this.Varieties.setCodeFromOfficialName(),this.Trees.get(),this.Marks.initValidationRulesCreator(),this.Marks.addMarkFormFieldInit(),this.Marks.loadFormFields(),this.Marks.initScannerCodeGenerationPropertyLoader(),this.Marks.byScanner(),this.Marks.unlockScannerField(),this.QueriesViewSelector.init(),this.QueriesWhereBuilder.init(),this.Exporter.init(),this.ResultsViewer.init()},this.instantiateDatepicker=function(){$(".datepicker").datepicker({dateFormat:trans.dateformat}),$(".datepicker.allow-text").datepicker("option","constrainInput",!1)},this.instantiateSelect2=function(){$("select").not(".hide, .hidden, .no-select2").select2({minimumResultsForSearch:12})},this.instantiateFilter=function(){var a,s=$(".filter").first(),o=$("#index_table").first(),l=o.find("th > a"),e=o.find(".pagination a");s.off("keyup paste change"),s.on("keyup paste change",function(){a&&4!==a.readyState&&a.abort();clearTimeout(c.search_timer),c.search_timer=setTimeout(function(){a=c.getFilteredData(s.val(),s.data("filter"),o)},250)}),l.off("click"),l.click(function(e){var t=$(this),n=t.attr("href");p=c.getUrlParameter("sort",n);var i="asc"===(u=c.getUrlParameter("direction",n))?"desc":"asc",r=n.replace(/direction=\w+/,"direction="+i);e.preventDefault(),a&&4!==a.readyState&&a.abort(),t.attr("href",r),l.removeClass("asc desc"),t.addClass(i),a=c.getFilteredData(s.val(),s.data("filter"),o)}),e.off("click"),e.each(function(){var n=$(this);n.click(function(e){var t=n.attr("href");e.preventDefault(),""!==t&&(r=c.getUrlParameter("page",t),a&&4!==a.readyState&&a.abort(),a=c.getFilteredData(s.val(),s.data("filter"),o))})})},this.getFilteredData=function(e,t,i){return $.ajax({url:webroot+t.controller+"/"+t.action,data:{fields:t.fields,options:t.options,term:e,sort:p,direction:u,page:r},success:function(e){var t=$(e).find("tbody"),n=$(e).siblings("div.paginator");t.length&&n.length?(i.find("tbody").html(t.html()),i.find(".paginator").html(n.html()),c.instantiateFilter()):i.find("tbody").html(e)},dataType:"html",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken),i.find("tbody").html(trans.searching)}})},this.selectConvar=function(){var n,i=$(".select2convar");i.select2({ajax:{url:webroot+"varieties/searchConvars",delay:250,dataType:"json",processResults:function(e){var t=$.map(e.data,function(e,t){return{text:e,id:t}});return 0<t.length&&(n=t[0].text.match(/^[^.]+\.[^.]+/)),i.hasClass("select2convar_add")&&0===t.length&&n&&(t=[{text:trans.create_new_variety+" "+n,id:n}]),{results:t}},beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken)},cache:!0},minimumInputLength:1,sorter:function(e){return e.sort(function(e,t){return e=e.text.toLowerCase(),(t=t.text.toLowerCase())<e?1:e<t?-1:0})}}),i.on("select2:selecting",function(e){var t,n=e.params.args.data.text;n.match(/[a-zA-Z0-9]{4,8}\.\d{2}[A-Z]$/)&&(t=n.match(/[a-zA-Z0-9]{4,8}\.\d{2}[A-Z]$/)[0],e.params.args.data.text=trans.uc_new+" "+t)})},this.getUrlParameter=function(e,t){for(var n,i=t.toString().split("?")[1],r=decodeURIComponent(i).split("&"),a=0;a<r.length;a++)if((n=r[a].split("="))[0]===e)return void 0!==n[1]&&n[1]},this.instantiatePrefillMarker=function(){var e=$("input.brain-prefilled, select.brain-prefilled"),t='<span class="brain_prefilled_msg">'+trans.brain_prefill+"</span>";e.each(function(){$(this).parents("div.input").find("label").first().append(t)})},this.beep=function(e){var t,n=i("./../assets/beeps.js");return"success"===e&&(t=n.success),"success2"===e&&(t=n.success2),"error"===e&&(t=n.error),t.play(),t},this.instantiatePrintButtons=function(){$(".zpl_print").click(function(e){var t=window.open();t.document.open("text/plain"),t.document.write($(this).attr("data-zpl")),t.document.close(),t.focus(),t.print(),t.close(),$(this).hasClass("prevent_default")&&e.preventDefault()})},this.instantiateEliminatedTreesFilter=function(){var t=$("#show-eliminated-trees"),n=$(".filter").first();t.on("change",function(){var e=n.data("filter");e.options.show_eliminated=t.prop("checked"),n.data("filter",e),n.trigger("change")})}}},{"./../assets/beeps.js":33,"./exporter.js":38,"./marks.js":40,"./queries/results_viewer.js":41,"./queries/view_selector.js":42,"./queries/where_builder.js":43,"./trees.js":44,"./varieties.js":45}],40:[function(e,t,n){t.exports=function(e){"use strict";var s=this;this.General=e,this.initValidationRulesCreator=function(){var e=$(".mark_field_type");e.change(function(){s.showValidationRulesCreatorFields($(this).val())}),s.showValidationRulesCreatorFields(e.val())},this.showValidationRulesCreatorFields=function(e){var t=$(".mark_validation_rule");switch(e){case"VARCHAR":case"BOOLEAN":case"DATE":this.removeControl(t);break;default:this.addControl(t)}},this.removeControl=function(e){$(e).attr("disabled","disabled"),$(e).parent().hide()},this.addControl=function(e){$(e).removeAttr("disabled"),$(e).parent().show()},this.addMarkFormFieldInit=function(){$(".add_mark_form_field").off("change").change(function(){$.ajax({url:webroot+"mark-form-properties/get/"+$(this).val()+"/"+$(this).attr("data-mode"),success:function(e){$(".mark_form_fields").append(e),s.initNewField()},method:"GET",dataType:"html",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken)}})})},this.initNewField=function(){s.makeFormFieldsSortable(),s.makeFormFieldsDeletable(),s.General.instantiateDatepicker()},this.makeFormFieldsSortable=function(){$(".mark_form_fields.sortable").sortable({handle:".sortable_handle"})},this.makeFormFieldsDeletable=function(){$(".mark_form_fields .delete_button").off("click").click(function(){!0===confirm(trans.delete_element+" "+$(this).prev().find("label").first().text()+"?")&&$(this).parents(".deletable_element").remove()})},this.loadFormFields=function(){$(".form-field-selector").change(function(){$.ajax({url:webroot+"marks/get-form-fields/"+$(this).val(),success:function(e){$(".mark_form_fields_wrapper").html(e),s.initNewField()},method:"GET",dataType:"html",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken)}})})},this.initScannerCodeGenerationPropertyLoader=function(){$(".select_property").change(function(){$.ajax({url:webroot+"mark-form-properties/get/"+$(this).val()+"/field_scanner_code_mode",success:function(e){var t=$("#mark_value_wrapper"),n=$(".replace_me"),i=n.attr("name"),r=n.attr("id"),a=n.attr("class");t.html($(e)),t.find("input").attr("name",i).addClass(a).attr("id",r),s.General.instantiateDatepicker()},method:"GET",dataType:"html",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken)}})})},this.unlockScannerField=function(){$("#mark-form-id").val()?$(".scanner_mark_field").removeAttr("disabled").focus():$("#mark-form-id").change(function(){$(".scanner_mark_field").removeAttr("disabled").focus()})},this.byScanner=function(){var e=$(".scanner_mark_field").first();e.bindWithDelay("keyup paste",function(){0<e.val().length&&s.processScannerCode(e)},200)},this.getTree=function(e){var n=$("#tree_container").first(),i=$("#searching").first();$.ajax({url:webroot+"/trees/getTree",data:{fields:["publicid"],element:"get_tree",term:e,printable:"with_date"},success:function(e,t){"success"===t?(n.html(e),s.General.beep("success")):(n.html('<div class="nothing_found">'+trans.no_tree_found+"</div>"),s.General.beep("error")),i.hide(),$(".scanner_mark_field").first().focus()},dataType:"html",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken),i.show()}})},this.getScannerMark=function(e){var t=$("#searching").first();$.ajax({url:webroot+"mark-scanner-codes/get-mark",data:{term:e},success:function(e){s.setMark($.parseJSON(e).data),t.hide(),$(".scanner_mark_field").first().focus()},error:function(){s.General.beep("error"),t.hide(),$(".scanner_mark_field").first().focus()},dataType:"html",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken),t.show()}})},this.setMark=function(e){var t="#mark-form-fields-mark-form-properties-"+e.mark_form_property_id+"-mark-values-value",n="#mark-form-fields-mark-form-properties-"+e.mark_form_property_id+"-mark-values-value-"+e.mark_value,i=1===$(t).length?$(t):$(n);1===i.length?("radio"===i.attr("type")?i.attr("checked","checked"):"now"===e.mark_value&&i.attr("data-date")?i.val(this.currentDate()):i.val(e.mark_value),s.General.beep("success")):s.General.beep("error").addEventListener("ended",function(){alert(String(trans.matching_elements).format(i.length))})},this.currentDate=function(){var e=new Date;return("0"+e.getDate()).slice(-2)+"."+("0"+(e.getMonth()+1)).slice(-2)+"."+e.getFullYear()},this.submitForm=function(){var e=$("form").find("input, select, textarea"),t=!0,n=$("#tree_id");e.each(function(){$(this)[0].checkValidity()||(t=!1)}),0!==n.length&&""!==n.val()||(t=!1),t?s.General.beep("success2").addEventListener("ended",function(){$("button[type=submit]").trigger("click")}):s.General.beep("error")},this.processScannerCode=function(e){var t=e.val();null!==t.match(/^M\d{5}$/)?s.getScannerMark(t):null!==t.match(/^SUBMIT$/)?s.submitForm():s.getTree(t),e.val("")}}},{}],41:[function(e,t,n){t.exports=function(e){"use strict";var a=this;this.General=e,this.markParents=[],this.init=function(){var e=$(".mark_value");this.initToggleSideNav(),e.length<1||e.tooltip({items:"span.mark_value",track:!0,tooltipClass:"mark_value_tooltip",position:{my:"left+30 center",collision:"flipfit flip"},content:trans.loading,content:function(e){return a.getMarkValueTooltipContent(this,e)}})},this.getMarkValueTooltipContent=function(e,t){var n=$(e),i=parseInt(n.attr("class").toString().replace(/[^\d]*/,""));return void 0===a.markParents[i]&&(a.markParents[i]=trans.loading,a.loadMark(i,n,t)),a.markParents[i]},this.loadMark=function(i,e,r){$.ajax({url:webroot+"marks-view/get/"+i,beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken)}}).done(function(e,t,n){a.markParents[i]=e,r(e)}).fail(function(e,t,n){r(String(trans.loading_error).format(trans.mark+" "+i)),console.log(n)})},this.initToggleSideNav=function(){var e=$("#actions-sidebar"),t=$(".toggle-icon"),n=$(".content.queries");$("#action-sidebar-toggle-button").length&&e.css("position","absolute"),$("#action-sidebar-toggle-button").click(function(){$(this).hasClass("is-open")?($(this).removeClass("is-open"),e.css("left",-e.outerWidth()),t.removeClass("fa-chevron-left").addClass("fa-chevron-right"),n.removeClass("large-9").removeClass("medium-8").addClass("large-12").addClass("medium-12")):($(this).addClass("is-open"),e.css("left",0),t.removeClass("fa-chevron-right").addClass("fa-chevron-left"),n.removeClass("large-12").removeClass("medium-12").addClass("large-9").addClass("medium-8"))})}}},{}],42:[function(e,t,n){t.exports=function(e){"use strict";var u=this;this.General=e,this.init=function(){u.onViewSelectorChange(),u.setViewSelectorInitState(),u.bindRootViewSelectorEvents(),u.setRootViewSelectorInitState(),u.uncheckOrphanedProperties(),u.bindMarkPropertySelectorEvents(),u.bindMarkPropertyFilterOperationSelectorEvents(),u.bindBreedingObjectAggregationModeSelectorEvents(),u.setMarkPropertyFilterSelectorInitState()},this.onViewSelectorChange=function(){$(".view-selector").on("change",function(){u.setFieldVisibilityFrom($(this)),u.enableAssociated()})},this.uncheckOrphanedProperties=function(){$("#query_builder_form").submit(function(){$(".view-selector").not(":checked").each(function(){$("."+$(this).attr("name")+"-field-selector-container").find('input[type="checkbox"]').prop("checked",!1)})})},this.setRootViewSelectorInitState=function(){$("#root-view").trigger("change")},this.bindRootViewSelectorEvents=function(){var e;$("#root-view").on("change",function(){(e=$('input[name="'+$(this).val()+'"].view-selector')).prop("checked",!0),$("input.view-selector").prop("disabled",!1).removeClass("root_view_lock"),e.prop("disabled",!0).addClass("root_view_lock"),e.trigger("change"),"MarksView"===$(this).val()?($(".breeding-object-aggregation-mode-selector").show(),$(".mark-property").show(),$(".MarksView-field-selector-container > .regular-property").hide()):($(".breeding-object-aggregation-mode-selector").hide(),$(".mark-property").hide(),$(".MarksView-field-selector-container > .regular-property").show(),$(".mark-property-selector").prop("checked",!1))})},this.setViewSelectorInitState=function(){$(".view-selector").each(function(){u.setFieldVisibilityFrom($(this))})},this.validateAssociations=function(e){var n,t,i,r,a,s=[],o=[],l=0;if(0!==e.length){for(e.each(function(){s.push($(this).attr("name"))}),a=$("#root-view").val(),s.splice(s.indexOf(a),1),s.unshift(a),o.push(s.shift());l<o.length;){t=u.getPossibleAssociationsOf(o[l]);for(var p=0;p<t.length;p++)0<=(i=$.inArray(t[p],s))&&-1===$.inArray(t[p],o)&&(o.push(t[p]),s.splice(i,1));l++}$.each(s,function(e,t){(n=$('input[name="'+t+'"]')).prop("checked",!1),u.setFieldVisibilityFrom(n),u.enableCheckbox(n,!1),r=$('label[for="'+n.filter(":checkbox").attr("id")+'"]').text(),alert(String(trans.impossible_selection).format(r))})}},this.getPossibleAssociationsOf=function(e){var t=query_builder_associations[e];if("MarksView"===$("#root-view").val())switch($("#breeding-object-aggregation-mode").val()){case"trees":t=["TreesView"];break;case"varieties":t=["VarietiesView"];break;case"batches":t=["BatchesView"];break;case"convar":t=["VarietiesView"];break;default:throw new Error("Unknown breeding object aggreation mode.")}return t},this.enableAssociated=function(){var e,n=[],t=$(".view-selector:checked"),i=$(".view-selector");u.enableCheckbox(i,!1),0!==t.length?(u.validateAssociations(t),(t=$(".view-selector:checked")).each(function(){e=$(this).attr("name"),n.push(e),$.each(u.getPossibleAssociationsOf(e),function(e,t){n.push(t)})}),$.each(n,function(e,t){u.enableCheckbox($('input[name="'+t+'"]'),!0)})):u.enableCheckbox(i,!0)},this.enableCheckbox=function(e,t){var n;e.each(function(){n=$(this).not(".root_view_lock"),t?(n.prop("disabled",!1),$('label[for="'+n.attr("id")+'"]').removeClass("disabled-checkbox")):(n.prop("disabled",!0),$('label[for="'+n.attr("id")+'"]').addClass("disabled-checkbox"))})},this.setFieldVisibilityFrom=function(e){var t=e.attr("name"),n=$("."+t+"-field-selector-container");e.is(":checked")?n.show():n.hide()},this.bindMarkPropertySelectorEvents=function(){$(".mark-property-selector").click(function(){$(".mark-property-mode").trigger("change"),u.setMarkPropertyFilterSelectorVisibility($(this))})},this.setMarkPropertyFilterSelectorInitState=function(){$(".mark-property-selector").each(function(){$(".mark-property-mode").trigger("change"),u.setMarkPropertyFilterSelectorVisibility($(this))})},this.setMarkPropertyFilterSelectorVisibility=function(e){e.is(":checked")?e.parent().find(".mark-property-filter-selector").show():e.parent().find(".mark-property-filter-selector").hide()},this.bindBreedingObjectAggregationModeSelectorEvents=function(){$("#breeding-object-aggregation-mode").change(function(){$("#root-view").trigger("change")})},this.bindMarkPropertyFilterOperationSelectorEvents=function(){$(".mark-property-filter-operator").change(function(){u.setMarkPropertyFilterValueVisibility($(this))})},this.setMarkPropertyFilterValueVisibility=function(e){-1!==$.inArray(e.val(),["","is_empty","is_not_empty","is_null","is_not_null"])?e.parent().find(".mark-property-filter-value").hide():e.parent().find(".mark-property-filter-value").show()}}},{}],43:[function(t,n,e){(function(e){e.moment=t("moment"),e.QueryBuilder=t("jQuery-QueryBuilder"),t("../../assets/queryBuilder-validate"),t("jQuery-QueryBuilder/src/plugins/change-filters/plugin"),n.exports=function(e){"use strict";var i=this;this.General=e,this.init=function(){i.$query_where_builder=$("#query_where_builder"),0!==i.$query_where_builder.length&&(i.autoAddUtilitiesSwitch=!0,i.autoAddUtilities(),i.instantiateWhereBuilder(),i.onViewSelectorChange(),i.bindSubmitEvents(),i.bindValidatorEvents())},this.onViewSelectorChange=function(){$(".view-selector").on("change",function(){i.updateFilters()})},this.instantiateWhereBuilder=function(){var e=i.getFilters();this.hasInvalidRuleProperties(e,query_where_builder_rules)&&(alert(trans.invalid_query_builder_rules),query_where_builder_rules={condition:"AND",rules:[],valid:!0}),this.$query_where_builder.queryBuilder({icons:{add_group:"fa fa-plus-square",add_rule:"fa fa-plus-circle",remove_group:"fa fa-minus-square",remove_rule:"fa fa-minus-circle",error:"fa fa-exclamation-triangle"},filters:e,rules:query_where_builder_rules,operators:[{type:"equal",nb_inputs:1,multiple:!1,apply_to:["string","number","datetime","boolean"]},{type:"not_equal",nb_inputs:1,multiple:!1,apply_to:["string","number","datetime","boolean"]},{type:"less",nb_inputs:1,multiple:!1,apply_to:["number","datetime"]},{type:"less_or_equal",nb_inputs:1,multiple:!1,apply_to:["number","datetime"]},{type:"greater",nb_inputs:1,multiple:!1,apply_to:["number","datetime"]},{type:"greater_or_equal",nb_inputs:1,multiple:!1,apply_to:["number","datetime"]},{type:"begins_with",nb_inputs:1,multiple:!1,apply_to:["string"]},{type:"not_begins_with",nb_inputs:1,multiple:!1,apply_to:["string"]},{type:"contains",nb_inputs:1,multiple:!1,apply_to:["string"]},{type:"not_contains",nb_inputs:1,multiple:!1,apply_to:["string"]},{type:"ends_with",nb_inputs:1,multiple:!1,apply_to:["string"]},{type:"not_ends_with",nb_inputs:1,multiple:!1,apply_to:["string"]},{type:"is_empty",nb_inputs:0,multiple:!1,apply_to:["string"]},{type:"is_not_empty",nb_inputs:0,multiple:!1,apply_to:["string"]},{type:"is_null",nb_inputs:0,multiple:!1,apply_to:["number","datetime","boolean"]},{type:"is_not_null",nb_inputs:0,multiple:!1,apply_to:["number","datetime","boolean"]}],allow_empty:!0})},this.hasInvalidRuleProperties=function(e,t){var n;if(!t.hasOwnProperty("rules"))return!!t.hasOwnProperty("id")&&!this.inValues(e,t.id);for(var i=0;i<t.rules.length;i++)if(n=this.hasInvalidRuleProperties(e,t.rules[i]))return n},this.getFilters=function(){var e,t=$(".view-selector:checked"),n=[];return t.each(function(){e=$(this).attr("name"),$.each(query_where_builder_filters[e],function(e,t){n.push(t)})}),n},this.updateFilters=function(){i.autoAddUtilitiesSwitch=!1;var t=this.getFilters(),n=this.$query_where_builder[0].queryBuilder.filters;t.forEach(function(e){i.inValues(n,e.id)||i.$query_where_builder.queryBuilder("addFilter",e)}),n.forEach(function(e){i.inValues(t,e.id)||i.$query_where_builder.queryBuilder("removeFilter",e.id,!0)}),i.autoAddUtilitiesSwitch=!0,i.addUtilities()},this.inValues=function(e,t){return e.some(function(e){return t===e.id})},this.saveQueryWhereData=function(){var e=JSON.stringify(i.$query_where_builder.queryBuilder("getRules"));$("#where-query").val(e),i.$query_where_builder.remove()},this.bindSubmitEvents=function(){$("#query_builder_form").submit(function(e){i.validateMarkProperties(e)?i.saveQueryWhereData():e.preventDefault()})},this.clearUncheckedMarkPropertyFilters=function(){$(".mark-property-selector:not(:checked)").each(function(){$(this).parent().find(".mark-property-filter-value").val("")})},this.validateMarkProperties=function(){return"MarksView"!==$("#root-view").val()||(0!==$(".mark-property-selector:checked").length||(alert(trans.no_marks_selected),!1))},this.bindValidatorEvents=function(){$(".validate_query_where_builder").on("click submit change",function(e){i.clearUncheckedMarkPropertyFilters(),$(".query_builder_validation_error").find("ul").html(""),i.$query_where_builder.queryBuilder("validate")||e.preventDefault()}),i.$query_where_builder.on("validationError.queryBuilder",function(e,t,n,i){$(".query_builder_validation_error").show().find("ul").append("<li class='"+t.id+"'>"+n[0]+"</li>")})},this.autoAddUtilities=function(){i.$query_where_builder.on("afterCreateRuleFilters.queryBuilder afterUpdateRuleFilter.queryBuilder",function(e,t){null!==t.filter&&void 0!==t.filter.type&&"date"===t.filter.type&&t.$el.find('.rule-value-container input[type="text"].form-control').addClass("datepicker"),i.addUtilities()})},this.addUtilities=function(){i.autoAddUtilitiesSwitch&&window.setTimeout(function(){i.General.instantiateSelect2(),i.General.instantiateDatepicker()},1e3)}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../assets/queryBuilder-validate":36,"jQuery-QueryBuilder":2,"jQuery-QueryBuilder/src/plugins/change-filters/plugin":3,moment:30}],44:[function(e,t,n){t.exports=function(e){"use strict";var a=this;this.General=e,this.get=function(){var e=$(".get_tree").first(),t=e.hasClass("scanner")?this.processScannerCode:this.ajaxSearchTree;e.bindWithDelay("keyup paste",t,200,!1)},this.processScannerCode=function(){null!==$(".get_tree").first().val().match(/^SUBMIT$/)?a.submitForm():a.ajaxSearchTree(!0)},this.submitForm=function(){var e=$("form");if(1===e.length&&e.valid())return a.General.beep("success"),void e.submit();a.General.beep("error")},this.ajaxSearchTree=function(n){n=!0===n;var i=$(".get_tree").first(),r=$("#tree_container").first(),e=!!i.hasClass("get_printable_tree_with_date")&&"with_date",t=i.data("filter");$.ajax({url:webroot+t.controller+"/"+t.action,data:{fields:t.fields,element:t.element,term:i.val(),printable:e},success:function(e,t){"success"===t?(r.html(e),a.General.beep("success"),n&&i.val("")):(r.html('<div class="nothing_found">'+trans.no_tree_found+"</div>"),(0<i.val().length||n)&&a.General.beep("error"))},dataType:"html",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken),r.html(a.General.searching)}})}}},{}],45:[function(e,t,n){t.exports=function(e){"use strict";this.General=e,this.selectBatchId=function(){var e=$(".select2batch_id");e.select2({ajax:{url:webroot+"varieties/searchCrossingBatchs",delay:250,dataType:"json",processResults:function(e){return{results:$.map(e.data,function(e,t){return{text:e,id:t}})}},beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken)},cache:!0},minimumInputLength:1}),e.on("select2:select",function(){$.ajax({url:webroot+"varieties/getNextFreeCode",data:{batch_id:e.val()},success:function(e){$("#code").val(e.data).removeAttr("disabled")},dataType:"json",beforeSend:function(e){e.setRequestHeader("X-CSRF-Token",csrfToken)}})})},this.setCodeFromOfficialName=function(){var e=$(".official_name").first(),t=e.parents("form"),n=t.find("#code").first(),i=t.find("#batch-id");e.on("keyup paste change",function(){n.val(function(){return e.val().trim().replace(/[^äöüa-zA-Z0-9-_]/g,"_").toLowerCase()})}),t.on("submit",function(){n.removeAttr("disabled"),i.removeAttr("disabled")})}}},{}]},{},[32]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
